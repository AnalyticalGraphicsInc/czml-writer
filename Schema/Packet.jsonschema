{
    "title": "Packet",
    "description": "Describes the graphical properties of a single object in a scene, such as a single aircraft.",
    "type": "object",
    "properties": {
        "id": {
            "description": "The ID of the object described by this packet.  IDs do not need to be GUIDs, but they do need to uniquely identify a single object within a CZML source and any other CZML sources loaded into the same scope.  If this property is not specified, the client will automatically generate a unique one.  However, this prevents later packets from referring to this object in order to, for example, add more data to it.",
            "type": "string",
            "default": "unique"
        },
        "availability": {
            "$ref": "TimeIntervalCollectionValue.jsonschema",
            "description": "When data for an object is available. If data for an object is known to be available at the current animation time, but the client does not yet have that data (presumably because it will arrive in a later packet), the client will pause with a message like \"Buffering...\" while it waits to receive the data. The property can be a single string specifying a single interval, or an array of strings representing intervals.  A later Cesium packet can update this availability if it changes or is found to be incorrect. For example, an SGP4 propagator may report availability for all time, but then later the propagator throws an exception and the availability needs to be adjusted. If this optional property is not present, the object is assumed to be available for all time. Availability is scoped to a particular CZML stream, so two different streams can list different availability for a single object. Within a single stream, the last availability stated for an object is the one in effect and any availabilities in previous packets are ignored. If an object is available at a time, the client expects the object to have at least one property, and it expects all properties that it needs to be defined at that time. If the object doesn't have any properties, or a needed property is defined but not at the animation time, the client will pause animation and wait for more data.",
            "default": "0000-00-00T00:00:00Z/9999-12-31T24:00:00Z"
        },
        "position": {
            "$ref": "Position.jsonschema",
            "description": "The position of the object in the world. The position has no direct visual representation, but it is used to locate billboards, labels, and other primitives attached to the object.",
            "czmlExamples": [
                "examples/SimplePosition.json",
                "examples/TimeVaryingPosition.json"
            ]
        },
        "billboard": {
            "$ref": "Billboard.jsonschema",
            "description": "A billboard, or viewport-aligned image. The billboard is positioned in the scene by the position property. A billboard is sometimes called a marker."
        },
        "vertexPositions": {
            "$ref": "PositionList.jsonschema",
            "description": "The world-space positions of vertices.  The vertex positions have no direct visual representation, but they are used to define polygons, polylines, and other objects attached to the object."
        },
        "orientation": {
            "$ref": "Orientation.jsonschema",
            "description": "The orientation of the object in the world.  The orientation has no direct visual representation, but it is used to orient models, cones, and pyramids attached to the object."
        },
        "point": {
            "$ref": "Point.jsonschema",
            "description": "A point, or viewport-aligned circle.  The point is positioned in the scene by the `position` property."
        },
        "label": {
            "$ref": "Label.jsonschema",
            "description": "A string of text.  The label is positioned in the scene by the `position` property."
        },
        "polyline": {
            "$ref": "Polyline.jsonschema",
            "description": "A polyline, which is a line in the scene composed of multiple segments.  The vertices of the polyline are specified by the `vertexPositions` property."
        },
        "path": {
            "$ref": "Path.jsonschema",
            "description": "A path, which is a polyline defined by the motion of an object over time.  The possible vertices of the path are specified by the `position` property."
        },
        "polygon": {
            "$ref": "Polygon.jsonschema",
            "description": "A polygon, which is a closed figure on the surface of the Earth.  The vertices of the polygon are specified by the `vertexPositions` property."
        },
        "cone": {
            "$ref": "Cone.jsonschema",
            "description": "A cone.  A cone starts at a point or apex and extends in a circle of directions which all have the same angular separation from the Z-axis of the object to which the cone is attached.  The cone may be capped at a radial limit, it may have an inner hole, and it may be only a part of a complete cone defined by clock angle limits.  The apex point of the cone is defined by the `position` property and extends in the direction of the Z-axis as defined by the `orientation` property."
        },
        "pyramid": {
            "$ref": "Pyramid.jsonschema",
            "description": "A pyramid.  A pyramid starts at a point or apex and extends in a specified list of directions from the apex.  Each pair of directions forms a face of the pyramid.  The pyramid may be capped at a radial limit."
        },
        "camera": {
            "$ref": "Camera.jsonschema",
            "description": "A camera."
        },
        "ellipsoid": {
            "$ref": "Ellipsoid.jsonschema",
            "description": "An ellipsoid, which is a closed quadric surface that is a three dimensional analogue of an ellipse.  The ellipsoid is positioned and oriented using the `position` and `orientation` properties."
        },
        "viewFrom": {
            "$ref": "Cartesian3Value.jsonschema",
            "description": "A suggested camera location when viewing this object.  The property is specified as a Cartesian position in the East (x), North (y), Up (z) reference frame relative to the objects position property."
        }
    }
}
