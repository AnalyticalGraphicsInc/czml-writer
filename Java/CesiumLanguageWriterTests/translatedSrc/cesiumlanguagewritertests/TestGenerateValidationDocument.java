package cesiumlanguagewritertests;


import agi.foundation.compatibility.*;
import agi.foundation.compatibility.annotations.CS2JWarning;
import agi.foundation.compatibility.ArrayHelper;
import agi.foundation.compatibility.ColorHelper;
import agi.foundation.compatibility.PathHelper;
import agi.foundation.compatibility.StreamWriterHelper;
import agi.foundation.compatibility.TestContext;
import agi.foundation.compatibility.TestContextRule;
import agi.foundation.compatibility.TextWriterHelper;
import agi.foundation.compatibility.Using;
import cesiumlanguagewriter.*;
import java.awt.Color;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.annotation.Nonnull;
import org.junit.ClassRule;
import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.runners.MethodSorters;
import org.junit.Test;

@SuppressWarnings({
    "unused",
    "deprecation",
    "serial"
})
@CS2JWarning("Unhandled attribute removed: SuppressMessage")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class TestGenerateValidationDocument {
    @Nonnull
    private JulianDate m_documentStartDate = new GregorianDate(2016, 6, 17, 12, 0, 0.0).toJulianDate();
    @Nonnull
    private JulianDate m_documentStopDate = new GregorianDate(2016, 6, 17, 13, 0, 0.0).toJulianDate();
    private Writer m_streamWriter;
    private Writer m_assertionsWriter;
    private Writer m_extensionsAssertionsWriter;
    private CesiumOutputStream m_output;
    private CesiumStreamWriter m_writer;

    private final void writeAssertionBoth(String s) {
        TextWriterHelper.writeLine(m_assertionsWriter, s);
        TextWriterHelper.writeLine(m_extensionsAssertionsWriter, s);
    }

    private static <T> List<T> createList(T t1, T t2) {
        final ArrayList<T> tempCollection$0 = new ArrayList<T>();
        tempCollection$0.add(t1);
        tempCollection$0.add(t2);
        return tempCollection$0;
    }

    private static <T> List<T> createList(T... ts) {
        return ArrayHelper.arrayAsList(ts);
    }

    @Test
    public final void generateValidationDocument() {
        String dir = TestContext.getCurrentContext().getTestDirectory();
        try (Using<Writer> using$0 = new Using<Writer>(m_streamWriter = StreamWriterHelper.create(PathHelper.combine(dir, "ValidationDocument.czml")))) {
            try (Using<Writer> using$1 = new Using<Writer>(m_assertionsWriter = StreamWriterHelper.create(PathHelper.combine(dir, "ValidationDocumentAssertions.js")))) {
                try (Using<Writer> using$2 = new Using<Writer>(m_extensionsAssertionsWriter = StreamWriterHelper.create(PathHelper.combine(dir, "ValidationDocumentExtensionAssertions.js")))) {
                    writeAssertionBoth("return CzmlDataSource.load('Data/CZML/ValidationDocument.czml').then(function(dataSource) {");
                    writeAssertionBoth("    var e;");
                    writeAssertionBoth("    var date;");
                    writeAssertionBoth("    var documentStartDate = JulianDate.fromIso8601('2016-06-17T12:00:00Z');");
                    writeAssertionBoth("    var documentStopDate = JulianDate.fromIso8601('2016-06-17T13:00:00Z');");
                    final CesiumOutputStream tempObj$0 = new CesiumOutputStream(m_streamWriter);
                    tempObj$0.setPrettyFormatting(true);
                    m_output = tempObj$0;
                    m_writer = new CesiumStreamWriter();
                    m_output.writeStartSequence();
                    writeClock();
                    writeConstantValues();
                    writeReferenceValues();
                    writeSampledValues();
                    m_output.writeEndSequence();
                    writeAssertionBoth("});");
                }
            }
        }
    }

    private final void writeClock() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("document");
            packet.writeName("ValidationDocument");
            packet.writeVersion("1.0");
            try (Using<ClockCesiumWriter> using$1 = new Using<ClockCesiumWriter>(packet.openClockProperty())) {
                final ClockCesiumWriter clock = using$1.resource;
                clock.writeInterval(m_documentStartDate, m_documentStopDate);
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.startTime).toEqual(documentStartDate);");
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.stopTime).toEqual(documentStopDate);");
                clock.writeCurrentTime(m_documentStartDate);
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.currentTime).toEqual(documentStartDate);");
                clock.writeMultiplier(1.0);
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.multiplier).toEqual(1.0);");
                clock.writeRange(ClockRange.UNBOUNDED);
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.clockRange).toEqual(ClockRange.UNBOUNDED);");
                clock.writeStep(ClockStep.SYSTEM_CLOCK_MULTIPLIER);
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(dataSource.clock.clockStep).toEqual(ClockStep.SYSTEM_CLOCK_MULTIPLIER);");
            }
        }
    }

    private final void writeConstantValues() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("Constant");
            writeAssertionBoth("    var constant = e = dataSource.entities.getById('Constant');");
            writeAssertionBoth("    expect(e).toBeDefined();");
            writeAssertionBoth("    date = JulianDate.now();");
            try (Using<StringCesiumWriter> using$1 = new Using<StringCesiumWriter>(packet.openDescriptionProperty())) {
                final StringCesiumWriter w = using$1.resource;
                w.writeString("string31449");
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.description.getValue(date)).toEqual('string31449');");
            }
            try (Using<PositionCesiumWriter> using$2 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$2.resource;
                w.writeCartesian(new Cartesian(24944.0, 16481.0, 24896.0));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(24944, 16481, 24896));");
            }
            try (Using<OrientationCesiumWriter> using$3 = new Using<OrientationCesiumWriter>(packet.openOrientationProperty())) {
                final OrientationCesiumWriter w = using$3.resource;
                w.writeUnitQuaternion(new UnitQuaternion(0.565625261998114, 0.431493311977589, 0.560811914509339, 0.423522822587574));
                TextWriterHelper.writeLine(m_assertionsWriter,
                        "    expect(e.orientation.getValue(date)).toEqualEpsilon(new Quaternion(0.431493311977589, 0.560811914509339, 0.423522822587574, 0.565625261998114), 1e-14);");
            }
            try (Using<ViewFromCesiumWriter> using$4 = new Using<ViewFromCesiumWriter>(packet.openViewFromProperty())) {
                final ViewFromCesiumWriter w = using$4.resource;
                w.writeCartesian(new Cartesian(17794.0, 13381.0, 18228.0));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(date)).toEqual(new Cartesian3(17794, 13381, 18228));");
            }
            try (Using<BillboardCesiumWriter> using$5 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$5.resource;
                try (Using<BooleanCesiumWriter> using$6 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$6.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.show.getValue(date)).toEqual(true);");
                }
                try (Using<UriCesiumWriter> using$7 = new Using<UriCesiumWriter>(w.openImageProperty())) {
                    final UriCesiumWriter w2 = using$7.resource;
                    w2.writeUri("http://example.com/3792", CesiumResourceBehavior.LINK_TO);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.image.getValue(date).url).toEqual('http://example.com/3792');");
                }
                try (Using<DoubleCesiumWriter> using$8 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$8.resource;
                    w2.writeNumber(27514.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(27514.0);");
                }
                try (Using<PixelOffsetCesiumWriter> using$9 = new Using<PixelOffsetCesiumWriter>(w.openPixelOffsetProperty())) {
                    final PixelOffsetCesiumWriter w2 = using$9.resource;
                    w2.writeCartesian2(new Rectangular(16996.0, 51010.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(date)).toEqual(new Cartesian2(16996, 51010));");
                }
                try (Using<EyeOffsetCesiumWriter> using$10 = new Using<EyeOffsetCesiumWriter>(w.openEyeOffsetProperty())) {
                    final EyeOffsetCesiumWriter w2 = using$10.resource;
                    w2.writeCartesian(new Cartesian(64633.0, 11516.0, 17196.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(date)).toEqual(new Cartesian3(64633, 11516, 17196));");
                }
                try (Using<HorizontalOriginCesiumWriter> using$11 = new Using<HorizontalOriginCesiumWriter>(w.openHorizontalOriginProperty())) {
                    final HorizontalOriginCesiumWriter w2 = using$11.resource;
                    w2.writeHorizontalOrigin(CesiumHorizontalOrigin.LEFT);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                }
                try (Using<VerticalOriginCesiumWriter> using$12 = new Using<VerticalOriginCesiumWriter>(w.openVerticalOriginProperty())) {
                    final VerticalOriginCesiumWriter w2 = using$12.resource;
                    w2.writeVerticalOrigin(CesiumVerticalOrigin.BOTTOM);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                }
                try (Using<HeightReferenceCesiumWriter> using$13 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$13.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<ColorCesiumWriter> using$14 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$14.resource;
                    w2.writeRgba(ColorHelper.fromArgb(140, 87, 118, 167));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(date)).toEqual(Color.fromBytes(87, 118, 167, 140));");
                }
                try (Using<DoubleCesiumWriter> using$15 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$15.resource;
                    w2.writeNumber(57379.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(date)).toEqual(57379.0);");
                }
                try (Using<AlignedAxisCesiumWriter> using$16 = new Using<AlignedAxisCesiumWriter>(w.openAlignedAxisProperty())) {
                    final AlignedAxisCesiumWriter w2 = using$16.resource;
                    w2.writeUnitCartesian(new UnitCartesian(0.205062091895724, 0.975768213485699, 0.0763277932228903));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.alignedAxis.getValue(date)).toEqualEpsilon(new Cartesian3(0.205062091895724, 0.975768213485699, 0.0763277932228903), 1e-14);");
                }
                try (Using<BooleanCesiumWriter> using$17 = new Using<BooleanCesiumWriter>(w.openSizeInMetersProperty())) {
                    final BooleanCesiumWriter w2 = using$17.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(true);");
                }
                try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$18.resource;
                    w2.writeNumber(25197.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(date)).toEqual(25197.0);");
                }
                try (Using<DoubleCesiumWriter> using$19 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$19.resource;
                    w2.writeNumber(53328.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(date)).toEqual(53328.0);");
                }
                try (Using<NearFarScalarCesiumWriter> using$20 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$20.resource;
                    w2.writeNearFarScalar(new NearFarScalar(59318.0, 31207.0, 63353.0, 55287.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(59318, 31207, 63353, 55287));");
                }
                try (Using<NearFarScalarCesiumWriter> using$21 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$21.resource;
                    w2.writeNearFarScalar(new NearFarScalar(43707.0, 31146.0, 12921.0, 57138.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(43707, 31146, 12921, 57138));");
                }
                try (Using<NearFarScalarCesiumWriter> using$22 = new Using<NearFarScalarCesiumWriter>(w.openPixelOffsetScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$22.resource;
                    w2.writeNearFarScalar(new NearFarScalar(11873.0, 40494.0, 29598.0, 27507.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(11873, 40494, 29598, 27507));");
                }
                try (Using<BoundingRectangleCesiumWriter> using$23 = new Using<BoundingRectangleCesiumWriter>(w.openImageSubRegionProperty())) {
                    final BoundingRectangleCesiumWriter w2 = using$23.resource;
                    w2.writeBoundingRectangle(BoundingRectangle.fromWidthHeight(62620.0, 63220.0, 23030.0, 63321.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(new BoundingRectangle(62620, 63220, 23030, 63321));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$24 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$24.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(22843.0, 27481.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(22843, 27481));");
                }
                try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$25.resource;
                    w2.writeNumber(39764.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.disableDepthTestDistance.getValue(date)).toEqual(39764.0);");
                }
            }
            try (Using<BoxCesiumWriter> using$26 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$26.resource;
                try (Using<BooleanCesiumWriter> using$27 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$27.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.show.getValue(date)).toEqual(true);");
                }
                try (Using<BoxDimensionsCesiumWriter> using$28 = new Using<BoxDimensionsCesiumWriter>(w.openDimensionsProperty())) {
                    final BoxDimensionsCesiumWriter w2 = using$28.resource;
                    w2.writeCartesian(new Cartesian(57494.0, 62432.0, 42995.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(date)).toEqual(new Cartesian3(57494, 62432, 42995));");
                }
                try (Using<HeightReferenceCesiumWriter> using$29 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$29.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<BooleanCesiumWriter> using$30 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$30.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$31 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$31.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$32 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$32.resource;
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(ColorHelper.fromArgb(144, 88, 226, 91));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(88, 226, 91, 144));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$34 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$34.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$35.resource;
                    w2.writeRgba(ColorHelper.fromArgb(168, 121, 42, 244));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(date)).toEqual(Color.fromBytes(121, 42, 244, 168));");
                }
                try (Using<DoubleCesiumWriter> using$36 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$36.resource;
                    w2.writeNumber(15323.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(date)).toEqual(15323.0);");
                }
                try (Using<ShadowModeCesiumWriter> using$37 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$37.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$38 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$38.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(3775.0, 49016.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(3775, 49016));");
                }
            }
            try (Using<CorridorCesiumWriter> using$39 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$39.resource;
                try (Using<BooleanCesiumWriter> using$40 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$40.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.show.getValue(date)).toEqual(true);");
                }
                try (Using<PositionListCesiumWriter> using$41 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$41.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(36415.0, 2702.0, 36618.0), new Cartesian(47759.0, 11706.0, 63277.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.positions.getValue(date)).toEqual([ new Cartesian3(36415, 2702, 36618), new Cartesian3(47759, 11706, 63277) ]);");
                }
                try (Using<DoubleCesiumWriter> using$42 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$42.resource;
                    w2.writeNumber(20413.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(date)).toEqual(20413.0);");
                }
                try (Using<DoubleCesiumWriter> using$43 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$43.resource;
                    w2.writeNumber(8062.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(date)).toEqual(8062.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$44 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$44.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<DoubleCesiumWriter> using$45 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$45.resource;
                    w2.writeNumber(22846.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(22846.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$46 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$46.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<CornerTypeCesiumWriter> using$47 = new Using<CornerTypeCesiumWriter>(w.openCornerTypeProperty())) {
                    final CornerTypeCesiumWriter w2 = using$47.resource;
                    w2.writeCornerType(CesiumCornerType.BEVELED);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
                }
                try (Using<DoubleCesiumWriter> using$48 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$48.resource;
                    w2.writeNumber(44105.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(date)).toEqual(44105.0);");
                }
                try (Using<BooleanCesiumWriter> using$49 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$49.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$51 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgba(ColorHelper.fromArgb(236, 230, 252, 22));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(230, 252, 22, 236));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$53 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$53.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$54.resource;
                    w2.writeRgba(ColorHelper.fromArgb(60, 198, 25, 134));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(date)).toEqual(Color.fromBytes(198, 25, 134, 60));");
                }
                try (Using<DoubleCesiumWriter> using$55 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$55.resource;
                    w2.writeNumber(9132.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(date)).toEqual(9132.0);");
                }
                try (Using<ShadowModeCesiumWriter> using$56 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$56.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$57 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$57.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(15797.0, 46507.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(15797, 46507));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$58 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$58.resource;
                    w2.writeClassificationType(CesiumClassificationType.TERRAIN);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.classificationType.getValue(date)).toEqual(ClassificationType.TERRAIN);");
                }
                try (Using<IntegerCesiumWriter> using$59 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$59.resource;
                    w2.writeNumber(59315);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.zIndex.getValue(date)).toEqual(59315);");
                }
            }
            try (Using<CylinderCesiumWriter> using$60 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$60.resource;
                try (Using<BooleanCesiumWriter> using$61 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$61.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.show.getValue(date)).toEqual(true);");
                }
                try (Using<DoubleCesiumWriter> using$62 = new Using<DoubleCesiumWriter>(w.openLengthProperty())) {
                    final DoubleCesiumWriter w2 = using$62.resource;
                    w2.writeNumber(33298.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(date)).toEqual(33298.0);");
                }
                try (Using<DoubleCesiumWriter> using$63 = new Using<DoubleCesiumWriter>(w.openTopRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$63.resource;
                    w2.writeNumber(16245.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(date)).toEqual(16245.0);");
                }
                try (Using<DoubleCesiumWriter> using$64 = new Using<DoubleCesiumWriter>(w.openBottomRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$64.resource;
                    w2.writeNumber(59378.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(59378.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$65 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$65.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<BooleanCesiumWriter> using$66 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$66.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$67 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$67.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$68 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$68.resource;
                        try (Using<ColorCesiumWriter> using$69 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$69.resource;
                            m2.writeRgba(ColorHelper.fromArgb(64, 216, 68, 53));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(216, 68, 53, 64));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$70 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$70.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$71 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$71.resource;
                    w2.writeRgba(ColorHelper.fromArgb(96, 4, 90, 209));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(date)).toEqual(Color.fromBytes(4, 90, 209, 96));");
                }
                try (Using<DoubleCesiumWriter> using$72 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$72.resource;
                    w2.writeNumber(64018.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(64018.0);");
                }
                try (Using<IntegerCesiumWriter> using$73 = new Using<IntegerCesiumWriter>(w.openNumberOfVerticalLinesProperty())) {
                    final IntegerCesiumWriter w2 = using$73.resource;
                    w2.writeNumber(38567);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(38567);");
                }
                try (Using<IntegerCesiumWriter> using$74 = new Using<IntegerCesiumWriter>(w.openSlicesProperty())) {
                    final IntegerCesiumWriter w2 = using$74.resource;
                    w2.writeNumber(39979);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(date)).toEqual(39979);");
                }
                try (Using<ShadowModeCesiumWriter> using$75 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$75.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$76 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$76.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(43860.0, 52395.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(43860, 52395));");
                }
            }
            try (Using<EllipseCesiumWriter> using$77 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$77.resource;
                try (Using<BooleanCesiumWriter> using$78 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$78.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.show.getValue(date)).toEqual(true);");
                }
                try (Using<DoubleCesiumWriter> using$79 = new Using<DoubleCesiumWriter>(w.openSemiMajorAxisProperty())) {
                    final DoubleCesiumWriter w2 = using$79.resource;
                    w2.writeNumber(60072.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(60072.0);");
                }
                try (Using<DoubleCesiumWriter> using$80 = new Using<DoubleCesiumWriter>(w.openSemiMinorAxisProperty())) {
                    final DoubleCesiumWriter w2 = using$80.resource;
                    w2.writeNumber(38653.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(38653.0);");
                }
                try (Using<DoubleCesiumWriter> using$81 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$81.resource;
                    w2.writeNumber(15549.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(date)).toEqual(15549.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$82 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$82.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<DoubleCesiumWriter> using$83 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$83.resource;
                    w2.writeNumber(55640.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(55640.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$84 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$84.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<DoubleCesiumWriter> using$85 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$85.resource;
                    w2.writeNumber(27722.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(date)).toEqual(27722.0);");
                }
                try (Using<DoubleCesiumWriter> using$86 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$86.resource;
                    w2.writeNumber(4692.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(date)).toEqual(4692.0);");
                }
                try (Using<DoubleCesiumWriter> using$87 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$87.resource;
                    w2.writeNumber(62192.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(date)).toEqual(62192.0);");
                }
                try (Using<BooleanCesiumWriter> using$88 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$88.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$89 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$89.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$90 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$90.resource;
                        try (Using<ColorCesiumWriter> using$91 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$91.resource;
                            m2.writeRgba(ColorHelper.fromArgb(40, 116, 186, 200));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(116, 186, 200, 40));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$92 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$92.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$93 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$93.resource;
                    w2.writeRgba(ColorHelper.fromArgb(104, 160, 82, 145));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(date)).toEqual(Color.fromBytes(160, 82, 145, 104));");
                }
                try (Using<DoubleCesiumWriter> using$94 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$94.resource;
                    w2.writeNumber(8839.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(8839.0);");
                }
                try (Using<IntegerCesiumWriter> using$95 = new Using<IntegerCesiumWriter>(w.openNumberOfVerticalLinesProperty())) {
                    final IntegerCesiumWriter w2 = using$95.resource;
                    w2.writeNumber(38878);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(38878);");
                }
                try (Using<ShadowModeCesiumWriter> using$96 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$96.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$97 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$97.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(27813.0, 30828.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(27813, 30828));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$98 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$98.resource;
                    w2.writeClassificationType(CesiumClassificationType.TERRAIN);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.classificationType.getValue(date)).toEqual(ClassificationType.TERRAIN);");
                }
                try (Using<IntegerCesiumWriter> using$99 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$99.resource;
                    w2.writeNumber(3341);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.zIndex.getValue(date)).toEqual(3341);");
                }
            }
            try (Using<EllipsoidCesiumWriter> using$100 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$100.resource;
                try (Using<BooleanCesiumWriter> using$101 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$101.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.show.getValue(date)).toEqual(true);");
                }
                try (Using<EllipsoidRadiiCesiumWriter> using$102 = new Using<EllipsoidRadiiCesiumWriter>(w.openRadiiProperty())) {
                    final EllipsoidRadiiCesiumWriter w2 = using$102.resource;
                    w2.writeCartesian(new Cartesian(15638.0, 24381.0, 37983.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(date)).toEqual(new Cartesian3(15638, 24381, 37983));");
                }
                try (Using<EllipsoidRadiiCesiumWriter> using$103 = new Using<EllipsoidRadiiCesiumWriter>(w.openInnerRadiiProperty())) {
                    final EllipsoidRadiiCesiumWriter w2 = using$103.resource;
                    w2.writeCartesian(new Cartesian(21988.0, 44373.0, 36013.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.innerRadii.getValue(date)).toEqual(new Cartesian3(21988, 44373, 36013));");
                }
                try (Using<DoubleCesiumWriter> using$104 = new Using<DoubleCesiumWriter>(w.openMinimumClockProperty())) {
                    final DoubleCesiumWriter w2 = using$104.resource;
                    w2.writeNumber(57589.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumClock.getValue(date)).toEqual(57589.0);");
                }
                try (Using<DoubleCesiumWriter> using$105 = new Using<DoubleCesiumWriter>(w.openMaximumClockProperty())) {
                    final DoubleCesiumWriter w2 = using$105.resource;
                    w2.writeNumber(24940.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumClock.getValue(date)).toEqual(24940.0);");
                }
                try (Using<DoubleCesiumWriter> using$106 = new Using<DoubleCesiumWriter>(w.openMinimumConeProperty())) {
                    final DoubleCesiumWriter w2 = using$106.resource;
                    w2.writeNumber(54533.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumCone.getValue(date)).toEqual(54533.0);");
                }
                try (Using<DoubleCesiumWriter> using$107 = new Using<DoubleCesiumWriter>(w.openMaximumConeProperty())) {
                    final DoubleCesiumWriter w2 = using$107.resource;
                    w2.writeNumber(64532.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumCone.getValue(date)).toEqual(64532.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$108 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$108.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<BooleanCesiumWriter> using$109 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$109.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$110 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$110.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$111 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$111.resource;
                        try (Using<ColorCesiumWriter> using$112 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$112.resource;
                            m2.writeRgba(ColorHelper.fromArgb(69, 202, 67, 110));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(202, 67, 110, 69));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$113 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$113.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$114 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$114.resource;
                    w2.writeRgba(ColorHelper.fromArgb(7, 55, 23, 226));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(Color.fromBytes(55, 23, 226, 7));");
                }
                try (Using<DoubleCesiumWriter> using$115 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$115.resource;
                    w2.writeNumber(47507.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(47507.0);");
                }
                try (Using<IntegerCesiumWriter> using$116 = new Using<IntegerCesiumWriter>(w.openStackPartitionsProperty())) {
                    final IntegerCesiumWriter w2 = using$116.resource;
                    w2.writeNumber(54278);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(54278);");
                }
                try (Using<IntegerCesiumWriter> using$117 = new Using<IntegerCesiumWriter>(w.openSlicePartitionsProperty())) {
                    final IntegerCesiumWriter w2 = using$117.resource;
                    w2.writeNumber(28562);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(28562);");
                }
                try (Using<IntegerCesiumWriter> using$118 = new Using<IntegerCesiumWriter>(w.openSubdivisionsProperty())) {
                    final IntegerCesiumWriter w2 = using$118.resource;
                    w2.writeNumber(14008);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(14008);");
                }
                try (Using<ShadowModeCesiumWriter> using$119 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$119.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$120 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$120.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(3293.0, 56793.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(3293, 56793));");
                }
            }
            try (Using<LabelCesiumWriter> using$121 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$121.resource;
                try (Using<BooleanCesiumWriter> using$122 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$122.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.show.getValue(date)).toEqual(true);");
                }
                try (Using<StringCesiumWriter> using$123 = new Using<StringCesiumWriter>(w.openTextProperty())) {
                    final StringCesiumWriter w2 = using$123.resource;
                    w2.writeString("string36641");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.text.getValue(date)).toEqual('string36641');");
                }
                try (Using<FontCesiumWriter> using$124 = new Using<FontCesiumWriter>(w.openFontProperty())) {
                    final FontCesiumWriter w2 = using$124.resource;
                    w2.writeFont("14px sans-serif");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.font.getValue(date)).toEqual('14px sans-serif');");
                }
                try (Using<LabelStyleCesiumWriter> using$125 = new Using<LabelStyleCesiumWriter>(w.openStyleProperty())) {
                    final LabelStyleCesiumWriter w2 = using$125.resource;
                    w2.writeLabelStyle(CesiumLabelStyle.FILL_AND_OUTLINE);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.style.getValue(date)).toEqual(LabelStyle.FILL_AND_OUTLINE);");
                }
                try (Using<DoubleCesiumWriter> using$126 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$126.resource;
                    w2.writeNumber(6510.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(date)).toEqual(6510.0);");
                }
                try (Using<BooleanCesiumWriter> using$127 = new Using<BooleanCesiumWriter>(w.openShowBackgroundProperty())) {
                    final BooleanCesiumWriter w2 = using$127.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.showBackground.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$128 = new Using<ColorCesiumWriter>(w.openBackgroundColorProperty())) {
                    final ColorCesiumWriter w2 = using$128.resource;
                    w2.writeRgba(ColorHelper.fromArgb(128, 225, 114, 54));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundColor.getValue(date)).toEqual(Color.fromBytes(225, 114, 54, 128));");
                }
                try (Using<BackgroundPaddingCesiumWriter> using$129 = new Using<BackgroundPaddingCesiumWriter>(w.openBackgroundPaddingProperty())) {
                    final BackgroundPaddingCesiumWriter w2 = using$129.resource;
                    w2.writeCartesian2(new Rectangular(5508.0, 56341.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundPadding.getValue(date)).toEqual(new Cartesian2(5508, 56341));");
                }
                try (Using<PixelOffsetCesiumWriter> using$130 = new Using<PixelOffsetCesiumWriter>(w.openPixelOffsetProperty())) {
                    final PixelOffsetCesiumWriter w2 = using$130.resource;
                    w2.writeCartesian2(new Rectangular(25913.0, 30821.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(date)).toEqual(new Cartesian2(25913, 30821));");
                }
                try (Using<EyeOffsetCesiumWriter> using$131 = new Using<EyeOffsetCesiumWriter>(w.openEyeOffsetProperty())) {
                    final EyeOffsetCesiumWriter w2 = using$131.resource;
                    w2.writeCartesian(new Cartesian(30502.0, 29047.0, 25457.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(date)).toEqual(new Cartesian3(30502, 29047, 25457));");
                }
                try (Using<HorizontalOriginCesiumWriter> using$132 = new Using<HorizontalOriginCesiumWriter>(w.openHorizontalOriginProperty())) {
                    final HorizontalOriginCesiumWriter w2 = using$132.resource;
                    w2.writeHorizontalOrigin(CesiumHorizontalOrigin.LEFT);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                }
                try (Using<VerticalOriginCesiumWriter> using$133 = new Using<VerticalOriginCesiumWriter>(w.openVerticalOriginProperty())) {
                    final VerticalOriginCesiumWriter w2 = using$133.resource;
                    w2.writeVerticalOrigin(CesiumVerticalOrigin.BOTTOM);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                }
                try (Using<HeightReferenceCesiumWriter> using$134 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$134.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<ColorCesiumWriter> using$135 = new Using<ColorCesiumWriter>(w.openFillColorProperty())) {
                    final ColorCesiumWriter w2 = using$135.resource;
                    w2.writeRgba(ColorHelper.fromArgb(137, 88, 197, 147));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(date)).toEqual(Color.fromBytes(88, 197, 147, 137));");
                }
                try (Using<ColorCesiumWriter> using$136 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$136.resource;
                    w2.writeRgba(ColorHelper.fromArgb(223, 171, 128, 159));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(date)).toEqual(Color.fromBytes(171, 128, 159, 223));");
                }
                try (Using<DoubleCesiumWriter> using$137 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$137.resource;
                    w2.writeNumber(36637.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(date)).toEqual(36637.0);");
                }
                try (Using<NearFarScalarCesiumWriter> using$138 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$138.resource;
                    w2.writeNearFarScalar(new NearFarScalar(34067.0, 16517.0, 11328.0, 13612.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(34067, 16517, 11328, 13612));");
                }
                try (Using<NearFarScalarCesiumWriter> using$139 = new Using<NearFarScalarCesiumWriter>(w.openPixelOffsetScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$139.resource;
                    w2.writeNearFarScalar(new NearFarScalar(21220.0, 35154.0, 33161.0, 36737.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(new NearFarScalar(21220, 35154, 33161, 36737));");
                }
                try (Using<NearFarScalarCesiumWriter> using$140 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$140.resource;
                    w2.writeNearFarScalar(new NearFarScalar(7350.0, 32796.0, 1408.0, 55045.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(7350, 32796, 1408, 55045));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$141 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$141.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(5204.0, 21012.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(5204, 21012));");
                }
                try (Using<DoubleCesiumWriter> using$142 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$142.resource;
                    w2.writeNumber(17959.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.disableDepthTestDistance.getValue(date)).toEqual(17959.0);");
                }
            }
            try (Using<ModelCesiumWriter> using$143 = new Using<ModelCesiumWriter>(packet.openModelProperty())) {
                final ModelCesiumWriter w = using$143.resource;
                try (Using<BooleanCesiumWriter> using$144 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$144.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.show.getValue(date)).toEqual(true);");
                }
                try (Using<UriCesiumWriter> using$145 = new Using<UriCesiumWriter>(w.openGltfProperty())) {
                    final UriCesiumWriter w2 = using$145.resource;
                    w2.writeUri("http://example.com/60043", CesiumResourceBehavior.LINK_TO);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.uri.getValue(date).url).toEqual('http://example.com/60043');");
                }
                try (Using<DoubleCesiumWriter> using$146 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$146.resource;
                    w2.writeNumber(44278.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(date)).toEqual(44278.0);");
                }
                try (Using<DoubleCesiumWriter> using$147 = new Using<DoubleCesiumWriter>(w.openMinimumPixelSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$147.resource;
                    w2.writeNumber(35888.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(date)).toEqual(35888.0);");
                }
                try (Using<DoubleCesiumWriter> using$148 = new Using<DoubleCesiumWriter>(w.openMaximumScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$148.resource;
                    w2.writeNumber(64305.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(date)).toEqual(64305.0);");
                }
                try (Using<BooleanCesiumWriter> using$149 = new Using<BooleanCesiumWriter>(w.openIncrementallyLoadTexturesProperty())) {
                    final BooleanCesiumWriter w2 = using$149.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$150 = new Using<BooleanCesiumWriter>(w.openRunAnimationsProperty())) {
                    final BooleanCesiumWriter w2 = using$150.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.runAnimations.getValue(date)).toEqual(true);");
                }
                try (Using<ShadowModeCesiumWriter> using$151 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$151.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<HeightReferenceCesiumWriter> using$152 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$152.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<ColorCesiumWriter> using$153 = new Using<ColorCesiumWriter>(w.openSilhouetteColorProperty())) {
                    final ColorCesiumWriter w2 = using$153.resource;
                    w2.writeRgba(ColorHelper.fromArgb(101, 29, 61, 52));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteColor.getValue(date)).toEqual(Color.fromBytes(29, 61, 52, 101));");
                }
                try (Using<DoubleCesiumWriter> using$154 = new Using<DoubleCesiumWriter>(w.openSilhouetteSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$154.resource;
                    w2.writeNumber(4645.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteSize.getValue(date)).toEqual(4645.0);");
                }
                try (Using<ColorCesiumWriter> using$155 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$155.resource;
                    w2.writeRgba(ColorHelper.fromArgb(73, 0, 52, 75));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.color.getValue(date)).toEqual(Color.fromBytes(0, 52, 75, 73));");
                }
                try (Using<ColorBlendModeCesiumWriter> using$156 = new Using<ColorBlendModeCesiumWriter>(w.openColorBlendModeProperty())) {
                    final ColorBlendModeCesiumWriter w2 = using$156.resource;
                    w2.writeColorBlendMode(CesiumColorBlendMode.REPLACE);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.colorBlendMode.getValue(date)).toEqual(ColorBlendMode.REPLACE);");
                }
                try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(w.openColorBlendAmountProperty())) {
                    final DoubleCesiumWriter w2 = using$157.resource;
                    w2.writeNumber(7475.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.colorBlendAmount.getValue(date)).toEqual(7475.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$158 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$158.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(31861.0, 62844.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(31861, 62844));");
                }
                try (Using<NodeTransformationsCesiumWriter> using$159 = new Using<NodeTransformationsCesiumWriter>(w.openNodeTransformationsProperty())) {
                    final NodeTransformationsCesiumWriter w2 = using$159.resource;
                    try (Using<NodeTransformationCesiumWriter> using$160 = new Using<NodeTransformationCesiumWriter>(w2.openNodeTransformationProperty("prop"))) {
                        final NodeTransformationCesiumWriter a = using$160.resource;
                        try (Using<TranslationCesiumWriter> using$161 = new Using<TranslationCesiumWriter>(a.openTranslationProperty())) {
                            final TranslationCesiumWriter w3 = using$161.resource;
                            w3.writeCartesian(new Cartesian(18548.0, 48456.0, 21181.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.nodeTransformations.prop.translation.getValue(date)).toEqual(new Cartesian3(18548, 48456, 21181));");
                        }
                        try (Using<RotationCesiumWriter> using$162 = new Using<RotationCesiumWriter>(a.openRotationProperty())) {
                            final RotationCesiumWriter w3 = using$162.resource;
                            w3.writeUnitQuaternion(new UnitQuaternion(0.0959146992664751, 0.527960606328925, 0.567156704919186, 0.624812964569899));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.model.nodeTransformations.prop.rotation.getValue(date)).toEqualEpsilon(new Quaternion(0.527960606328925, 0.567156704919186, 0.624812964569899, 0.0959146992664751), 1e-14);");
                        }
                        try (Using<ScaleCesiumWriter> using$163 = new Using<ScaleCesiumWriter>(a.openScaleProperty())) {
                            final ScaleCesiumWriter w3 = using$163.resource;
                            w3.writeCartesian(new Cartesian(53739.0, 37841.0, 41107.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.nodeTransformations.prop.scale.getValue(date)).toEqual(new Cartesian3(53739, 37841, 41107));");
                        }
                    }
                }
                try (Using<ArticulationsCesiumWriter> using$164 = new Using<ArticulationsCesiumWriter>(w.openArticulationsProperty())) {
                    final ArticulationsCesiumWriter w2 = using$164.resource;
                    try (Using<ArticulationCesiumWriter> using$165 = new Using<ArticulationCesiumWriter>(w2.openArticulationProperty("prop"))) {
                        final ArticulationCesiumWriter a = using$165.resource;
                        a.writeNumber(25496.0);
                        TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.articulations.prop.getValue(date)).toEqual(25496.0);");
                    }
                }
            }
            try (Using<PathCesiumWriter> using$166 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$166.resource;
                try (Using<BooleanCesiumWriter> using$167 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$167.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.show.getValue(date)).toEqual(true);");
                }
                try (Using<DoubleCesiumWriter> using$168 = new Using<DoubleCesiumWriter>(w.openLeadTimeProperty())) {
                    final DoubleCesiumWriter w2 = using$168.resource;
                    w2.writeNumber(5997.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(date)).toEqual(5997.0);");
                }
                try (Using<DoubleCesiumWriter> using$169 = new Using<DoubleCesiumWriter>(w.openTrailTimeProperty())) {
                    final DoubleCesiumWriter w2 = using$169.resource;
                    w2.writeNumber(52915.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(date)).toEqual(52915.0);");
                }
                try (Using<DoubleCesiumWriter> using$170 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$170.resource;
                    w2.writeNumber(56040.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(date)).toEqual(56040.0);");
                }
                try (Using<DoubleCesiumWriter> using$171 = new Using<DoubleCesiumWriter>(w.openResolutionProperty())) {
                    final DoubleCesiumWriter w2 = using$171.resource;
                    w2.writeNumber(31563.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(date)).toEqual(31563.0);");
                }
                try (Using<PolylineMaterialCesiumWriter> using$172 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$172.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$173 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$173.resource;
                        try (Using<ColorCesiumWriter> using$174 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$174.resource;
                            m2.writeRgba(ColorHelper.fromArgb(13, 10, 78, 168));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(10, 78, 168, 13));");
                        }
                    }
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$175 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$175.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(11646.0, 32422.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(11646, 32422));");
                }
            }
            try (Using<PointCesiumWriter> using$176 = new Using<PointCesiumWriter>(packet.openPointProperty())) {
                final PointCesiumWriter w = using$176.resource;
                try (Using<BooleanCesiumWriter> using$177 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$177.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.show.getValue(date)).toEqual(true);");
                }
                try (Using<DoubleCesiumWriter> using$178 = new Using<DoubleCesiumWriter>(w.openPixelSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$178.resource;
                    w2.writeNumber(53869.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(date)).toEqual(53869.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$179 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$179.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<ColorCesiumWriter> using$180 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$180.resource;
                    w2.writeRgba(ColorHelper.fromArgb(77, 3, 147, 219));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(date)).toEqual(Color.fromBytes(3, 147, 219, 77));");
                }
                try (Using<ColorCesiumWriter> using$181 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$181.resource;
                    w2.writeRgba(ColorHelper.fromArgb(94, 254, 106, 11));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(date)).toEqual(Color.fromBytes(254, 106, 11, 94));");
                }
                try (Using<DoubleCesiumWriter> using$182 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$182.resource;
                    w2.writeNumber(27922.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(date)).toEqual(27922.0);");
                }
                try (Using<NearFarScalarCesiumWriter> using$183 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$183.resource;
                    w2.writeNearFarScalar(new NearFarScalar(20128.0, 16462.0, 49728.0, 18882.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(date)).toEqual(new NearFarScalar(20128, 16462, 49728, 18882));");
                }
                try (Using<NearFarScalarCesiumWriter> using$184 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$184.resource;
                    w2.writeNearFarScalar(new NearFarScalar(52796.0, 43982.0, 61099.0, 50158.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(date)).toEqual(new NearFarScalar(52796, 43982, 61099, 50158));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$185 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$185.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(29646.0, 52915.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(29646, 52915));");
                }
                try (Using<DoubleCesiumWriter> using$186 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$186.resource;
                    w2.writeNumber(9675.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.disableDepthTestDistance.getValue(date)).toEqual(9675.0);");
                }
            }
            try (Using<PolygonCesiumWriter> using$187 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$187.resource;
                try (Using<BooleanCesiumWriter> using$188 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$188.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.show.getValue(date)).toEqual(true);");
                }
                try (Using<PositionListCesiumWriter> using$189 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$189.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(39143.0, 2200.0, 6408.0), new Cartesian(27161.0, 33386.0, 62338.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).positions).toEqual([ new Cartesian3(39143, 2200, 6408), new Cartesian3(27161, 33386, 62338) ]);");
                }
                try (Using<PositionListOfListsCesiumWriter> using$190 = new Using<PositionListOfListsCesiumWriter>(w.openHolesProperty())) {
                    final PositionListOfListsCesiumWriter w2 = using$190.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<List<Cartesian>> createList(
                            createList(new Cartesian(47462.0, 20409.0, 3151.0), new Cartesian(58636.0, 39653.0, 53914.0), new Cartesian(31954.0, 4988.0, 47462.0)),
                            createList(new Cartesian(20409.0, 3151.0, 58636.0), new Cartesian(39653.0, 53914.0, 31954.0), new Cartesian(4988.0, 47462.0, 20409.0),
                                    new Cartesian(3151.0, 58636.0, 39653.0))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).holes).toEqual([ new PolygonHierarchy([ new Cartesian3(47462, 20409, 3151), new Cartesian3(58636, 39653, 53914), new Cartesian3(31954, 4988, 47462) ]), new PolygonHierarchy([ new Cartesian3(20409, 3151, 58636), new Cartesian3(39653, 53914, 31954), new Cartesian3(4988, 47462, 20409), new Cartesian3(3151, 58636, 39653) ]) ]);");
                }
                try (Using<ArcTypeCesiumWriter> using$191 = new Using<ArcTypeCesiumWriter>(w.openArcTypeProperty())) {
                    final ArcTypeCesiumWriter w2 = using$191.resource;
                    w2.writeArcType(CesiumArcType.RHUMB);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.arcType.getValue(date)).toEqual(ArcType.RHUMB);");
                }
                try (Using<DoubleCesiumWriter> using$192 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$192.resource;
                    w2.writeNumber(26391.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(date)).toEqual(26391.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$193 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$193.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<DoubleCesiumWriter> using$194 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$194.resource;
                    w2.writeNumber(15922.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(15922.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$195 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$195.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<DoubleCesiumWriter> using$196 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$196.resource;
                    w2.writeNumber(2555.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(date)).toEqual(2555.0);");
                }
                try (Using<DoubleCesiumWriter> using$197 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$197.resource;
                    w2.writeNumber(17060.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(date)).toEqual(17060.0);");
                }
                try (Using<BooleanCesiumWriter> using$198 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$198.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$199 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$199.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$200 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$200.resource;
                        try (Using<ColorCesiumWriter> using$201 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$201.resource;
                            m2.writeRgba(ColorHelper.fromArgb(253, 216, 139, 124));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(216, 139, 124, 253));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$202 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$202.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$203 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$203.resource;
                    w2.writeRgba(ColorHelper.fromArgb(87, 172, 48, 134));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(date)).toEqual(Color.fromBytes(172, 48, 134, 87));");
                }
                try (Using<DoubleCesiumWriter> using$204 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$204.resource;
                    w2.writeNumber(62220.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(date)).toEqual(62220.0);");
                }
                try (Using<BooleanCesiumWriter> using$205 = new Using<BooleanCesiumWriter>(w.openPerPositionHeightProperty())) {
                    final BooleanCesiumWriter w2 = using$205.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$206 = new Using<BooleanCesiumWriter>(w.openCloseTopProperty())) {
                    final BooleanCesiumWriter w2 = using$206.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeTop.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$207 = new Using<BooleanCesiumWriter>(w.openCloseBottomProperty())) {
                    final BooleanCesiumWriter w2 = using$207.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeBottom.getValue(date)).toEqual(true);");
                }
                try (Using<ShadowModeCesiumWriter> using$208 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$208.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$209 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$209.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(5989.0, 26104.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(5989, 26104));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$210 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$210.resource;
                    w2.writeClassificationType(CesiumClassificationType.TERRAIN);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.classificationType.getValue(date)).toEqual(ClassificationType.TERRAIN);");
                }
                try (Using<IntegerCesiumWriter> using$211 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$211.resource;
                    w2.writeNumber(31269);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.zIndex.getValue(date)).toEqual(31269);");
                }
            }
            try (Using<PolylineCesiumWriter> using$212 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$212.resource;
                try (Using<BooleanCesiumWriter> using$213 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$213.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.show.getValue(date)).toEqual(true);");
                }
                try (Using<PositionListCesiumWriter> using$214 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$214.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(23333.0, 31067.0, 17529.0), new Cartesian(57924.0, 41186.0, 31648.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polyline.positions.getValue(date)).toEqual([ new Cartesian3(23333, 31067, 17529), new Cartesian3(57924, 41186, 31648) ]);");
                }
                try (Using<ArcTypeCesiumWriter> using$215 = new Using<ArcTypeCesiumWriter>(w.openArcTypeProperty())) {
                    final ArcTypeCesiumWriter w2 = using$215.resource;
                    w2.writeArcType(CesiumArcType.RHUMB);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.arcType.getValue(date)).toEqual(ArcType.RHUMB);");
                }
                try (Using<DoubleCesiumWriter> using$216 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$216.resource;
                    w2.writeNumber(14667.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(date)).toEqual(14667.0);");
                }
                try (Using<DoubleCesiumWriter> using$217 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$217.resource;
                    w2.writeNumber(53395.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(date)).toEqual(53395.0);");
                }
                try (Using<PolylineMaterialCesiumWriter> using$218 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$218.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$219 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$219.resource;
                        try (Using<ColorCesiumWriter> using$220 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$220.resource;
                            m2.writeRgba(ColorHelper.fromArgb(230, 88, 0, 232));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(88, 0, 232, 230));");
                        }
                    }
                }
                try (Using<ShadowModeCesiumWriter> using$221 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$221.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<PolylineMaterialCesiumWriter> using$222 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$222.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$223 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$223.resource;
                        try (Using<ColorCesiumWriter> using$224 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$224.resource;
                            m2.writeRgba(ColorHelper.fromArgb(198, 197, 195, 115));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(Color.fromBytes(197, 195, 115, 198));");
                        }
                    }
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$225 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$225.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(5807.0, 30486.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(5807, 30486));");
                }
                try (Using<BooleanCesiumWriter> using$226 = new Using<BooleanCesiumWriter>(w.openClampToGroundProperty())) {
                    final BooleanCesiumWriter w2 = using$226.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.clampToGround.getValue(date)).toEqual(true);");
                }
                try (Using<ClassificationTypeCesiumWriter> using$227 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$227.resource;
                    w2.writeClassificationType(CesiumClassificationType.TERRAIN);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.classificationType.getValue(date)).toEqual(ClassificationType.TERRAIN);");
                }
                try (Using<IntegerCesiumWriter> using$228 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$228.resource;
                    w2.writeNumber(17658);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.zIndex.getValue(date)).toEqual(17658);");
                }
            }
            try (Using<PolylineVolumeCesiumWriter> using$229 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$229.resource;
                try (Using<BooleanCesiumWriter> using$230 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$230.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.show.getValue(date)).toEqual(true);");
                }
                try (Using<PositionListCesiumWriter> using$231 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$231.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(62250.0, 34803.0, 52359.0), new Cartesian(59852.0, 58857.0, 24549.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.positions.getValue(date)).toEqual([ new Cartesian3(62250, 34803, 52359), new Cartesian3(59852, 58857, 24549) ]);");
                }
                try (Using<ShapeCesiumWriter> using$232 = new Using<ShapeCesiumWriter>(w.openShapeProperty())) {
                    final ShapeCesiumWriter w2 = using$232.resource;
                    w2.writeCartesian2(TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(45301.0, 43952.0), new Rectangular(34475.0, 28294.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.shape.getValue(date)).toEqual([ new Cartesian2(45301, 43952), new Cartesian2(34475, 28294) ]);");
                }
                try (Using<CornerTypeCesiumWriter> using$233 = new Using<CornerTypeCesiumWriter>(w.openCornerTypeProperty())) {
                    final CornerTypeCesiumWriter w2 = using$233.resource;
                    w2.writeCornerType(CesiumCornerType.BEVELED);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
                }
                try (Using<DoubleCesiumWriter> using$234 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$234.resource;
                    w2.writeNumber(12007.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.granularity.getValue(date)).toEqual(12007.0);");
                }
                try (Using<BooleanCesiumWriter> using$235 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$235.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$236 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$236.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$237 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$237.resource;
                        try (Using<ColorCesiumWriter> using$238 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$238.resource;
                            m2.writeRgba(ColorHelper.fromArgb(154, 232, 0, 34));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(date)).toEqual(Color.fromBytes(232, 0, 34, 154));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$239 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$239.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$240 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$240.resource;
                    w2.writeRgba(ColorHelper.fromArgb(42, 179, 137, 151));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineColor.getValue(date)).toEqual(Color.fromBytes(179, 137, 151, 42));");
                }
                try (Using<DoubleCesiumWriter> using$241 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$241.resource;
                    w2.writeNumber(23162.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineWidth.getValue(date)).toEqual(23162.0);");
                }
                try (Using<ShadowModeCesiumWriter> using$242 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$242.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$243 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$243.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(49375.0, 57097.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(49375, 57097));");
                }
            }
            try (Using<RectangleCesiumWriter> using$244 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$244.resource;
                try (Using<BooleanCesiumWriter> using$245 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$245.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.show.getValue(date)).toEqual(true);");
                }
                try (Using<RectangleCoordinatesCesiumWriter> using$246 = new Using<RectangleCoordinatesCesiumWriter>(w.openCoordinatesProperty())) {
                    final RectangleCoordinatesCesiumWriter w2 = using$246.resource;
                    w2.writeWsen(new CartographicExtent(1.13325368272577, 0.703573207377445, 0.756676249095309, 0.339217858685931));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.coordinates.getValue(date)).toEqual(new Rectangle(1.13325368272577, 0.703573207377445, 0.756676249095309, 0.339217858685931));");
                }
                try (Using<DoubleCesiumWriter> using$247 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$247.resource;
                    w2.writeNumber(20608.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(date)).toEqual(20608.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$248 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$248.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<DoubleCesiumWriter> using$249 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$249.resource;
                    w2.writeNumber(23002.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(23002.0);");
                }
                try (Using<HeightReferenceCesiumWriter> using$250 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$250.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<DoubleCesiumWriter> using$251 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$251.resource;
                    w2.writeNumber(54979.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(date)).toEqual(54979.0);");
                }
                try (Using<DoubleCesiumWriter> using$252 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$252.resource;
                    w2.writeNumber(8079.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(date)).toEqual(8079.0);");
                }
                try (Using<DoubleCesiumWriter> using$253 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$253.resource;
                    w2.writeNumber(60343.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(date)).toEqual(60343.0);");
                }
                try (Using<BooleanCesiumWriter> using$254 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$254.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$255 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$255.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$256 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$256.resource;
                        try (Using<ColorCesiumWriter> using$257 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$257.resource;
                            m2.writeRgba(ColorHelper.fromArgb(249, 160, 249, 70));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(160, 249, 70, 249));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$258 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$258.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$259 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$259.resource;
                    w2.writeRgba(ColorHelper.fromArgb(36, 196, 59, 142));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(date)).toEqual(Color.fromBytes(196, 59, 142, 36));");
                }
                try (Using<DoubleCesiumWriter> using$260 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$260.resource;
                    w2.writeNumber(59794.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(59794.0);");
                }
                try (Using<ShadowModeCesiumWriter> using$261 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$261.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$262 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$262.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(21388.0, 23379.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(21388, 23379));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$263 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$263.resource;
                    w2.writeClassificationType(CesiumClassificationType.TERRAIN);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.classificationType.getValue(date)).toEqual(ClassificationType.TERRAIN);");
                }
                try (Using<IntegerCesiumWriter> using$264 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$264.resource;
                    w2.writeNumber(445);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.zIndex.getValue(date)).toEqual(445);");
                }
            }
            try (Using<TilesetCesiumWriter> using$265 = new Using<TilesetCesiumWriter>(packet.openTilesetProperty())) {
                final TilesetCesiumWriter w = using$265.resource;
                try (Using<BooleanCesiumWriter> using$266 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$266.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.show.getValue(date)).toEqual(true);");
                }
                try (Using<UriCesiumWriter> using$267 = new Using<UriCesiumWriter>(w.openUriProperty())) {
                    final UriCesiumWriter w2 = using$267.resource;
                    w2.writeUri("http://example.com/6864", CesiumResourceBehavior.LINK_TO);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.uri.getValue(date).url).toEqual('http://example.com/6864');");
                }
                try (Using<DoubleCesiumWriter> using$268 = new Using<DoubleCesiumWriter>(w.openMaximumScreenSpaceErrorProperty())) {
                    final DoubleCesiumWriter w2 = using$268.resource;
                    w2.writeNumber(51767.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.maximumScreenSpaceError.getValue(date)).toEqual(51767.0);");
                }
            }
            try (Using<WallCesiumWriter> using$269 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$269.resource;
                try (Using<BooleanCesiumWriter> using$270 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$270.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.show.getValue(date)).toEqual(true);");
                }
                try (Using<PositionListCesiumWriter> using$271 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$271.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(21681.0, 40276.0, 30621.0), new Cartesian(3959.0, 61967.0, 19442.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.positions.getValue(date)).toEqual([ new Cartesian3(21681, 40276, 30621), new Cartesian3(3959, 61967, 19442) ]);");
                }
                try (Using<DoubleListCesiumWriter> using$272 = new Using<DoubleListCesiumWriter>(w.openMinimumHeightsProperty())) {
                    final DoubleListCesiumWriter w2 = using$272.resource;
                    w2.writeArray(TestGenerateValidationDocument.<Double> createList(49466.0, 44737.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.minimumHeights.getValue(date)).toEqual([ 49466, 44737 ]);");
                }
                try (Using<DoubleListCesiumWriter> using$273 = new Using<DoubleListCesiumWriter>(w.openMaximumHeightsProperty())) {
                    final DoubleListCesiumWriter w2 = using$273.resource;
                    w2.writeArray(TestGenerateValidationDocument.<Double> createList(59672.0, 62697.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.maximumHeights.getValue(date)).toEqual([ 59672, 62697 ]);");
                }
                try (Using<DoubleCesiumWriter> using$274 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$274.resource;
                    w2.writeNumber(47652.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(date)).toEqual(47652.0);");
                }
                try (Using<BooleanCesiumWriter> using$275 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$275.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.fill.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$276 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$276.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$277 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$277.resource;
                        try (Using<ColorCesiumWriter> using$278 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$278.resource;
                            m2.writeRgba(ColorHelper.fromArgb(65, 64, 176, 190));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(64, 176, 190, 65));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$279 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$279.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$280 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$280.resource;
                    w2.writeRgba(ColorHelper.fromArgb(198, 107, 196, 96));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(date)).toEqual(Color.fromBytes(107, 196, 96, 198));");
                }
                try (Using<DoubleCesiumWriter> using$281 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$281.resource;
                    w2.writeNumber(50458.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(date)).toEqual(50458.0);");
                }
                try (Using<ShadowModeCesiumWriter> using$282 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$282.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.shadows.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$283 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$283.resource;
                    w2.writeDistanceDisplayCondition(new Bounds(27810.0, 41691.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.distanceDisplayCondition.getValue(date)).toEqual(new DistanceDisplayCondition(27810, 41691));");
                }
            }
            try (Using<ConicSensorCesiumWriter> using$284 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$284.resource;
                try (Using<BooleanCesiumWriter> using$285 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$285.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.show.getValue(date)).toEqual(true);");
                }
                try (Using<DoubleCesiumWriter> using$286 = new Using<DoubleCesiumWriter>(w.openInnerHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$286.resource;
                    w2.writeNumber(62994.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(62994.0);");
                }
                try (Using<DoubleCesiumWriter> using$287 = new Using<DoubleCesiumWriter>(w.openOuterHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$287.resource;
                    w2.writeNumber(27216.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(27216.0);");
                }
                try (Using<DoubleCesiumWriter> using$288 = new Using<DoubleCesiumWriter>(w.openMinimumClockAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$288.resource;
                    w2.writeNumber(18231.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(18231.0);");
                }
                try (Using<DoubleCesiumWriter> using$289 = new Using<DoubleCesiumWriter>(w.openMaximumClockAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$289.resource;
                    w2.writeNumber(59909.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(59909.0);");
                }
                try (Using<DoubleCesiumWriter> using$290 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$290.resource;
                    w2.writeNumber(29788.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(date)).toEqual(29788.0);");
                }
                try (Using<BooleanCesiumWriter> using$291 = new Using<BooleanCesiumWriter>(w.openShowIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$291.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$292 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$292.resource;
                    w2.writeRgba(ColorHelper.fromArgb(163, 61, 222, 182));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(61, 222, 182, 163));");
                }
                try (Using<DoubleCesiumWriter> using$293 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$293.resource;
                    w2.writeNumber(50429.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(50429.0);");
                }
                try (Using<BooleanCesiumWriter> using$294 = new Using<BooleanCesiumWriter>(w.openShowLateralSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$294.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$295 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$295.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$296 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$296.resource;
                        try (Using<ColorCesiumWriter> using$297 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$297.resource;
                            m2.writeRgba(ColorHelper.fromArgb(249, 130, 80, 209));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(130, 80, 209, 249));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$298 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$298.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$299 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$299.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$300 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$300.resource;
                        try (Using<ColorCesiumWriter> using$301 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$301.resource;
                            m2.writeRgba(ColorHelper.fromArgb(25, 107, 30, 24));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(107, 30, 24, 25));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$302 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidHorizonSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$302.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$303 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$303.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$304 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$304.resource;
                        try (Using<ColorCesiumWriter> using$305 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$305.resource;
                            m2.writeRgba(ColorHelper.fromArgb(42, 149, 40, 134));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(149, 40, 134, 42));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$306 = new Using<BooleanCesiumWriter>(w.openShowDomeSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$306.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$307 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$307.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$308 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$308.resource;
                        try (Using<ColorCesiumWriter> using$309 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$309.resource;
                            m2.writeRgba(ColorHelper.fromArgb(71, 208, 75, 13));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(208, 75, 13, 71));");
                        }
                    }
                }
                try (Using<SensorVolumePortionToDisplayCesiumWriter> using$310 = new Using<SensorVolumePortionToDisplayCesiumWriter>(w.openPortionToDisplayProperty())) {
                    final SensorVolumePortionToDisplayCesiumWriter w2 = using$310.resource;
                    w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                }
                try (Using<BooleanCesiumWriter> using$311 = new Using<BooleanCesiumWriter>(w.openEnvironmentConstraintProperty())) {
                    final BooleanCesiumWriter w2 = using$311.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$312 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentOcclusionProperty())) {
                    final BooleanCesiumWriter w2 = using$312.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$313 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$313.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$314 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$314.resource;
                        try (Using<ColorCesiumWriter> using$315 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$315.resource;
                            m2.writeRgba(ColorHelper.fromArgb(213, 241, 9, 164));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(241, 9, 164, 213));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$316 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$316.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$317 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$317.resource;
                    w2.writeRgba(ColorHelper.fromArgb(147, 83, 22, 249));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(83, 22, 249, 147));");
                }
                try (Using<DoubleCesiumWriter> using$318 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$318.resource;
                    w2.writeNumber(13317.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(13317.0);");
                }
                try (Using<BooleanCesiumWriter> using$319 = new Using<BooleanCesiumWriter>(w.openShowThroughEllipsoidProperty())) {
                    final BooleanCesiumWriter w2 = using$319.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showThroughEllipsoid.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$320 = new Using<BooleanCesiumWriter>(w.openShowViewshedProperty())) {
                    final BooleanCesiumWriter w2 = using$320.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showViewshed.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$321 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$321.resource;
                    w2.writeRgba(ColorHelper.fromArgb(57, 80, 142, 248));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedVisibleColor.getValue(date)).toEqual(Color.fromBytes(80, 142, 248, 57));");
                }
                try (Using<ColorCesiumWriter> using$322 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$322.resource;
                    w2.writeRgba(ColorHelper.fromArgb(110, 166, 20, 225));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedOccludedColor.getValue(date)).toEqual(Color.fromBytes(166, 20, 225, 110));");
                }
                try (Using<IntegerCesiumWriter> using$323 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$323.resource;
                    w2.writeNumber(9164);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedResolution.getValue(date)).toEqual(9164);");
                }
            }
            try (Using<CustomPatternSensorCesiumWriter> using$324 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$324.resource;
                try (Using<BooleanCesiumWriter> using$325 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$325.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.show.getValue(date)).toEqual(true);");
                }
                try (Using<DirectionListCesiumWriter> using$326 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$326.resource;
                    w2.writeSpherical(TestGenerateValidationDocument.<Spherical> createList(new Spherical(49130.0, 29887.0, 4468.0), new Spherical(25873.0, 21605.0, 54100.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(49130, 29887, 4468), new Spherical(25873, 21605, 54100) ]);");
                }
                try (Using<DoubleCesiumWriter> using$327 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$327.resource;
                    w2.writeNumber(26731.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(date)).toEqual(26731.0);");
                }
                try (Using<BooleanCesiumWriter> using$328 = new Using<BooleanCesiumWriter>(w.openShowIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$328.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$329 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$329.resource;
                    w2.writeRgba(ColorHelper.fromArgb(67, 59, 147, 243));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(59, 147, 243, 67));");
                }
                try (Using<DoubleCesiumWriter> using$330 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$330.resource;
                    w2.writeNumber(63237.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(63237.0);");
                }
                try (Using<BooleanCesiumWriter> using$331 = new Using<BooleanCesiumWriter>(w.openShowLateralSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$331.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$332 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$332.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$333 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$333.resource;
                        try (Using<ColorCesiumWriter> using$334 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$334.resource;
                            m2.writeRgba(ColorHelper.fromArgb(191, 35, 33, 155));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(35, 33, 155, 191));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$335 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$335.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$336 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$336.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$337 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$337.resource;
                        try (Using<ColorCesiumWriter> using$338 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$338.resource;
                            m2.writeRgba(ColorHelper.fromArgb(89, 6, 121, 164));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(6, 121, 164, 89));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$339 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidHorizonSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$339.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$340 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$340.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$341 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$341.resource;
                        try (Using<ColorCesiumWriter> using$342 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$342.resource;
                            m2.writeRgba(ColorHelper.fromArgb(167, 185, 102, 188));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(185, 102, 188, 167));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$343 = new Using<BooleanCesiumWriter>(w.openShowDomeSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$343.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$344 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$344.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$345 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$345.resource;
                        try (Using<ColorCesiumWriter> using$346 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$346.resource;
                            m2.writeRgba(ColorHelper.fromArgb(44, 160, 74, 45));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(160, 74, 45, 44));");
                        }
                    }
                }
                try (Using<SensorVolumePortionToDisplayCesiumWriter> using$347 = new Using<SensorVolumePortionToDisplayCesiumWriter>(w.openPortionToDisplayProperty())) {
                    final SensorVolumePortionToDisplayCesiumWriter w2 = using$347.resource;
                    w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                }
                try (Using<BooleanCesiumWriter> using$348 = new Using<BooleanCesiumWriter>(w.openEnvironmentConstraintProperty())) {
                    final BooleanCesiumWriter w2 = using$348.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$349 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentOcclusionProperty())) {
                    final BooleanCesiumWriter w2 = using$349.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$350 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$350.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$351 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$351.resource;
                        try (Using<ColorCesiumWriter> using$352 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$352.resource;
                            m2.writeRgba(ColorHelper.fromArgb(137, 238, 207, 29));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(238, 207, 29, 137));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$353 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$353.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$354 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$354.resource;
                    w2.writeRgba(ColorHelper.fromArgb(55, 134, 29, 12));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(134, 29, 12, 55));");
                }
                try (Using<DoubleCesiumWriter> using$355 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$355.resource;
                    w2.writeNumber(53576.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(53576.0);");
                }
                try (Using<BooleanCesiumWriter> using$356 = new Using<BooleanCesiumWriter>(w.openShowThroughEllipsoidProperty())) {
                    final BooleanCesiumWriter w2 = using$356.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showThroughEllipsoid.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$357 = new Using<BooleanCesiumWriter>(w.openShowViewshedProperty())) {
                    final BooleanCesiumWriter w2 = using$357.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.showViewshed.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$358 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$358.resource;
                    w2.writeRgba(ColorHelper.fromArgb(91, 38, 54, 223));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.viewshedVisibleColor.getValue(date)).toEqual(Color.fromBytes(38, 54, 223, 91));");
                }
                try (Using<ColorCesiumWriter> using$359 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$359.resource;
                    w2.writeRgba(ColorHelper.fromArgb(99, 229, 38, 249));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.viewshedOccludedColor.getValue(date)).toEqual(Color.fromBytes(229, 38, 249, 99));");
                }
                try (Using<IntegerCesiumWriter> using$360 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$360.resource;
                    w2.writeNumber(25862);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.viewshedResolution.getValue(date)).toEqual(25862);");
                }
            }
            try (Using<RectangularSensorCesiumWriter> using$361 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$361.resource;
                try (Using<BooleanCesiumWriter> using$362 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$362.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.show.getValue(date)).toEqual(true);");
                }
                try (Using<DoubleCesiumWriter> using$363 = new Using<DoubleCesiumWriter>(w.openXHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$363.resource;
                    w2.writeNumber(4927.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(4927.0);");
                }
                try (Using<DoubleCesiumWriter> using$364 = new Using<DoubleCesiumWriter>(w.openYHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$364.resource;
                    w2.writeNumber(37224.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(37224.0);");
                }
                try (Using<DoubleCesiumWriter> using$365 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$365.resource;
                    w2.writeNumber(35686.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(date)).toEqual(35686.0);");
                }
                try (Using<BooleanCesiumWriter> using$366 = new Using<BooleanCesiumWriter>(w.openShowIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$366.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$367 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$367.resource;
                    w2.writeRgba(ColorHelper.fromArgb(246, 211, 199, 212));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(Color.fromBytes(211, 199, 212, 246));");
                }
                try (Using<DoubleCesiumWriter> using$368 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$368.resource;
                    w2.writeNumber(41682.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(41682.0);");
                }
                try (Using<BooleanCesiumWriter> using$369 = new Using<BooleanCesiumWriter>(w.openShowLateralSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$369.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$370 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$370.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$371 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$371.resource;
                        try (Using<ColorCesiumWriter> using$372 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$372.resource;
                            m2.writeRgba(ColorHelper.fromArgb(98, 34, 130, 31));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(34, 130, 31, 98));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$373 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$373.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$374 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$374.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$375 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$375.resource;
                        try (Using<ColorCesiumWriter> using$376 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$376.resource;
                            m2.writeRgba(ColorHelper.fromArgb(146, 134, 158, 149));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(134, 158, 149, 146));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$377 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidHorizonSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$377.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$378 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$378.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$379 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$379.resource;
                        try (Using<ColorCesiumWriter> using$380 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$380.resource;
                            m2.writeRgba(ColorHelper.fromArgb(197, 52, 43, 245));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(52, 43, 245, 197));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$381 = new Using<BooleanCesiumWriter>(w.openShowDomeSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$381.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$382 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$382.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$383 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$383.resource;
                        try (Using<ColorCesiumWriter> using$384 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$384.resource;
                            m2.writeRgba(ColorHelper.fromArgb(181, 32, 23, 251));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(32, 23, 251, 181));");
                        }
                    }
                }
                try (Using<SensorVolumePortionToDisplayCesiumWriter> using$385 = new Using<SensorVolumePortionToDisplayCesiumWriter>(w.openPortionToDisplayProperty())) {
                    final SensorVolumePortionToDisplayCesiumWriter w2 = using$385.resource;
                    w2.writePortionToDisplay(CesiumSensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(SensorVolumePortionToDisplay.BELOW_ELLIPSOID_HORIZON);");
                }
                try (Using<BooleanCesiumWriter> using$386 = new Using<BooleanCesiumWriter>(w.openEnvironmentConstraintProperty())) {
                    final BooleanCesiumWriter w2 = using$386.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$387 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentOcclusionProperty())) {
                    final BooleanCesiumWriter w2 = using$387.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$388 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$388.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$389 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$389.resource;
                        try (Using<ColorCesiumWriter> using$390 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$390.resource;
                            m2.writeRgba(ColorHelper.fromArgb(80, 175, 187, 53));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(175, 187, 53, 80));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$391 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$391.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$392 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$392.resource;
                    w2.writeRgba(ColorHelper.fromArgb(144, 84, 60, 81));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(Color.fromBytes(84, 60, 81, 144));");
                }
                try (Using<DoubleCesiumWriter> using$393 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$393.resource;
                    w2.writeNumber(64839.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(64839.0);");
                }
                try (Using<BooleanCesiumWriter> using$394 = new Using<BooleanCesiumWriter>(w.openShowThroughEllipsoidProperty())) {
                    final BooleanCesiumWriter w2 = using$394.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showThroughEllipsoid.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$395 = new Using<BooleanCesiumWriter>(w.openShowViewshedProperty())) {
                    final BooleanCesiumWriter w2 = using$395.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.showViewshed.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$396 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$396.resource;
                    w2.writeRgba(ColorHelper.fromArgb(93, 239, 86, 8));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.viewshedVisibleColor.getValue(date)).toEqual(Color.fromBytes(239, 86, 8, 93));");
                }
                try (Using<ColorCesiumWriter> using$397 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$397.resource;
                    w2.writeRgba(ColorHelper.fromArgb(26, 20, 22, 45));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.viewshedOccludedColor.getValue(date)).toEqual(Color.fromBytes(20, 22, 45, 26));");
                }
                try (Using<IntegerCesiumWriter> using$398 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$398.resource;
                    w2.writeNumber(33690);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.viewshedResolution.getValue(date)).toEqual(33690);");
                }
            }
            try (Using<FanCesiumWriter> using$399 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$399.resource;
                try (Using<BooleanCesiumWriter> using$400 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$400.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.show.getValue(date)).toEqual(true);");
                }
                try (Using<DirectionListCesiumWriter> using$401 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$401.resource;
                    w2.writeSpherical(TestGenerateValidationDocument.<Spherical> createList(new Spherical(19722.0, 1613.0, 23046.0), new Spherical(14938.0, 16954.0, 50242.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(19722, 1613, 23046), new Spherical(14938, 16954, 50242) ]);");
                }
                try (Using<DoubleCesiumWriter> using$402 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$402.resource;
                    w2.writeNumber(54355.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(date)).toEqual(54355.0);");
                }
                try (Using<BooleanCesiumWriter> using$403 = new Using<BooleanCesiumWriter>(w.openPerDirectionRadiusProperty())) {
                    final BooleanCesiumWriter w2 = using$403.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(true);");
                }
                try (Using<MaterialCesiumWriter> using$404 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$404.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$405 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$405.resource;
                        try (Using<ColorCesiumWriter> using$406 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$406.resource;
                            m2.writeRgba(ColorHelper.fromArgb(145, 172, 23, 214));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(172, 23, 214, 145));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$407 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$407.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.fill.getValue(date)).toEqual(true);");
                }
                try (Using<BooleanCesiumWriter> using$408 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$408.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outline.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$409 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$409.resource;
                    w2.writeRgba(ColorHelper.fromArgb(214, 107, 168, 140));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(date)).toEqual(Color.fromBytes(107, 168, 140, 214));");
                }
                try (Using<DoubleCesiumWriter> using$410 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$410.resource;
                    w2.writeNumber(18367.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(date)).toEqual(18367.0);");
                }
                try (Using<IntegerCesiumWriter> using$411 = new Using<IntegerCesiumWriter>(w.openNumberOfRingsProperty())) {
                    final IntegerCesiumWriter w2 = using$411.resource;
                    w2.writeNumber(33012);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(date)).toEqual(33012);");
                }
            }
            try (Using<VectorCesiumWriter> using$412 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$412.resource;
                try (Using<BooleanCesiumWriter> using$413 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$413.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.show.getValue(date)).toEqual(true);");
                }
                try (Using<ColorCesiumWriter> using$414 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$414.resource;
                    w2.writeRgba(ColorHelper.fromArgb(189, 92, 133, 96));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(date)).toEqual(Color.fromBytes(92, 133, 96, 189));");
                }
                try (Using<DirectionCesiumWriter> using$415 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$415.resource;
                    w2.writeSpherical(new Spherical(44405.0, 20909.0, 43089.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(44405, 20909, 43089)));");
                }
                try (Using<DoubleCesiumWriter> using$416 = new Using<DoubleCesiumWriter>(w.openLengthProperty())) {
                    final DoubleCesiumWriter w2 = using$416.resource;
                    w2.writeNumber(5478.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(date)).toEqual(5478.0);");
                }
                try (Using<DoubleCesiumWriter> using$417 = new Using<DoubleCesiumWriter>(w.openMinimumLengthInPixelsProperty())) {
                    final DoubleCesiumWriter w2 = using$417.resource;
                    w2.writeNumber(58959.0);
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(58959.0);");
                }
            }
        }
        writeConstantValuesIndividual();
        writeConstantValuesCustomProperties();
    }

    private final void writeConstantValuesIndividual() {
        writeConstantValuesIndividualDescription();
        writeConstantValuesIndividualPosition();
        writeConstantValuesIndividualOrientation();
        writeConstantValuesIndividualViewFrom();
        writeConstantValuesIndividualBillboard();
        writeConstantValuesIndividualBox();
        writeConstantValuesIndividualCorridor();
        writeConstantValuesIndividualCylinder();
        writeConstantValuesIndividualEllipse();
        writeConstantValuesIndividualEllipsoid();
        writeConstantValuesIndividualLabel();
        writeConstantValuesIndividualModel();
        writeConstantValuesIndividualPath();
        writeConstantValuesIndividualPoint();
        writeConstantValuesIndividualPolygon();
        writeConstantValuesIndividualPolyline();
        writeConstantValuesIndividualPolylineVolume();
        writeConstantValuesIndividualRectangle();
        writeConstantValuesIndividualTileset();
        writeConstantValuesIndividualWall();
        writeConstantValuesIndividualConicSensor();
        writeConstantValuesIndividualCustomPatternSensor();
        writeConstantValuesIndividualRectangularSensor();
        writeConstantValuesIndividualFan();
        writeConstantValuesIndividualVector();
    }

    private final void writeConstantValuesIndividualDescription() {}

    private final void writeConstantValuesIndividualPosition() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_position_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_position_cartographicRadians')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$1 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$1.resource;
                w.writeCartographicRadians(new Cartographic(0.368123392863751, 0.678098621973879, 32050.0));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(Cartesian3.fromRadians(0.368123392863751, 0.678098621973879, 32050));");
            }
        }
        try (Using<PacketCesiumWriter> using$2 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$2.resource;
            packet.writeId("constant_position_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_position_cartographicDegrees')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$3 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$3.resource;
                w.writeCartographicDegrees(new Cartographic(14.0, 14.0, 24697.0));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(Cartesian3.fromDegrees(14, 14, 24697));");
            }
        }
        try (Using<PacketCesiumWriter> using$4 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$4.resource;
            packet.writeId("constant_position_cartesianVelocity");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_position_cartesianVelocity')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$5 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$5.resource;
                w.writeCartesianVelocity(new Motion1<Cartesian>(new Cartesian(15776.0, 23613.0, 14940.0), new Cartesian(35130.0, 14217.0, 19511.0)));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(15776, 23613, 14940));");
            }
        }
    }

    private final void writeConstantValuesIndividualOrientation() {}

    private final void writeConstantValuesIndividualViewFrom() {}

    private final void writeConstantValuesIndividualBillboard() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_billboard_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_billboard_color_rgbaf')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$1 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(166, 172, 221, 153));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.color.getValue(date)).toEqualEpsilon(new Color(0.674509803921569, 0.866666666666667, 0.6, 0.650980392156863), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_billboard_alignedAxis_unitSpherical");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_billboard_alignedAxis_unitSpherical')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$4 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$4.resource;
                try (Using<AlignedAxisCesiumWriter> using$5 = new Using<AlignedAxisCesiumWriter>(w.openAlignedAxisProperty())) {
                    final AlignedAxisCesiumWriter w2 = using$5.resource;
                    w2.writeUnitSpherical(new UnitSpherical(20514.0, 39760.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(date)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(20514, 39760)), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualBox() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_box_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_material_solidColor_color')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$1 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(26, 254, 21, 126));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.996078431372549, 0.0823529411764706, 0.494117647058824, 0.101960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("material_box_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_image')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$6 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<UriCesiumWriter> using$9 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$9.resource;
                            m2.writeUri("http://example.com/50881", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.image.getValue(date).url).toEqual('http://example.com/50881');");
                        }
                        try (Using<RepeatCesiumWriter> using$10 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$10.resource;
                            m2.writeCartesian2(new Rectangular(58955.0, 45286.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(date)).toEqual(new Cartesian2(58955, 45286));");
                        }
                        try (Using<ColorCesiumWriter> using$11 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$11.resource;
                            m2.writeRgba(ColorHelper.fromArgb(129, 98, 97, 133));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(98, 97, 133, 129));");
                        }
                        try (Using<BooleanCesiumWriter> using$12 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$12.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$13 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$13.resource;
            packet.writeId("material_box_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_grid')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$14 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$14.resource;
                try (Using<MaterialCesiumWriter> using$15 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$15.resource;
                    try (Using<GridMaterialCesiumWriter> using$16 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$16.resource;
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeRgba(ColorHelper.fromArgb(226, 178, 10, 106));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(Color.fromBytes(178, 10, 106, 226));");
                        }
                        try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$18.resource;
                            m2.writeNumber(47180.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(date)).toEqual(47180.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$19 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(new Rectangular(24659.0, 13408.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(date)).toEqual(new Cartesian2(24659, 13408));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$20 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(new Rectangular(13897.0, 25654.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineThickness.getValue(date)).toEqual(new Cartesian2(13897, 25654));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$21 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(new Rectangular(14153.0, 49207.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(date)).toEqual(new Cartesian2(14153, 49207));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$22 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$22.resource;
            packet.writeId("material_box_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_stripe')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$23 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$23.resource;
                try (Using<MaterialCesiumWriter> using$24 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$24.resource;
                    try (Using<StripeMaterialCesiumWriter> using$25 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$25.resource;
                        try (Using<StripeOrientationCesiumWriter> using$26 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$26.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(ColorHelper.fromArgb(80, 18, 147, 177));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(18, 147, 177, 80));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(ColorHelper.fromArgb(107, 189, 226, 187));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(189, 226, 187, 107));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(43563.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(date)).toEqual(43563.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(24480.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(date)).toEqual(24480.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("material_box_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_box_material_checkerboard')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$32 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(ColorHelper.fromArgb(166, 188, 19, 247));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(date)).toEqual(Color.fromBytes(188, 19, 247, 166));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(ColorHelper.fromArgb(45, 70, 241, 211));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(date)).toEqual(Color.fromBytes(70, 241, 211, 45));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(new Rectangular(31491.0, 2427.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(date)).toEqual(new Cartesian2(31491, 2427));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("constant_box_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_material_image_color')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$39 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(89, 187, 121, 143));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.733333333333333, 0.474509803921569, 0.56078431372549, 0.349019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("constant_box_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_material_grid_color')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$44 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(229, 216, 100, 90));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(date)).toEqualEpsilon(new Color(0.847058823529412, 0.392156862745098, 0.352941176470588, 0.898039215686275), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("constant_box_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_material_stripe_evenColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$49 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(164, 170, 249, 214));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.666666666666667, 0.976470588235294, 0.83921568627451, 0.643137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("constant_box_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_material_stripe_oddColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$54 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(191, 66, 203, 183));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.258823529411765, 0.796078431372549, 0.717647058823529, 0.749019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("constant_box_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$59 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(130, 189, 24, 26));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.741176470588235, 0.0941176470588235, 0.101960784313725, 0.509803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("constant_box_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$64 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(10, 103, 196, 183));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.403921568627451, 0.768627450980392, 0.717647058823529, 0.0392156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("constant_box_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_box_outlineColor_rgbaf')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$69 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$69.resource;
                try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$70.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(86, 213, 8, 72));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.box.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.835294117647059, 0.0313725490196078, 0.282352941176471, 0.337254901960784), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualCorridor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_corridor_positions_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_positions_cartographicRadians')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$1 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$1.resource;
                try (Using<PositionListCesiumWriter> using$2 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$2.resource;
                    w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.220356654342316, 0.879184920197648, 64909.0),
                            new Cartographic(0.175978952571564, 1.00316515710468, 913.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.220356654342316, 0.879184920197648, 64909), Cartesian3.fromRadians(0.175978952571564, 1.00316515710468, 913) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_corridor_positions_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_positions_cartographicDegrees')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$4 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$4.resource;
                try (Using<PositionListCesiumWriter> using$5 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$5.resource;
                    w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(28.0, 14.0, 63058.0), new Cartographic(15.0, 37.0, 26381.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(28, 14, 63058), Cartesian3.fromDegrees(15, 37, 26381) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_corridor_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_material_solidColor_color')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$7 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$7.resource;
                try (Using<MaterialCesiumWriter> using$8 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$8.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$9 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$9.resource;
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(111, 85, 224, 91));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.333333333333333, 0.87843137254902, 0.356862745098039, 0.435294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("material_corridor_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_image')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$12 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<ImageMaterialCesiumWriter> using$14 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$14.resource;
                        try (Using<UriCesiumWriter> using$15 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$15.resource;
                            m2.writeUri("http://example.com/8903", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.image.getValue(date).url).toEqual('http://example.com/8903');");
                        }
                        try (Using<RepeatCesiumWriter> using$16 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$16.resource;
                            m2.writeCartesian2(new Rectangular(41660.0, 35234.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(41660, 35234));");
                        }
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeRgba(ColorHelper.fromArgb(247, 213, 25, 147));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(213, 25, 147, 247));");
                        }
                        try (Using<BooleanCesiumWriter> using$18 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$18.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$19 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$19.resource;
            packet.writeId("material_corridor_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_grid')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$20 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$20.resource;
                try (Using<MaterialCesiumWriter> using$21 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$21.resource;
                    try (Using<GridMaterialCesiumWriter> using$22 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$22.resource;
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeRgba(ColorHelper.fromArgb(235, 236, 51, 112));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(Color.fromBytes(236, 51, 112, 235));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeNumber(11472.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(11472.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$25 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$25.resource;
                            m2.writeCartesian2(new Rectangular(1254.0, 38404.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineCount.getValue(date)).toEqual(new Cartesian2(1254, 38404));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$26 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$26.resource;
                            m2.writeCartesian2(new Rectangular(48962.0, 63679.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(new Cartesian2(48962, 63679));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$27 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$27.resource;
                            m2.writeCartesian2(new Rectangular(39061.0, 47000.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(new Cartesian2(39061, 47000));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("material_corridor_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_stripe')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$29 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<StripeMaterialCesiumWriter> using$31 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$31.resource;
                        try (Using<StripeOrientationCesiumWriter> using$32 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$32.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(ColorHelper.fromArgb(138, 245, 61, 208));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(date)).toEqual(Color.fromBytes(245, 61, 208, 138));");
                        }
                        try (Using<ColorCesiumWriter> using$34 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$34.resource;
                            m2.writeRgba(ColorHelper.fromArgb(165, 114, 73, 91));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(date)).toEqual(Color.fromBytes(114, 73, 91, 165));");
                        }
                        try (Using<DoubleCesiumWriter> using$35 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$35.resource;
                            m2.writeNumber(12788.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(date)).toEqual(12788.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$36 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$36.resource;
                            m2.writeNumber(33136.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(date)).toEqual(33136.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$37 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$37.resource;
            packet.writeId("material_corridor_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_corridor_material_checkerboard')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$38 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$38.resource;
                try (Using<MaterialCesiumWriter> using$39 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$39.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$40 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$40.resource;
                        try (Using<ColorCesiumWriter> using$41 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$41.resource;
                            m2.writeRgba(ColorHelper.fromArgb(165, 24, 195, 5));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(date)).toEqual(Color.fromBytes(24, 195, 5, 165));");
                        }
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgba(ColorHelper.fromArgb(249, 15, 107, 210));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(date)).toEqual(Color.fromBytes(15, 107, 210, 249));");
                        }
                        try (Using<RepeatCesiumWriter> using$43 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$43.resource;
                            m2.writeCartesian2(new Rectangular(19640.0, 18252.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(date)).toEqual(new Cartesian2(19640, 18252));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$44 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$44.resource;
            packet.writeId("constant_corridor_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_material_image_color')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$45 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$45.resource;
                try (Using<MaterialCesiumWriter> using$46 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$46.resource;
                    try (Using<ImageMaterialCesiumWriter> using$47 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$47.resource;
                        try (Using<ColorCesiumWriter> using$48 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$48.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(135, 4, 24, 102));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.0156862745098039, 0.0941176470588235, 0.4, 0.529411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$49 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$49.resource;
            packet.writeId("constant_corridor_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_material_grid_color')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$50 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$50.resource;
                try (Using<MaterialCesiumWriter> using$51 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$51.resource;
                    try (Using<GridMaterialCesiumWriter> using$52 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$52.resource;
                        try (Using<ColorCesiumWriter> using$53 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$53.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(1, 147, 194, 39));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(date)).toEqualEpsilon(new Color(0.576470588235294, 0.76078431372549, 0.152941176470588, 0.00392156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$54 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$54.resource;
            packet.writeId("constant_corridor_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_material_stripe_evenColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$55 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$55.resource;
                try (Using<MaterialCesiumWriter> using$56 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$56.resource;
                    try (Using<StripeMaterialCesiumWriter> using$57 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$57.resource;
                        try (Using<ColorCesiumWriter> using$58 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$58.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(227, 233, 163, 161));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.913725490196078, 0.63921568627451, 0.631372549019608, 0.890196078431372), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$59 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$59.resource;
            packet.writeId("constant_corridor_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_material_stripe_oddColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$60 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$60.resource;
                try (Using<MaterialCesiumWriter> using$61 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$61.resource;
                    try (Using<StripeMaterialCesiumWriter> using$62 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$62.resource;
                        try (Using<ColorCesiumWriter> using$63 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$63.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(77, 51, 35, 202));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.2, 0.137254901960784, 0.792156862745098, 0.301960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$64 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$64.resource;
            packet.writeId("constant_corridor_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$65 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$65.resource;
                try (Using<MaterialCesiumWriter> using$66 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$66.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$67 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$67.resource;
                        try (Using<ColorCesiumWriter> using$68 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$68.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(59, 73, 158, 157));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.286274509803922, 0.619607843137255, 0.615686274509804, 0.231372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$69 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$69.resource;
            packet.writeId("constant_corridor_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$70 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$70.resource;
                try (Using<MaterialCesiumWriter> using$71 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$71.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$72 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$72.resource;
                        try (Using<ColorCesiumWriter> using$73 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$73.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(112, 176, 44, 251));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.690196078431373, 0.172549019607843, 0.984313725490196, 0.43921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$74 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$74.resource;
            packet.writeId("constant_corridor_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_corridor_outlineColor_rgbaf')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$75 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$75.resource;
                try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$76.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(76, 176, 14, 63));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.690196078431373, 0.0549019607843137, 0.247058823529412, 0.298039215686275), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualCylinder() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_cylinder_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_material_solidColor_color')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$1 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(224, 122, 13, 115));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.47843137254902, 0.0509803921568627, 0.450980392156863, 0.87843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("material_cylinder_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_image')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$6 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<UriCesiumWriter> using$9 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$9.resource;
                            m2.writeUri("http://example.com/27447", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.image.getValue(date).url).toEqual('http://example.com/27447');");
                        }
                        try (Using<RepeatCesiumWriter> using$10 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$10.resource;
                            m2.writeCartesian2(new Rectangular(65243.0, 41470.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(65243, 41470));");
                        }
                        try (Using<ColorCesiumWriter> using$11 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$11.resource;
                            m2.writeRgba(ColorHelper.fromArgb(217, 200, 175, 107));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(200, 175, 107, 217));");
                        }
                        try (Using<BooleanCesiumWriter> using$12 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$12.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$13 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$13.resource;
            packet.writeId("material_cylinder_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_grid')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$14 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$14.resource;
                try (Using<MaterialCesiumWriter> using$15 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$15.resource;
                    try (Using<GridMaterialCesiumWriter> using$16 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$16.resource;
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeRgba(ColorHelper.fromArgb(62, 173, 210, 231));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(Color.fromBytes(173, 210, 231, 62));");
                        }
                        try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$18.resource;
                            m2.writeNumber(9555.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(9555.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$19 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(new Rectangular(58545.0, 26852.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(new Cartesian2(58545, 26852));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$20 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(new Rectangular(58520.0, 44260.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(new Cartesian2(58520, 44260));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$21 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(new Rectangular(61513.0, 28656.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(new Cartesian2(61513, 28656));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$22 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$22.resource;
            packet.writeId("material_cylinder_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_stripe')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$23 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$23.resource;
                try (Using<MaterialCesiumWriter> using$24 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$24.resource;
                    try (Using<StripeMaterialCesiumWriter> using$25 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$25.resource;
                        try (Using<StripeOrientationCesiumWriter> using$26 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$26.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(ColorHelper.fromArgb(86, 158, 155, 154));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(Color.fromBytes(158, 155, 154, 86));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(ColorHelper.fromArgb(74, 191, 226, 188));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(Color.fromBytes(191, 226, 188, 74));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(55018.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(date)).toEqual(55018.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(33073.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(33073.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("material_cylinder_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_cylinder_material_checkerboard')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$32 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(ColorHelper.fromArgb(93, 90, 151, 142));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(Color.fromBytes(90, 151, 142, 93));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(ColorHelper.fromArgb(118, 29, 42, 163));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(Color.fromBytes(29, 42, 163, 118));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(new Rectangular(62750.0, 3317.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(new Cartesian2(62750, 3317));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("constant_cylinder_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_material_image_color')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$39 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(137, 167, 16, 132));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.654901960784314, 0.0627450980392157, 0.517647058823529, 0.537254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("constant_cylinder_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_material_grid_color')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$44 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(241, 230, 93, 78));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(date)).toEqualEpsilon(new Color(0.901960784313726, 0.364705882352941, 0.305882352941176, 0.945098039215686), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("constant_cylinder_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_material_stripe_evenColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$49 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(127, 23, 34, 95));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.133333333333333, 0.372549019607843, 0.498039215686275), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("constant_cylinder_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_material_stripe_oddColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$54 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(173, 231, 144, 124));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.905882352941176, 0.564705882352941, 0.486274509803922, 0.67843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("constant_cylinder_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$59 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(225, 131, 193, 195));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.513725490196078, 0.756862745098039, 0.764705882352941, 0.882352941176471), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("constant_cylinder_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$64 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(137, 115, 100, 85));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.392156862745098, 0.333333333333333, 0.537254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("constant_cylinder_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_cylinder_outlineColor_rgbaf')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$69 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$69.resource;
                try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$70.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(22, 165, 144, 102));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.cylinder.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.647058823529412, 0.564705882352941, 0.4, 0.0862745098039216), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualEllipse() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_ellipse_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_material_solidColor_color')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$1 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(51, 25, 233, 207));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.0980392156862745, 0.913725490196078, 0.811764705882353, 0.2), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("material_ellipse_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_image')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$6 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<UriCesiumWriter> using$9 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$9.resource;
                            m2.writeUri("http://example.com/2481", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.image.getValue(date).url).toEqual('http://example.com/2481');");
                        }
                        try (Using<RepeatCesiumWriter> using$10 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$10.resource;
                            m2.writeCartesian2(new Rectangular(45447.0, 53937.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(new Cartesian2(45447, 53937));");
                        }
                        try (Using<ColorCesiumWriter> using$11 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$11.resource;
                            m2.writeRgba(ColorHelper.fromArgb(120, 45, 86, 136));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(45, 86, 136, 120));");
                        }
                        try (Using<BooleanCesiumWriter> using$12 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$12.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$13 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$13.resource;
            packet.writeId("material_ellipse_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_grid')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$14 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$14.resource;
                try (Using<MaterialCesiumWriter> using$15 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$15.resource;
                    try (Using<GridMaterialCesiumWriter> using$16 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$16.resource;
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeRgba(ColorHelper.fromArgb(60, 217, 159, 32));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(Color.fromBytes(217, 159, 32, 60));");
                        }
                        try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$18.resource;
                            m2.writeNumber(24764.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(24764.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$19 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(new Rectangular(25721.0, 6500.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(new Cartesian2(25721, 6500));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$20 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(new Rectangular(57205.0, 63455.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(new Cartesian2(57205, 63455));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$21 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(new Rectangular(49829.0, 3778.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(new Cartesian2(49829, 3778));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$22 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$22.resource;
            packet.writeId("material_ellipse_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_stripe')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$23 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$23.resource;
                try (Using<MaterialCesiumWriter> using$24 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$24.resource;
                    try (Using<StripeMaterialCesiumWriter> using$25 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$25.resource;
                        try (Using<StripeOrientationCesiumWriter> using$26 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$26.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(ColorHelper.fromArgb(224, 7, 152, 58));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(7, 152, 58, 224));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(ColorHelper.fromArgb(57, 4, 228, 224));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(4, 228, 224, 57));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(26719.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(date)).toEqual(26719.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(15097.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(15097.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("material_ellipse_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipse_material_checkerboard')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$32 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(ColorHelper.fromArgb(118, 62, 67, 234));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(Color.fromBytes(62, 67, 234, 118));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(ColorHelper.fromArgb(32, 116, 61, 76));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(Color.fromBytes(116, 61, 76, 32));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(new Rectangular(62262.0, 11507.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(new Cartesian2(62262, 11507));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("constant_ellipse_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_material_image_color')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$39 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(215, 93, 178, 205));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.364705882352941, 0.698039215686274, 0.803921568627451, 0.843137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("constant_ellipse_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_material_grid_color')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$44 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(160, 173, 148, 210));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(date)).toEqualEpsilon(new Color(0.67843137254902, 0.580392156862745, 0.823529411764706, 0.627450980392157), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("constant_ellipse_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_material_stripe_evenColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$49 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(180, 80, 196, 172));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.313725490196078, 0.768627450980392, 0.674509803921569, 0.705882352941177), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("constant_ellipse_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_material_stripe_oddColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$54 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(21, 174, 168, 243));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.658823529411765, 0.952941176470588, 0.0823529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("constant_ellipse_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$59 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(103, 5, 137, 74));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0196078431372549, 0.537254901960784, 0.290196078431373, 0.403921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("constant_ellipse_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$64 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(226, 81, 176, 57));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.317647058823529, 0.690196078431373, 0.223529411764706, 0.886274509803922), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("constant_ellipse_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipse_outlineColor_rgbaf')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$69 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$69.resource;
                try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$70.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(172, 146, 244, 247));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.ellipse.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.572549019607843, 0.956862745098039, 0.968627450980392, 0.674509803921569), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualEllipsoid() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_ellipsoid_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_material_solidColor_color')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$1 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(51, 146, 136, 98));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.572549019607843, 0.533333333333333, 0.384313725490196, 0.2), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("material_ellipsoid_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_image')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$6 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<UriCesiumWriter> using$9 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$9.resource;
                            m2.writeUri("http://example.com/47428", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.image.getValue(date).url).toEqual('http://example.com/47428');");
                        }
                        try (Using<RepeatCesiumWriter> using$10 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$10.resource;
                            m2.writeCartesian2(new Rectangular(53733.0, 35793.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(new Cartesian2(53733, 35793));");
                        }
                        try (Using<ColorCesiumWriter> using$11 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$11.resource;
                            m2.writeRgba(ColorHelper.fromArgb(165, 125, 49, 160));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(125, 49, 160, 165));");
                        }
                        try (Using<BooleanCesiumWriter> using$12 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$12.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$13 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$13.resource;
            packet.writeId("material_ellipsoid_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_grid')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$14 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$14.resource;
                try (Using<MaterialCesiumWriter> using$15 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$15.resource;
                    try (Using<GridMaterialCesiumWriter> using$16 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$16.resource;
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeRgba(ColorHelper.fromArgb(57, 95, 212, 218));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(Color.fromBytes(95, 212, 218, 57));");
                        }
                        try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$18.resource;
                            m2.writeNumber(53044.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(53044.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$19 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(new Rectangular(7763.0, 58654.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(new Cartesian2(7763, 58654));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$20 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(new Rectangular(25480.0, 4707.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(new Cartesian2(25480, 4707));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$21 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(new Rectangular(38422.0, 44182.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(new Cartesian2(38422, 44182));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$22 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$22.resource;
            packet.writeId("material_ellipsoid_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_stripe')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$23 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$23.resource;
                try (Using<MaterialCesiumWriter> using$24 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$24.resource;
                    try (Using<StripeMaterialCesiumWriter> using$25 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$25.resource;
                        try (Using<StripeOrientationCesiumWriter> using$26 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$26.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(ColorHelper.fromArgb(24, 174, 241, 84));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(174, 241, 84, 24));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(ColorHelper.fromArgb(154, 134, 51, 175));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(134, 51, 175, 154));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(24796.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(24796.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(2913.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(2913.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("material_ellipsoid_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_ellipsoid_material_checkerboard')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$32 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(ColorHelper.fromArgb(252, 65, 215, 40));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(Color.fromBytes(65, 215, 40, 252));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(ColorHelper.fromArgb(195, 63, 63, 46));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(Color.fromBytes(63, 63, 46, 195));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(new Rectangular(40702.0, 13470.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(new Cartesian2(40702, 13470));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("constant_ellipsoid_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_material_image_color')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$39 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(122, 63, 103, 37));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.403921568627451, 0.145098039215686, 0.47843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("constant_ellipsoid_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_material_grid_color')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$44 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(213, 69, 200, 44));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(date)).toEqualEpsilon(new Color(0.270588235294118, 0.784313725490196, 0.172549019607843, 0.835294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("constant_ellipsoid_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_material_stripe_evenColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$49 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(33, 106, 49, 94));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.415686274509804, 0.192156862745098, 0.368627450980392, 0.129411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("constant_ellipsoid_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_material_stripe_oddColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$54 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(24, 148, 42, 189));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.580392156862745, 0.164705882352941, 0.741176470588235, 0.0941176470588235), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("constant_ellipsoid_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$59 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(246, 35, 200, 75));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.137254901960784, 0.784313725490196, 0.294117647058824, 0.964705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("constant_ellipsoid_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$64 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(29, 231, 237, 109));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.905882352941176, 0.929411764705882, 0.427450980392157, 0.113725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("constant_ellipsoid_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_ellipsoid_outlineColor_rgbaf')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$69 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$69.resource;
                try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$70.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(210, 126, 21, 70));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.ellipsoid.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.494117647058824, 0.0823529411764706, 0.274509803921569, 0.823529411764706), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualLabel() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_label_backgroundColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_label_backgroundColor_rgbaf')).toBeDefined();");
            try (Using<LabelCesiumWriter> using$1 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openBackgroundColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(215, 228, 242, 126));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.backgroundColor.getValue(date)).toEqualEpsilon(new Color(0.894117647058824, 0.949019607843137, 0.494117647058824, 0.843137254901961), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_label_fillColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_label_fillColor_rgbaf')).toBeDefined();");
            try (Using<LabelCesiumWriter> using$4 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$4.resource;
                try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(w.openFillColorProperty())) {
                    final ColorCesiumWriter w2 = using$5.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(129, 41, 145, 198));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.fillColor.getValue(date)).toEqualEpsilon(new Color(0.16078431372549, 0.568627450980392, 0.776470588235294, 0.505882352941176), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_label_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_label_outlineColor_rgbaf')).toBeDefined();");
            try (Using<LabelCesiumWriter> using$7 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$7.resource;
                try (Using<ColorCesiumWriter> using$8 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$8.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(173, 117, 83, 232));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.458823529411765, 0.325490196078431, 0.909803921568627, 0.67843137254902), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualModel() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_model_silhouetteColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_model_silhouetteColor_rgbaf')).toBeDefined();");
            try (Using<ModelCesiumWriter> using$1 = new Using<ModelCesiumWriter>(packet.openModelProperty())) {
                final ModelCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openSilhouetteColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(224, 75, 80, 107));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.model.silhouetteColor.getValue(date)).toEqualEpsilon(new Color(0.294117647058824, 0.313725490196078, 0.419607843137255, 0.87843137254902), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_model_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_model_color_rgbaf')).toBeDefined();");
            try (Using<ModelCesiumWriter> using$4 = new Using<ModelCesiumWriter>(packet.openModelProperty())) {
                final ModelCesiumWriter w = using$4.resource;
                try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$5.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(146, 145, 85, 36));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.model.color.getValue(date)).toEqualEpsilon(new Color(0.568627450980392, 0.333333333333333, 0.141176470588235, 0.572549019607843), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualPath() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_path_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_solidColor_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$1 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$1.resource;
                try (Using<PolylineMaterialCesiumWriter> using$2 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(236, 117, 132, 133));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.458823529411765, 0.517647058823529, 0.52156862745098, 0.925490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("material_path_material_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineOutline')).toBeDefined();");
            try (Using<PathCesiumWriter> using$6 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$6.resource;
                try (Using<PolylineMaterialCesiumWriter> using$7 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$7.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$8 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$8.resource;
                        try (Using<ColorCesiumWriter> using$9 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$9.resource;
                            m2.writeRgba(ColorHelper.fromArgb(86, 158, 14, 3));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(158, 14, 3, 86));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(ColorHelper.fromArgb(136, 137, 101, 236));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(137, 101, 236, 136));");
                        }
                        try (Using<DoubleCesiumWriter> using$11 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$11.resource;
                            m2.writeNumber(11017.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(date)).toEqual(11017.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("material_path_material_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineArrow')).toBeDefined();");
            try (Using<PathCesiumWriter> using$13 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$13.resource;
                try (Using<PolylineMaterialCesiumWriter> using$14 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$14.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$15 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$15.resource;
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeRgba(ColorHelper.fromArgb(102, 166, 131, 155));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(166, 131, 155, 102));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("material_path_material_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineDash')).toBeDefined();");
            try (Using<PathCesiumWriter> using$18 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$18.resource;
                try (Using<PolylineMaterialCesiumWriter> using$19 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$19.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$20 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$20.resource;
                        try (Using<ColorCesiumWriter> using$21 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$21.resource;
                            m2.writeRgba(ColorHelper.fromArgb(7, 190, 189, 9));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(190, 189, 9, 7));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeRgba(ColorHelper.fromArgb(24, 170, 88, 12));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.gapColor.getValue(date)).toEqual(Color.fromBytes(170, 88, 12, 24));");
                        }
                        try (Using<DoubleCesiumWriter> using$23 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$23.resource;
                            m2.writeNumber(45848.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.dashLength.getValue(date)).toEqual(45848.0);");
                        }
                        try (Using<IntegerCesiumWriter> using$24 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$24.resource;
                            m2.writeNumber(13519);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.dashPattern.getValue(date)).toEqual(13519);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("material_path_material_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_polylineGlow')).toBeDefined();");
            try (Using<PathCesiumWriter> using$26 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$26.resource;
                try (Using<PolylineMaterialCesiumWriter> using$27 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$27.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$28 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$28.resource;
                        try (Using<ColorCesiumWriter> using$29 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$29.resource;
                            m2.writeRgba(ColorHelper.fromArgb(147, 72, 114, 200));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(72, 114, 200, 147));");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(42344.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(date)).toEqual(42344.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$31 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$31.resource;
                            m2.writeNumber(39950.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.taperPower.getValue(date)).toEqual(39950.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$32 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$32.resource;
            packet.writeId("material_path_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_image')).toBeDefined();");
            try (Using<PathCesiumWriter> using$33 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$33.resource;
                try (Using<PolylineMaterialCesiumWriter> using$34 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$34.resource;
                    try (Using<ImageMaterialCesiumWriter> using$35 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$35.resource;
                        try (Using<UriCesiumWriter> using$36 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$36.resource;
                            m2.writeUri("http://example.com/31068", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.image.getValue(date).url).toEqual('http://example.com/31068');");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(new Rectangular(48351.0, 63420.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(date)).toEqual(new Cartesian2(48351, 63420));");
                        }
                        try (Using<ColorCesiumWriter> using$38 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$38.resource;
                            m2.writeRgba(ColorHelper.fromArgb(7, 105, 166, 133));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(105, 166, 133, 7));");
                        }
                        try (Using<BooleanCesiumWriter> using$39 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$39.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("material_path_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_grid')).toBeDefined();");
            try (Using<PathCesiumWriter> using$41 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$41.resource;
                try (Using<PolylineMaterialCesiumWriter> using$42 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgba(ColorHelper.fromArgb(165, 120, 196, 99));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(Color.fromBytes(120, 196, 99, 165));");
                        }
                        try (Using<DoubleCesiumWriter> using$45 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$45.resource;
                            m2.writeNumber(41317.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(date)).toEqual(41317.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$46 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$46.resource;
                            m2.writeCartesian2(new Rectangular(52557.0, 7629.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(date)).toEqual(new Cartesian2(52557, 7629));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$47 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$47.resource;
                            m2.writeCartesian2(new Rectangular(21845.0, 52309.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineThickness.getValue(date)).toEqual(new Cartesian2(21845, 52309));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$48 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$48.resource;
                            m2.writeCartesian2(new Rectangular(48700.0, 4542.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(date)).toEqual(new Cartesian2(48700, 4542));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$49 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$49.resource;
            packet.writeId("material_path_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_stripe')).toBeDefined();");
            try (Using<PathCesiumWriter> using$50 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$50.resource;
                try (Using<PolylineMaterialCesiumWriter> using$51 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$51.resource;
                    try (Using<StripeMaterialCesiumWriter> using$52 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$52.resource;
                        try (Using<StripeOrientationCesiumWriter> using$53 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$53.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgba(ColorHelper.fromArgb(229, 20, 43, 77));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(date)).toEqual(Color.fromBytes(20, 43, 77, 229));");
                        }
                        try (Using<ColorCesiumWriter> using$55 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$55.resource;
                            m2.writeRgba(ColorHelper.fromArgb(187, 157, 171, 93));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(date)).toEqual(Color.fromBytes(157, 171, 93, 187));");
                        }
                        try (Using<DoubleCesiumWriter> using$56 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$56.resource;
                            m2.writeNumber(41305.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(date)).toEqual(41305.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$57 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$57.resource;
                            m2.writeNumber(43637.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(date)).toEqual(43637.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("material_path_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_path_material_checkerboard')).toBeDefined();");
            try (Using<PathCesiumWriter> using$59 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$59.resource;
                try (Using<PolylineMaterialCesiumWriter> using$60 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgba(ColorHelper.fromArgb(107, 174, 238, 222));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(date)).toEqual(Color.fromBytes(174, 238, 222, 107));");
                        }
                        try (Using<ColorCesiumWriter> using$63 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$63.resource;
                            m2.writeRgba(ColorHelper.fromArgb(237, 184, 189, 156));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(date)).toEqual(Color.fromBytes(184, 189, 156, 237));");
                        }
                        try (Using<RepeatCesiumWriter> using$64 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$64.resource;
                            m2.writeCartesian2(new Rectangular(57303.0, 45535.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(date)).toEqual(new Cartesian2(57303, 45535));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("constant_path_material_polylineOutline_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_polylineOutline_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$66 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$66.resource;
                try (Using<PolylineMaterialCesiumWriter> using$67 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$67.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$68 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$68.resource;
                        try (Using<ColorCesiumWriter> using$69 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$69.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(81, 15, 21, 246));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.0588235294117647, 0.0823529411764706, 0.964705882352941, 0.317647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$70 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$70.resource;
            packet.writeId("constant_path_material_polylineOutline_outlineColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_polylineOutline_outlineColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$71 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$71.resource;
                try (Using<PolylineMaterialCesiumWriter> using$72 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$72.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$73 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$73.resource;
                        try (Using<ColorCesiumWriter> using$74 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$74.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(194, 68, 142, 90));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.266666666666667, 0.556862745098039, 0.352941176470588, 0.76078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$75 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$75.resource;
            packet.writeId("constant_path_material_polylineArrow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_polylineArrow_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$76 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$76.resource;
                try (Using<PolylineMaterialCesiumWriter> using$77 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$77.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$78 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$78.resource;
                        try (Using<ColorCesiumWriter> using$79 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$79.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(235, 160, 71, 248));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.627450980392157, 0.27843137254902, 0.972549019607843, 0.92156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$80 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$80.resource;
            packet.writeId("constant_path_material_polylineDash_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_polylineDash_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$81 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$81.resource;
                try (Using<PolylineMaterialCesiumWriter> using$82 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$82.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$83 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$83.resource;
                        try (Using<ColorCesiumWriter> using$84 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$84.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(190, 29, 94, 105));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.113725490196078, 0.368627450980392, 0.411764705882353, 0.745098039215686), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$85 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$85.resource;
            packet.writeId("constant_path_material_polylineDash_gapColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_polylineDash_gapColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$86 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$86.resource;
                try (Using<PolylineMaterialCesiumWriter> using$87 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$87.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$88 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$88.resource;
                        try (Using<ColorCesiumWriter> using$89 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$89.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(191, 212, 80, 87));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.gapColor.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.313725490196078, 0.341176470588235, 0.749019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$90 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$90.resource;
            packet.writeId("constant_path_material_polylineGlow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_polylineGlow_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$91 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$91.resource;
                try (Using<PolylineMaterialCesiumWriter> using$92 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$92.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$93 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$93.resource;
                        try (Using<ColorCesiumWriter> using$94 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$94.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(69, 149, 4, 84));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.584313725490196, 0.0156862745098039, 0.329411764705882, 0.270588235294118), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$95 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$95.resource;
            packet.writeId("constant_path_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_image_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$96 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$96.resource;
                try (Using<PolylineMaterialCesiumWriter> using$97 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$97.resource;
                    try (Using<ImageMaterialCesiumWriter> using$98 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$98.resource;
                        try (Using<ColorCesiumWriter> using$99 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$99.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(106, 113, 115, 163));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.443137254901961, 0.450980392156863, 0.63921568627451, 0.415686274509804), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$100 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$100.resource;
            packet.writeId("constant_path_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_grid_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$101 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$101.resource;
                try (Using<PolylineMaterialCesiumWriter> using$102 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$102.resource;
                    try (Using<GridMaterialCesiumWriter> using$103 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$103.resource;
                        try (Using<ColorCesiumWriter> using$104 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$104.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(238, 251, 241, 195));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqualEpsilon(new Color(0.984313725490196, 0.945098039215686, 0.764705882352941, 0.933333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$105 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$105.resource;
            packet.writeId("constant_path_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_stripe_evenColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$106 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$106.resource;
                try (Using<PolylineMaterialCesiumWriter> using$107 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$107.resource;
                    try (Using<StripeMaterialCesiumWriter> using$108 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$108.resource;
                        try (Using<ColorCesiumWriter> using$109 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$109.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(89, 149, 161, 5));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.584313725490196, 0.631372549019608, 0.0196078431372549, 0.349019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$110 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$110.resource;
            packet.writeId("constant_path_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_stripe_oddColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$111 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$111.resource;
                try (Using<PolylineMaterialCesiumWriter> using$112 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$112.resource;
                    try (Using<StripeMaterialCesiumWriter> using$113 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$113.resource;
                        try (Using<ColorCesiumWriter> using$114 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$114.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(128, 59, 54, 240));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.231372549019608, 0.211764705882353, 0.941176470588235, 0.501960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$115 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$115.resource;
            packet.writeId("constant_path_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$116 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$116.resource;
                try (Using<PolylineMaterialCesiumWriter> using$117 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$117.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$118 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$118.resource;
                        try (Using<ColorCesiumWriter> using$119 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$119.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(207, 66, 217, 50));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.258823529411765, 0.850980392156863, 0.196078431372549, 0.811764705882353), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$120 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$120.resource;
            packet.writeId("constant_path_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_path_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$121 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$121.resource;
                try (Using<PolylineMaterialCesiumWriter> using$122 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$122.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$123 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$123.resource;
                        try (Using<ColorCesiumWriter> using$124 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$124.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(30, 19, 238, 47));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0745098039215686, 0.933333333333333, 0.184313725490196, 0.117647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
    }

    private final void writeConstantValuesIndividualPoint() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_point_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_point_color_rgbaf')).toBeDefined();");
            try (Using<PointCesiumWriter> using$1 = new Using<PointCesiumWriter>(packet.openPointProperty())) {
                final PointCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(180, 169, 81, 164));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.point.color.getValue(date)).toEqualEpsilon(new Color(0.662745098039216, 0.317647058823529, 0.643137254901961, 0.705882352941177), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_point_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_point_outlineColor_rgbaf')).toBeDefined();");
            try (Using<PointCesiumWriter> using$4 = new Using<PointCesiumWriter>(packet.openPointProperty())) {
                final PointCesiumWriter w = using$4.resource;
                try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$5.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(41, 1, 99, 26));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.point.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.00392156862745098, 0.388235294117647, 0.101960784313725, 0.16078431372549), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualPolygon() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_polygon_positions_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_positions_cartographicRadians')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$1 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$1.resource;
                try (Using<PositionListCesiumWriter> using$2 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$2.resource;
                    w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.278819883450618, 1.34192534297912, 13112.0),
                            new Cartographic(1.08460649779701, 1.26665808721843, 9013.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).positions).toEqual([ Cartesian3.fromRadians(0.278819883450618, 1.34192534297912, 13112), Cartesian3.fromRadians(1.08460649779701, 1.26665808721843, 9013) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_polygon_positions_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_positions_cartographicDegrees')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$4 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$4.resource;
                try (Using<PositionListCesiumWriter> using$5 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$5.resource;
                    w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(20.0, 42.0, 343.0), new Cartographic(21.0, 14.0, 24042.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).positions).toEqual([ Cartesian3.fromDegrees(20, 42, 343), Cartesian3.fromDegrees(21, 14, 24042) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_polygon_holes_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_holes_cartographicRadians')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$7 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$7.resource;
                try (Using<PositionListOfListsCesiumWriter> using$8 = new Using<PositionListOfListsCesiumWriter>(w.openHolesProperty())) {
                    final PositionListOfListsCesiumWriter w2 = using$8.resource;
                    w2.writeCartographicRadians(TestGenerateValidationDocument.<List<Cartographic>> createList(
                            createList(new Cartographic(0.799220652820836, 1.50366253893541, 4776.0), new Cartographic(0.179862066646486, 1.42489853818289, 42245.0),
                                    new Cartographic(0.0636782022426772, 0.558333087028927, 32510.0)),
                            createList(new Cartographic(1.50366253893541, 0.779166543514464, 33810.0), new Cartographic(1.42489853818289, 0.00358717805196918, 20389.0),
                                    new Cartographic(0.558333087028927, 0.799220652820836, 43134.0), new Cartographic(0.779166543514464, 0.179862066646486, 1412.0))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).holes).toEqual([ new PolygonHierarchy([ Cartesian3.fromRadians(0.799220652820836, 1.50366253893541, 4776), Cartesian3.fromRadians(0.179862066646486, 1.42489853818289, 42245), Cartesian3.fromRadians(0.0636782022426772, 0.558333087028927, 32510) ]), new PolygonHierarchy([ Cartesian3.fromRadians(1.50366253893541, 0.779166543514464, 33810), Cartesian3.fromRadians(1.42489853818289, 0.00358717805196918, 20389), Cartesian3.fromRadians(0.558333087028927, 0.799220652820836, 43134), Cartesian3.fromRadians(0.779166543514464, 0.179862066646486, 1412) ]) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$9 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$9.resource;
            packet.writeId("constant_polygon_holes_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_holes_cartographicDegrees')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$10 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$10.resource;
                try (Using<PositionListOfListsCesiumWriter> using$11 = new Using<PositionListOfListsCesiumWriter>(w.openHolesProperty())) {
                    final PositionListOfListsCesiumWriter w2 = using$11.resource;
                    w2.writeCartographicDegrees(TestGenerateValidationDocument.<List<Cartographic>> createList(
                            createList(new Cartographic(38.0, 39.0, 52122.0), new Cartographic(30.0, 41.0, 40406.0), new Cartographic(9.0, 42.0, 55073.0)),
                            createList(new Cartographic(39.0, 12.0, 5835.0), new Cartographic(41.0, 41.0, 39069.0), new Cartographic(42.0, 38.0, 39639.0), new Cartographic(12.0, 30.0, 54806.0))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).holes).toEqual([ new PolygonHierarchy([ Cartesian3.fromDegrees(38, 39, 52122), Cartesian3.fromDegrees(30, 41, 40406), Cartesian3.fromDegrees(9, 42, 55073) ]), new PolygonHierarchy([ Cartesian3.fromDegrees(39, 12, 5835), Cartesian3.fromDegrees(41, 41, 39069), Cartesian3.fromDegrees(42, 38, 39639), Cartesian3.fromDegrees(12, 30, 54806) ]) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("constant_polygon_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_material_solidColor_color')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$13 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$13.resource;
                try (Using<MaterialCesiumWriter> using$14 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$14.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$15 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$15.resource;
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(248, 250, 231, 70));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.980392156862745, 0.905882352941176, 0.274509803921569, 0.972549019607843), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("material_polygon_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_image')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$18 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<ImageMaterialCesiumWriter> using$20 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$20.resource;
                        try (Using<UriCesiumWriter> using$21 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$21.resource;
                            m2.writeUri("http://example.com/3481", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.image.getValue(date).url).toEqual('http://example.com/3481');");
                        }
                        try (Using<RepeatCesiumWriter> using$22 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(new Rectangular(29381.0, 10354.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(date)).toEqual(new Cartesian2(29381, 10354));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeRgba(ColorHelper.fromArgb(209, 36, 184, 236));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(36, 184, 236, 209));");
                        }
                        try (Using<BooleanCesiumWriter> using$24 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$24.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("material_polygon_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_grid')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$26 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$26.resource;
                try (Using<MaterialCesiumWriter> using$27 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$27.resource;
                    try (Using<GridMaterialCesiumWriter> using$28 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$28.resource;
                        try (Using<ColorCesiumWriter> using$29 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$29.resource;
                            m2.writeRgba(ColorHelper.fromArgb(13, 246, 64, 141));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(Color.fromBytes(246, 64, 141, 13));");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(986.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(986.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$31 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$31.resource;
                            m2.writeCartesian2(new Rectangular(26094.0, 44645.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineCount.getValue(date)).toEqual(new Cartesian2(26094, 44645));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$32 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$32.resource;
                            m2.writeCartesian2(new Rectangular(30775.0, 17784.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(new Cartesian2(30775, 17784));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$33 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$33.resource;
                            m2.writeCartesian2(new Rectangular(58344.0, 3555.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(new Cartesian2(58344, 3555));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$34 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$34.resource;
            packet.writeId("material_polygon_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_stripe')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$35 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$35.resource;
                try (Using<MaterialCesiumWriter> using$36 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$36.resource;
                    try (Using<StripeMaterialCesiumWriter> using$37 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$37.resource;
                        try (Using<StripeOrientationCesiumWriter> using$38 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$38.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgba(ColorHelper.fromArgb(52, 98, 184, 45));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(date)).toEqual(Color.fromBytes(98, 184, 45, 52));");
                        }
                        try (Using<ColorCesiumWriter> using$40 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$40.resource;
                            m2.writeRgba(ColorHelper.fromArgb(228, 164, 123, 182));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(date)).toEqual(Color.fromBytes(164, 123, 182, 228));");
                        }
                        try (Using<DoubleCesiumWriter> using$41 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$41.resource;
                            m2.writeNumber(12114.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(date)).toEqual(12114.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$42 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$42.resource;
                            m2.writeNumber(60350.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(date)).toEqual(60350.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("material_polygon_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polygon_material_checkerboard')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$44 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$46 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgba(ColorHelper.fromArgb(98, 187, 186, 46));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(date)).toEqual(Color.fromBytes(187, 186, 46, 98));");
                        }
                        try (Using<ColorCesiumWriter> using$48 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$48.resource;
                            m2.writeRgba(ColorHelper.fromArgb(217, 19, 74, 101));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(date)).toEqual(Color.fromBytes(19, 74, 101, 217));");
                        }
                        try (Using<RepeatCesiumWriter> using$49 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$49.resource;
                            m2.writeCartesian2(new Rectangular(45028.0, 15023.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(date)).toEqual(new Cartesian2(45028, 15023));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("constant_polygon_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_material_image_color')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$51 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<ImageMaterialCesiumWriter> using$53 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(53, 172, 204, 105));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.674509803921569, 0.8, 0.411764705882353, 0.207843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("constant_polygon_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_material_grid_color')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$56 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<GridMaterialCesiumWriter> using$58 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(22, 154, 24, 2));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(date)).toEqualEpsilon(new Color(0.603921568627451, 0.0941176470588235, 0.00784313725490196, 0.0862745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("constant_polygon_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_material_stripe_evenColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$61 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<StripeMaterialCesiumWriter> using$63 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(220, 197, 221, 246));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.772549019607843, 0.866666666666667, 0.964705882352941, 0.862745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("constant_polygon_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_material_stripe_oddColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$66 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$66.resource;
                try (Using<MaterialCesiumWriter> using$67 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$67.resource;
                    try (Using<StripeMaterialCesiumWriter> using$68 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$68.resource;
                        try (Using<ColorCesiumWriter> using$69 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$69.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(152, 220, 10, 117));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.862745098039216, 0.0392156862745098, 0.458823529411765, 0.596078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$70 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$70.resource;
            packet.writeId("constant_polygon_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$71 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$71.resource;
                try (Using<MaterialCesiumWriter> using$72 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$72.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$73 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$73.resource;
                        try (Using<ColorCesiumWriter> using$74 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$74.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(232, 101, 147, 121));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.396078431372549, 0.576470588235294, 0.474509803921569, 0.909803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$75 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$75.resource;
            packet.writeId("constant_polygon_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$76 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$76.resource;
                try (Using<MaterialCesiumWriter> using$77 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$77.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$78 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$78.resource;
                        try (Using<ColorCesiumWriter> using$79 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$79.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(53, 30, 66, 138));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.117647058823529, 0.258823529411765, 0.541176470588235, 0.207843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$80 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$80.resource;
            packet.writeId("constant_polygon_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polygon_outlineColor_rgbaf')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$81 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$81.resource;
                try (Using<ColorCesiumWriter> using$82 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$82.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(244, 27, 108, 158));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.105882352941176, 0.423529411764706, 0.619607843137255, 0.956862745098039), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualPolyline() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_polyline_positions_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_positions_cartographicRadians')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$1 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$1.resource;
                try (Using<PositionListCesiumWriter> using$2 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$2.resource;
                    w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.23083587429617, 0.738315731088925, 41390.0),
                            new Cartographic(0.537259577218533, 0.25389340391868, 10573.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.23083587429617, 0.738315731088925, 41390), Cartesian3.fromRadians(0.537259577218533, 0.25389340391868, 10573) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_polyline_positions_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_positions_cartographicDegrees')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$4 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$4.resource;
                try (Using<PositionListCesiumWriter> using$5 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$5.resource;
                    w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(19.0, 5.0, 11802.0), new Cartographic(15.0, 40.0, 39495.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polyline.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(19, 5, 11802), Cartesian3.fromDegrees(15, 40, 39495) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_polyline_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_solidColor_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$7 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$7.resource;
                try (Using<PolylineMaterialCesiumWriter> using$8 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$8.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$9 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$9.resource;
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(27, 195, 228, 223));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.764705882352941, 0.894117647058824, 0.874509803921569, 0.105882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("material_polyline_material_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineOutline')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$12 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$12.resource;
                try (Using<PolylineMaterialCesiumWriter> using$13 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$13.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$14 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(ColorHelper.fromArgb(33, 152, 14, 11));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(152, 14, 11, 33));");
                        }
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeRgba(ColorHelper.fromArgb(92, 222, 51, 202));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(Color.fromBytes(222, 51, 202, 92));");
                        }
                        try (Using<DoubleCesiumWriter> using$17 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$17.resource;
                            m2.writeNumber(6879.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(6879.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$18 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$18.resource;
            packet.writeId("material_polyline_material_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineArrow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$19 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$19.resource;
                try (Using<PolylineMaterialCesiumWriter> using$20 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$20.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$21 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$21.resource;
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeRgba(ColorHelper.fromArgb(107, 82, 169, 80));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(82, 169, 80, 107));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$23 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$23.resource;
            packet.writeId("material_polyline_material_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineDash')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$24 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$24.resource;
                try (Using<PolylineMaterialCesiumWriter> using$25 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$25.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$26 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$26.resource;
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(ColorHelper.fromArgb(141, 22, 214, 57));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(22, 214, 57, 141));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(ColorHelper.fromArgb(117, 150, 91, 109));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.gapColor.getValue(date)).toEqual(Color.fromBytes(150, 91, 109, 117));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(60297.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.dashLength.getValue(date)).toEqual(60297.0);");
                        }
                        try (Using<IntegerCesiumWriter> using$30 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(40430);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.dashPattern.getValue(date)).toEqual(40430);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("material_polyline_material_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_polylineGlow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$32 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$32.resource;
                try (Using<PolylineMaterialCesiumWriter> using$33 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$33.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$34 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(ColorHelper.fromArgb(171, 59, 125, 181));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(59, 125, 181, 171));");
                        }
                        try (Using<DoubleCesiumWriter> using$36 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$36.resource;
                            m2.writeNumber(41345.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(date)).toEqual(41345.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$37 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$37.resource;
                            m2.writeNumber(29908.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.taperPower.getValue(date)).toEqual(29908.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("material_polyline_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_image')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$39 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$39.resource;
                try (Using<PolylineMaterialCesiumWriter> using$40 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<UriCesiumWriter> using$42 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$42.resource;
                            m2.writeUri("http://example.com/29020", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.image.getValue(date).url).toEqual('http://example.com/29020');");
                        }
                        try (Using<RepeatCesiumWriter> using$43 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$43.resource;
                            m2.writeCartesian2(new Rectangular(8980.0, 60451.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(date)).toEqual(new Cartesian2(8980, 60451));");
                        }
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgba(ColorHelper.fromArgb(94, 46, 136, 39));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(46, 136, 39, 94));");
                        }
                        try (Using<BooleanCesiumWriter> using$45 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$45.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$46 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$46.resource;
            packet.writeId("material_polyline_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_grid')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$47 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$47.resource;
                try (Using<PolylineMaterialCesiumWriter> using$48 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$48.resource;
                    try (Using<GridMaterialCesiumWriter> using$49 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$49.resource;
                        try (Using<ColorCesiumWriter> using$50 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$50.resource;
                            m2.writeRgba(ColorHelper.fromArgb(26, 157, 57, 26));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(Color.fromBytes(157, 57, 26, 26));");
                        }
                        try (Using<DoubleCesiumWriter> using$51 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$51.resource;
                            m2.writeNumber(27197.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(27197.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$52 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$52.resource;
                            m2.writeCartesian2(new Rectangular(17878.0, 15173.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineCount.getValue(date)).toEqual(new Cartesian2(17878, 15173));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$53 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$53.resource;
                            m2.writeCartesian2(new Rectangular(64504.0, 24571.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(new Cartesian2(64504, 24571));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$54 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$54.resource;
                            m2.writeCartesian2(new Rectangular(51933.0, 9674.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(new Cartesian2(51933, 9674));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("material_polyline_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_stripe')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$56 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$56.resource;
                try (Using<PolylineMaterialCesiumWriter> using$57 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$57.resource;
                    try (Using<StripeMaterialCesiumWriter> using$58 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$58.resource;
                        try (Using<StripeOrientationCesiumWriter> using$59 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$59.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$60 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$60.resource;
                            m2.writeRgba(ColorHelper.fromArgb(132, 98, 239, 47));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(date)).toEqual(Color.fromBytes(98, 239, 47, 132));");
                        }
                        try (Using<ColorCesiumWriter> using$61 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$61.resource;
                            m2.writeRgba(ColorHelper.fromArgb(144, 41, 198, 29));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(date)).toEqual(Color.fromBytes(41, 198, 29, 144));");
                        }
                        try (Using<DoubleCesiumWriter> using$62 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$62.resource;
                            m2.writeNumber(10077.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(date)).toEqual(10077.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$63 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$63.resource;
                            m2.writeNumber(31817.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(date)).toEqual(31817.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$64 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$64.resource;
            packet.writeId("material_polyline_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_material_checkerboard')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$65 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$65.resource;
                try (Using<PolylineMaterialCesiumWriter> using$66 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$66.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$67 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$67.resource;
                        try (Using<ColorCesiumWriter> using$68 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$68.resource;
                            m2.writeRgba(ColorHelper.fromArgb(39, 29, 196, 146));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(date)).toEqual(Color.fromBytes(29, 196, 146, 39));");
                        }
                        try (Using<ColorCesiumWriter> using$69 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$69.resource;
                            m2.writeRgba(ColorHelper.fromArgb(32, 189, 110, 12));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(date)).toEqual(Color.fromBytes(189, 110, 12, 32));");
                        }
                        try (Using<RepeatCesiumWriter> using$70 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$70.resource;
                            m2.writeCartesian2(new Rectangular(22832.0, 11097.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(date)).toEqual(new Cartesian2(22832, 11097));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$71 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$71.resource;
            packet.writeId("constant_polyline_material_polylineOutline_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_polylineOutline_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$72 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$72.resource;
                try (Using<PolylineMaterialCesiumWriter> using$73 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$73.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$74 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$74.resource;
                        try (Using<ColorCesiumWriter> using$75 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$75.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(41, 115, 227, 103));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.450980392156863, 0.890196078431372, 0.403921568627451, 0.16078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$76 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$76.resource;
            packet.writeId("constant_polyline_material_polylineOutline_outlineColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_polylineOutline_outlineColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$77 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$77.resource;
                try (Using<PolylineMaterialCesiumWriter> using$78 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$78.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$79 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$79.resource;
                        try (Using<ColorCesiumWriter> using$80 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$80.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(81, 208, 139, 135));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.815686274509804, 0.545098039215686, 0.529411764705882, 0.317647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$81 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$81.resource;
            packet.writeId("constant_polyline_material_polylineArrow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_polylineArrow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$82 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$82.resource;
                try (Using<PolylineMaterialCesiumWriter> using$83 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$83.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$84 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$84.resource;
                        try (Using<ColorCesiumWriter> using$85 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$85.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(113, 212, 210, 161));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.823529411764706, 0.631372549019608, 0.443137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$86 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$86.resource;
            packet.writeId("constant_polyline_material_polylineDash_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_polylineDash_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$87 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$87.resource;
                try (Using<PolylineMaterialCesiumWriter> using$88 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$88.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$89 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$89.resource;
                        try (Using<ColorCesiumWriter> using$90 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$90.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(0, 118, 47, 84));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.462745098039216, 0.184313725490196, 0.329411764705882, 0), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$91 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$91.resource;
            packet.writeId("constant_polyline_material_polylineDash_gapColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_polylineDash_gapColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$92 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$92.resource;
                try (Using<PolylineMaterialCesiumWriter> using$93 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$93.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$94 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$94.resource;
                        try (Using<ColorCesiumWriter> using$95 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$95.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(102, 13, 8, 61));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.gapColor.getValue(date)).toEqualEpsilon(new Color(0.0509803921568627, 0.0313725490196078, 0.23921568627451, 0.4), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$96 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$96.resource;
            packet.writeId("constant_polyline_material_polylineGlow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_polylineGlow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$97 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$97.resource;
                try (Using<PolylineMaterialCesiumWriter> using$98 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$98.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$99 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$99.resource;
                        try (Using<ColorCesiumWriter> using$100 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$100.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(97, 105, 80, 219));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.411764705882353, 0.313725490196078, 0.858823529411765, 0.380392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$101 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$101.resource;
            packet.writeId("constant_polyline_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_image_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$102 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$102.resource;
                try (Using<PolylineMaterialCesiumWriter> using$103 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$103.resource;
                    try (Using<ImageMaterialCesiumWriter> using$104 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$104.resource;
                        try (Using<ColorCesiumWriter> using$105 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$105.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(47, 34, 141, 11));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.133333333333333, 0.552941176470588, 0.0431372549019608, 0.184313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$106 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$106.resource;
            packet.writeId("constant_polyline_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_grid_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$107 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$107.resource;
                try (Using<PolylineMaterialCesiumWriter> using$108 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$108.resource;
                    try (Using<GridMaterialCesiumWriter> using$109 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$109.resource;
                        try (Using<ColorCesiumWriter> using$110 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$110.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(143, 36, 210, 150));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqualEpsilon(new Color(0.141176470588235, 0.823529411764706, 0.588235294117647, 0.56078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$111 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$111.resource;
            packet.writeId("constant_polyline_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_stripe_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$112 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$112.resource;
                try (Using<PolylineMaterialCesiumWriter> using$113 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$113.resource;
                    try (Using<StripeMaterialCesiumWriter> using$114 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$114.resource;
                        try (Using<ColorCesiumWriter> using$115 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$115.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(199, 165, 220, 33));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.647058823529412, 0.862745098039216, 0.129411764705882, 0.780392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$116 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$116.resource;
            packet.writeId("constant_polyline_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_stripe_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$117 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$117.resource;
                try (Using<PolylineMaterialCesiumWriter> using$118 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$118.resource;
                    try (Using<StripeMaterialCesiumWriter> using$119 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$119.resource;
                        try (Using<ColorCesiumWriter> using$120 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$120.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(71, 74, 199, 18));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.290196078431373, 0.780392156862745, 0.0705882352941176, 0.27843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$121 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$121.resource;
            packet.writeId("constant_polyline_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$122 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$122.resource;
                try (Using<PolylineMaterialCesiumWriter> using$123 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$123.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$124 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$124.resource;
                        try (Using<ColorCesiumWriter> using$125 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$125.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(205, 129, 119, 220));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.505882352941176, 0.466666666666667, 0.862745098039216, 0.803921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$126 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$126.resource;
            packet.writeId("constant_polyline_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$127 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$127.resource;
                try (Using<PolylineMaterialCesiumWriter> using$128 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$128.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$129 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$129.resource;
                        try (Using<ColorCesiumWriter> using$130 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$130.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(52, 82, 116, 205));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.32156862745098, 0.454901960784314, 0.803921568627451, 0.203921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$131 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$131.resource;
            packet.writeId("constant_polyline_depthFailMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_solidColor_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$132 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$132.resource;
                try (Using<PolylineMaterialCesiumWriter> using$133 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$133.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$134 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$134.resource;
                        try (Using<ColorCesiumWriter> using$135 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$135.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(161, 231, 162, 111));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.905882352941176, 0.635294117647059, 0.435294117647059, 0.631372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$136 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$136.resource;
            packet.writeId("material_polyline_depthFailMaterial_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_polylineOutline')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$137 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$137.resource;
                try (Using<PolylineMaterialCesiumWriter> using$138 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$138.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$139 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$139.resource;
                        try (Using<ColorCesiumWriter> using$140 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$140.resource;
                            m2.writeRgba(ColorHelper.fromArgb(18, 238, 116, 228));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(Color.fromBytes(238, 116, 228, 18));");
                        }
                        try (Using<ColorCesiumWriter> using$141 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$141.resource;
                            m2.writeRgba(ColorHelper.fromArgb(134, 36, 55, 18));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.outlineColor.getValue(date)).toEqual(Color.fromBytes(36, 55, 18, 134));");
                        }
                        try (Using<DoubleCesiumWriter> using$142 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$142.resource;
                            m2.writeNumber(33747.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.outlineWidth.getValue(date)).toEqual(33747.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$143 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$143.resource;
            packet.writeId("material_polyline_depthFailMaterial_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_polylineArrow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$144 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$144.resource;
                try (Using<PolylineMaterialCesiumWriter> using$145 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$145.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$146 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$146.resource;
                        try (Using<ColorCesiumWriter> using$147 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$147.resource;
                            m2.writeRgba(ColorHelper.fromArgb(160, 80, 78, 117));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(Color.fromBytes(80, 78, 117, 160));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$148 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$148.resource;
            packet.writeId("material_polyline_depthFailMaterial_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_polylineDash')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$149 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$149.resource;
                try (Using<PolylineMaterialCesiumWriter> using$150 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$150.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$151 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$151.resource;
                        try (Using<ColorCesiumWriter> using$152 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$152.resource;
                            m2.writeRgba(ColorHelper.fromArgb(217, 139, 171, 44));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(Color.fromBytes(139, 171, 44, 217));");
                        }
                        try (Using<ColorCesiumWriter> using$153 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$153.resource;
                            m2.writeRgba(ColorHelper.fromArgb(243, 253, 13, 109));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.gapColor.getValue(date)).toEqual(Color.fromBytes(253, 13, 109, 243));");
                        }
                        try (Using<DoubleCesiumWriter> using$154 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$154.resource;
                            m2.writeNumber(21429.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.dashLength.getValue(date)).toEqual(21429.0);");
                        }
                        try (Using<IntegerCesiumWriter> using$155 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$155.resource;
                            m2.writeNumber(13659);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.dashPattern.getValue(date)).toEqual(13659);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$156 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$156.resource;
            packet.writeId("material_polyline_depthFailMaterial_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_polylineGlow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$157 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$157.resource;
                try (Using<PolylineMaterialCesiumWriter> using$158 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$158.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$159 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$159.resource;
                        try (Using<ColorCesiumWriter> using$160 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$160.resource;
                            m2.writeRgba(ColorHelper.fromArgb(249, 82, 227, 164));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(Color.fromBytes(82, 227, 164, 249));");
                        }
                        try (Using<DoubleCesiumWriter> using$161 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$161.resource;
                            m2.writeNumber(52932.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.glowPower.getValue(date)).toEqual(52932.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$162 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$162.resource;
                            m2.writeNumber(29589.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.taperPower.getValue(date)).toEqual(29589.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$163 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$163.resource;
            packet.writeId("material_polyline_depthFailMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_image')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$164 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$164.resource;
                try (Using<PolylineMaterialCesiumWriter> using$165 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$165.resource;
                    try (Using<ImageMaterialCesiumWriter> using$166 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$166.resource;
                        try (Using<UriCesiumWriter> using$167 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$167.resource;
                            m2.writeUri("http://example.com/6349", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.image.getValue(date).url).toEqual('http://example.com/6349');");
                        }
                        try (Using<RepeatCesiumWriter> using$168 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$168.resource;
                            m2.writeCartesian2(new Rectangular(24549.0, 50015.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(date)).toEqual(new Cartesian2(24549, 50015));");
                        }
                        try (Using<ColorCesiumWriter> using$169 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$169.resource;
                            m2.writeRgba(ColorHelper.fromArgb(55, 71, 233, 193));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(Color.fromBytes(71, 233, 193, 55));");
                        }
                        try (Using<BooleanCesiumWriter> using$170 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$170.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$171 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$171.resource;
            packet.writeId("material_polyline_depthFailMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_grid')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$172 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$172.resource;
                try (Using<PolylineMaterialCesiumWriter> using$173 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$173.resource;
                    try (Using<GridMaterialCesiumWriter> using$174 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$174.resource;
                        try (Using<ColorCesiumWriter> using$175 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$175.resource;
                            m2.writeRgba(ColorHelper.fromArgb(116, 241, 160, 22));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(Color.fromBytes(241, 160, 22, 116));");
                        }
                        try (Using<DoubleCesiumWriter> using$176 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$176.resource;
                            m2.writeNumber(32801.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.cellAlpha.getValue(date)).toEqual(32801.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$177 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$177.resource;
                            m2.writeCartesian2(new Rectangular(27318.0, 57194.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(27318, 57194));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$178 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$178.resource;
                            m2.writeCartesian2(new Rectangular(2299.0, 50440.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(2299, 50440));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$179 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$179.resource;
                            m2.writeCartesian2(new Rectangular(16744.0, 62785.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(16744, 62785));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$180 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$180.resource;
            packet.writeId("material_polyline_depthFailMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_stripe')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$181 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$181.resource;
                try (Using<PolylineMaterialCesiumWriter> using$182 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$182.resource;
                    try (Using<StripeMaterialCesiumWriter> using$183 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$183.resource;
                        try (Using<StripeOrientationCesiumWriter> using$184 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$184.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$185 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$185.resource;
                            m2.writeRgba(ColorHelper.fromArgb(224, 174, 135, 160));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(174, 135, 160, 224));");
                        }
                        try (Using<ColorCesiumWriter> using$186 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$186.resource;
                            m2.writeRgba(ColorHelper.fromArgb(198, 8, 166, 115));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(8, 166, 115, 198));");
                        }
                        try (Using<DoubleCesiumWriter> using$187 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$187.resource;
                            m2.writeNumber(58992.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.offset.getValue(date)).toEqual(58992.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$188 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$188.resource;
                            m2.writeNumber(7346.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(date)).toEqual(7346.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$189 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$189.resource;
            packet.writeId("material_polyline_depthFailMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polyline_depthFailMaterial_checkerboard')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$190 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$190.resource;
                try (Using<PolylineMaterialCesiumWriter> using$191 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$191.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$192 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$192.resource;
                        try (Using<ColorCesiumWriter> using$193 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$193.resource;
                            m2.writeRgba(ColorHelper.fromArgb(1, 143, 196, 196));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(143, 196, 196, 1));");
                        }
                        try (Using<ColorCesiumWriter> using$194 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$194.resource;
                            m2.writeRgba(ColorHelper.fromArgb(119, 49, 118, 113));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(49, 118, 113, 119));");
                        }
                        try (Using<RepeatCesiumWriter> using$195 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$195.resource;
                            m2.writeCartesian2(new Rectangular(32284.0, 46718.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(date)).toEqual(new Cartesian2(32284, 46718));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$196 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$196.resource;
            packet.writeId("constant_polyline_depthFailMaterial_polylineOutline_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_polylineOutline_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$197 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$197.resource;
                try (Using<PolylineMaterialCesiumWriter> using$198 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$198.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$199 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$199.resource;
                        try (Using<ColorCesiumWriter> using$200 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$200.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(177, 249, 34, 213));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.976470588235294, 0.133333333333333, 0.835294117647059, 0.694117647058824), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$201 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$201.resource;
            packet.writeId("constant_polyline_depthFailMaterial_polylineOutline_outlineColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_polylineOutline_outlineColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$202 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$202.resource;
                try (Using<PolylineMaterialCesiumWriter> using$203 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$203.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$204 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$204.resource;
                        try (Using<ColorCesiumWriter> using$205 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$205.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(67, 204, 221, 56));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.8, 0.866666666666667, 0.219607843137255, 0.262745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$206 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$206.resource;
            packet.writeId("constant_polyline_depthFailMaterial_polylineArrow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_polylineArrow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$207 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$207.resource;
                try (Using<PolylineMaterialCesiumWriter> using$208 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$208.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$209 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$209.resource;
                        try (Using<ColorCesiumWriter> using$210 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$210.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(54, 10, 252, 200));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0392156862745098, 0.988235294117647, 0.784313725490196, 0.211764705882353), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$211 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$211.resource;
            packet.writeId("constant_polyline_depthFailMaterial_polylineDash_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_polylineDash_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$212 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$212.resource;
                try (Using<PolylineMaterialCesiumWriter> using$213 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$213.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$214 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$214.resource;
                        try (Using<ColorCesiumWriter> using$215 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$215.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(179, 11, 60, 113));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0431372549019608, 0.235294117647059, 0.443137254901961, 0.701960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$216 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$216.resource;
            packet.writeId("constant_polyline_depthFailMaterial_polylineDash_gapColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_polylineDash_gapColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$217 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$217.resource;
                try (Using<PolylineMaterialCesiumWriter> using$218 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$218.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$219 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$219.resource;
                        try (Using<ColorCesiumWriter> using$220 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$220.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(240, 99, 5, 199));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.gapColor.getValue(date)).toEqualEpsilon(new Color(0.388235294117647, 0.0196078431372549, 0.780392156862745, 0.941176470588235), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$221 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$221.resource;
            packet.writeId("constant_polyline_depthFailMaterial_polylineGlow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_polylineGlow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$222 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$222.resource;
                try (Using<PolylineMaterialCesiumWriter> using$223 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$223.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$224 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$224.resource;
                        try (Using<ColorCesiumWriter> using$225 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$225.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(43, 187, 46, 104));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.733333333333333, 0.180392156862745, 0.407843137254902, 0.168627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$226 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$226.resource;
            packet.writeId("constant_polyline_depthFailMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_image_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$227 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$227.resource;
                try (Using<PolylineMaterialCesiumWriter> using$228 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$228.resource;
                    try (Using<ImageMaterialCesiumWriter> using$229 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$229.resource;
                        try (Using<ColorCesiumWriter> using$230 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$230.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(122, 208, 122, 65));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.815686274509804, 0.47843137254902, 0.254901960784314, 0.47843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$231 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$231.resource;
            packet.writeId("constant_polyline_depthFailMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_grid_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$232 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$232.resource;
                try (Using<PolylineMaterialCesiumWriter> using$233 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$233.resource;
                    try (Using<GridMaterialCesiumWriter> using$234 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$234.resource;
                        try (Using<ColorCesiumWriter> using$235 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$235.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(247, 63, 241, 7));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.945098039215686, 0.0274509803921569, 0.968627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$236 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$236.resource;
            packet.writeId("constant_polyline_depthFailMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$237 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$237.resource;
                try (Using<PolylineMaterialCesiumWriter> using$238 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$238.resource;
                    try (Using<StripeMaterialCesiumWriter> using$239 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$239.resource;
                        try (Using<ColorCesiumWriter> using$240 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$240.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(174, 132, 147, 157));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.517647058823529, 0.576470588235294, 0.615686274509804, 0.682352941176471), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$241 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$241.resource;
            packet.writeId("constant_polyline_depthFailMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$242 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$242.resource;
                try (Using<PolylineMaterialCesiumWriter> using$243 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$243.resource;
                    try (Using<StripeMaterialCesiumWriter> using$244 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$244.resource;
                        try (Using<ColorCesiumWriter> using$245 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$245.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(168, 85, 137, 113));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.333333333333333, 0.537254901960784, 0.443137254901961, 0.658823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$246 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$246.resource;
            packet.writeId("constant_polyline_depthFailMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$247 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$247.resource;
                try (Using<PolylineMaterialCesiumWriter> using$248 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$248.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$249 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$249.resource;
                        try (Using<ColorCesiumWriter> using$250 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$250.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(186, 37, 208, 29));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.145098039215686, 0.815686274509804, 0.113725490196078, 0.729411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$251 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$251.resource;
            packet.writeId("constant_polyline_depthFailMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polyline_depthFailMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$252 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$252.resource;
                try (Using<PolylineMaterialCesiumWriter> using$253 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$253.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$254 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$254.resource;
                        try (Using<ColorCesiumWriter> using$255 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$255.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(1, 24, 157, 114));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0941176470588235, 0.615686274509804, 0.447058823529412, 0.00392156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
    }

    private final void writeConstantValuesIndividualPolylineVolume() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_polylineVolume_positions_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_positions_cartographicRadians')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$1 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$1.resource;
                try (Using<PositionListCesiumWriter> using$2 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$2.resource;
                    w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.0883087457516627, 0.924587529983249, 8130.0),
                            new Cartographic(0.613491452287313, 1.45657735287148, 19697.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.0883087457516627, 0.924587529983249, 8130), Cartesian3.fromRadians(0.613491452287313, 1.45657735287148, 19697) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_polylineVolume_positions_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_positions_cartographicDegrees')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$4 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$4.resource;
                try (Using<PositionListCesiumWriter> using$5 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$5.resource;
                    w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(7.0, 43.0, 57136.0), new Cartographic(44.0, 37.0, 65346.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(7, 43, 57136), Cartesian3.fromDegrees(44, 37, 65346) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_polylineVolume_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_material_solidColor_color')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$7 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$7.resource;
                try (Using<MaterialCesiumWriter> using$8 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$8.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$9 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$9.resource;
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(164, 221, 33, 34));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(date)).toEqualEpsilon(new Color(0.866666666666667, 0.129411764705882, 0.133333333333333, 0.643137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("material_polylineVolume_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polylineVolume_material_image')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$12 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<ImageMaterialCesiumWriter> using$14 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$14.resource;
                        try (Using<UriCesiumWriter> using$15 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$15.resource;
                            m2.writeUri("http://example.com/25029", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.image.getValue(date).url).toEqual('http://example.com/25029');");
                        }
                        try (Using<RepeatCesiumWriter> using$16 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$16.resource;
                            m2.writeCartesian2(new Rectangular(16806.0, 36161.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(date)).toEqual(new Cartesian2(16806, 36161));");
                        }
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeRgba(ColorHelper.fromArgb(0, 29, 171, 22));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(date)).toEqual(Color.fromBytes(29, 171, 22, 0));");
                        }
                        try (Using<BooleanCesiumWriter> using$18 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$18.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$19 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$19.resource;
            packet.writeId("material_polylineVolume_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polylineVolume_material_grid')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$20 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$20.resource;
                try (Using<MaterialCesiumWriter> using$21 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$21.resource;
                    try (Using<GridMaterialCesiumWriter> using$22 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$22.resource;
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeRgba(ColorHelper.fromArgb(240, 180, 62, 202));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(date)).toEqual(Color.fromBytes(180, 62, 202, 240));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeNumber(58563.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.cellAlpha.getValue(date)).toEqual(58563.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$25 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$25.resource;
                            m2.writeCartesian2(new Rectangular(13158.0, 59443.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineCount.getValue(date)).toEqual(new Cartesian2(13158, 59443));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$26 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$26.resource;
                            m2.writeCartesian2(new Rectangular(11642.0, 8493.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineThickness.getValue(date)).toEqual(new Cartesian2(11642, 8493));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$27 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$27.resource;
                            m2.writeCartesian2(new Rectangular(2361.0, 14345.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineOffset.getValue(date)).toEqual(new Cartesian2(2361, 14345));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("material_polylineVolume_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polylineVolume_material_stripe')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$29 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<StripeMaterialCesiumWriter> using$31 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$31.resource;
                        try (Using<StripeOrientationCesiumWriter> using$32 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$32.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(ColorHelper.fromArgb(254, 100, 38, 210));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.evenColor.getValue(date)).toEqual(Color.fromBytes(100, 38, 210, 254));");
                        }
                        try (Using<ColorCesiumWriter> using$34 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$34.resource;
                            m2.writeRgba(ColorHelper.fromArgb(159, 27, 12, 194));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.oddColor.getValue(date)).toEqual(Color.fromBytes(27, 12, 194, 159));");
                        }
                        try (Using<DoubleCesiumWriter> using$35 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$35.resource;
                            m2.writeNumber(38819.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.offset.getValue(date)).toEqual(38819.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$36 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$36.resource;
                            m2.writeNumber(1822.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(date)).toEqual(1822.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$37 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$37.resource;
            packet.writeId("material_polylineVolume_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_polylineVolume_material_checkerboard')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$38 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$38.resource;
                try (Using<MaterialCesiumWriter> using$39 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$39.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$40 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$40.resource;
                        try (Using<ColorCesiumWriter> using$41 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$41.resource;
                            m2.writeRgba(ColorHelper.fromArgb(246, 146, 199, 90));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.evenColor.getValue(date)).toEqual(Color.fromBytes(146, 199, 90, 246));");
                        }
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgba(ColorHelper.fromArgb(60, 74, 232, 2));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.oddColor.getValue(date)).toEqual(Color.fromBytes(74, 232, 2, 60));");
                        }
                        try (Using<RepeatCesiumWriter> using$43 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$43.resource;
                            m2.writeCartesian2(new Rectangular(13666.0, 60213.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(date)).toEqual(new Cartesian2(13666, 60213));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$44 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$44.resource;
            packet.writeId("constant_polylineVolume_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_material_image_color')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$45 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$45.resource;
                try (Using<MaterialCesiumWriter> using$46 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$46.resource;
                    try (Using<ImageMaterialCesiumWriter> using$47 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$47.resource;
                        try (Using<ColorCesiumWriter> using$48 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$48.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(179, 113, 39, 118));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(date)).toEqualEpsilon(new Color(0.443137254901961, 0.152941176470588, 0.462745098039216, 0.701960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$49 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$49.resource;
            packet.writeId("constant_polylineVolume_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_material_grid_color')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$50 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$50.resource;
                try (Using<MaterialCesiumWriter> using$51 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$51.resource;
                    try (Using<GridMaterialCesiumWriter> using$52 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$52.resource;
                        try (Using<ColorCesiumWriter> using$53 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$53.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(28, 91, 193, 247));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(date)).toEqualEpsilon(new Color(0.356862745098039, 0.756862745098039, 0.968627450980392, 0.109803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$54 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$54.resource;
            packet.writeId("constant_polylineVolume_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_material_stripe_evenColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$55 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$55.resource;
                try (Using<MaterialCesiumWriter> using$56 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$56.resource;
                    try (Using<StripeMaterialCesiumWriter> using$57 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$57.resource;
                        try (Using<ColorCesiumWriter> using$58 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$58.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(68, 23, 108, 147));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0901960784313725, 0.423529411764706, 0.576470588235294, 0.266666666666667), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$59 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$59.resource;
            packet.writeId("constant_polylineVolume_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_material_stripe_oddColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$60 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$60.resource;
                try (Using<MaterialCesiumWriter> using$61 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$61.resource;
                    try (Using<StripeMaterialCesiumWriter> using$62 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$62.resource;
                        try (Using<ColorCesiumWriter> using$63 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$63.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(238, 174, 237, 86));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.682352941176471, 0.929411764705882, 0.337254901960784, 0.933333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$64 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$64.resource;
            packet.writeId("constant_polylineVolume_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$65 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$65.resource;
                try (Using<MaterialCesiumWriter> using$66 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$66.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$67 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$67.resource;
                        try (Using<ColorCesiumWriter> using$68 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$68.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(62, 218, 160, 86));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.854901960784314, 0.627450980392157, 0.337254901960784, 0.243137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$69 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$69.resource;
            packet.writeId("constant_polylineVolume_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$70 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$70.resource;
                try (Using<MaterialCesiumWriter> using$71 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$71.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$72 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$72.resource;
                        try (Using<ColorCesiumWriter> using$73 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$73.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(227, 215, 9, 129));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.843137254901961, 0.0352941176470588, 0.505882352941176, 0.890196078431372), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$74 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$74.resource;
            packet.writeId("constant_polylineVolume_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_polylineVolume_outlineColor_rgbaf')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$75 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$75.resource;
                try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$76.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(108, 140, 104, 119));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.549019607843137, 0.407843137254902, 0.466666666666667, 0.423529411764706), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualRectangle() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_rectangle_coordinates_wsenDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_coordinates_wsenDegrees')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$1 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$1.resource;
                try (Using<RectangleCoordinatesCesiumWriter> using$2 = new Using<RectangleCoordinatesCesiumWriter>(w.openCoordinatesProperty())) {
                    final RectangleCoordinatesCesiumWriter w2 = using$2.resource;
                    w2.writeWsenDegrees(new CartographicExtent(42.0, 22.0, 5.0, 35.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(date)).toEqual(Rectangle.fromDegrees(42, 22, 5, 35));");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_rectangle_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_material_solidColor_color')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$4 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$4.resource;
                try (Using<MaterialCesiumWriter> using$5 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$5.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$6 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$6.resource;
                        try (Using<ColorCesiumWriter> using$7 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$7.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(243, 229, 204, 231));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.898039215686275, 0.8, 0.905882352941176, 0.952941176470588), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("material_rectangle_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_image')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$9 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<ImageMaterialCesiumWriter> using$11 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$11.resource;
                        try (Using<UriCesiumWriter> using$12 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$12.resource;
                            m2.writeUri("http://example.com/18033", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.image.getValue(date).url).toEqual('http://example.com/18033');");
                        }
                        try (Using<RepeatCesiumWriter> using$13 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$13.resource;
                            m2.writeCartesian2(new Rectangular(41461.0, 31905.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(41461, 31905));");
                        }
                        try (Using<ColorCesiumWriter> using$14 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$14.resource;
                            m2.writeRgba(ColorHelper.fromArgb(125, 93, 203, 88));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(93, 203, 88, 125));");
                        }
                        try (Using<BooleanCesiumWriter> using$15 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$15.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$16 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$16.resource;
            packet.writeId("material_rectangle_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_grid')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$17 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$17.resource;
                try (Using<MaterialCesiumWriter> using$18 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$18.resource;
                    try (Using<GridMaterialCesiumWriter> using$19 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$19.resource;
                        try (Using<ColorCesiumWriter> using$20 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$20.resource;
                            m2.writeRgba(ColorHelper.fromArgb(83, 245, 105, 152));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(Color.fromBytes(245, 105, 152, 83));");
                        }
                        try (Using<DoubleCesiumWriter> using$21 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$21.resource;
                            m2.writeNumber(57393.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(57393.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$22 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(new Rectangular(4947.0, 4627.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(new Cartesian2(4947, 4627));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$23 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$23.resource;
                            m2.writeCartesian2(new Rectangular(37424.0, 19602.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(new Cartesian2(37424, 19602));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$24 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$24.resource;
                            m2.writeCartesian2(new Rectangular(43685.0, 31658.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(new Cartesian2(43685, 31658));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("material_rectangle_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_stripe')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$26 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$26.resource;
                try (Using<MaterialCesiumWriter> using$27 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$27.resource;
                    try (Using<StripeMaterialCesiumWriter> using$28 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$28.resource;
                        try (Using<StripeOrientationCesiumWriter> using$29 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$29.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeRgba(ColorHelper.fromArgb(2, 196, 12, 53));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(Color.fromBytes(196, 12, 53, 2));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeRgba(ColorHelper.fromArgb(72, 103, 243, 111));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(Color.fromBytes(103, 243, 111, 72));");
                        }
                        try (Using<DoubleCesiumWriter> using$32 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$32.resource;
                            m2.writeNumber(26578.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(date)).toEqual(26578.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$33 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$33.resource;
                            m2.writeNumber(52842.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(52842.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$34 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$34.resource;
            packet.writeId("material_rectangle_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangle_material_checkerboard')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$35 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$35.resource;
                try (Using<MaterialCesiumWriter> using$36 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$36.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$37 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$37.resource;
                        try (Using<ColorCesiumWriter> using$38 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$38.resource;
                            m2.writeRgba(ColorHelper.fromArgb(116, 210, 132, 163));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(Color.fromBytes(210, 132, 163, 116));");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgba(ColorHelper.fromArgb(14, 159, 4, 119));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(Color.fromBytes(159, 4, 119, 14));");
                        }
                        try (Using<RepeatCesiumWriter> using$40 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$40.resource;
                            m2.writeCartesian2(new Rectangular(27335.0, 51818.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(new Cartesian2(27335, 51818));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$41 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$41.resource;
            packet.writeId("constant_rectangle_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_material_image_color')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$42 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$42.resource;
                try (Using<MaterialCesiumWriter> using$43 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$43.resource;
                    try (Using<ImageMaterialCesiumWriter> using$44 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$44.resource;
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(247, 63, 127, 189));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.247058823529412, 0.498039215686275, 0.741176470588235, 0.968627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$46 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$46.resource;
            packet.writeId("constant_rectangle_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_material_grid_color')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$47 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$47.resource;
                try (Using<MaterialCesiumWriter> using$48 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$48.resource;
                    try (Using<GridMaterialCesiumWriter> using$49 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$49.resource;
                        try (Using<ColorCesiumWriter> using$50 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$50.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(214, 117, 16, 226));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(date)).toEqualEpsilon(new Color(0.458823529411765, 0.0627450980392157, 0.886274509803922, 0.83921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$51 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$51.resource;
            packet.writeId("constant_rectangle_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_material_stripe_evenColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$52 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$52.resource;
                try (Using<MaterialCesiumWriter> using$53 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$53.resource;
                    try (Using<StripeMaterialCesiumWriter> using$54 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$54.resource;
                        try (Using<ColorCesiumWriter> using$55 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$55.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(53, 147, 87, 156));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.576470588235294, 0.341176470588235, 0.611764705882353, 0.207843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$56 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$56.resource;
            packet.writeId("constant_rectangle_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_material_stripe_oddColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$57 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$57.resource;
                try (Using<MaterialCesiumWriter> using$58 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$58.resource;
                    try (Using<StripeMaterialCesiumWriter> using$59 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$59.resource;
                        try (Using<ColorCesiumWriter> using$60 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$60.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(5, 221, 242, 16));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.866666666666667, 0.949019607843137, 0.0627450980392157, 0.0196078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$61 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$61.resource;
            packet.writeId("constant_rectangle_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$62 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$62.resource;
                try (Using<MaterialCesiumWriter> using$63 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$63.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$64 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$64.resource;
                        try (Using<ColorCesiumWriter> using$65 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$65.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(185, 139, 165, 154));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.545098039215686, 0.647058823529412, 0.603921568627451, 0.725490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$66 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$66.resource;
            packet.writeId("constant_rectangle_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$67 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$67.resource;
                try (Using<MaterialCesiumWriter> using$68 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$68.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$69 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$69.resource;
                        try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$70.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(231, 58, 42, 158));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.227450980392157, 0.164705882352941, 0.619607843137255, 0.905882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$71 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$71.resource;
            packet.writeId("constant_rectangle_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangle_outlineColor_rgbaf')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$72 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$72.resource;
                try (Using<ColorCesiumWriter> using$73 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$73.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(53, 77, 9, 234));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.301960784313725, 0.0352941176470588, 0.917647058823529, 0.207843137254902), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualTileset() {}

    private final void writeConstantValuesIndividualWall() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_wall_positions_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_positions_cartographicRadians')).toBeDefined();");
            try (Using<WallCesiumWriter> using$1 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$1.resource;
                try (Using<PositionListCesiumWriter> using$2 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$2.resource;
                    w2.writeCartographicRadians(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(0.990822494752221, 0.11729920547879, 47975.0),
                            new Cartographic(1.22405890229697, 1.46292679641256, 13438.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromRadians(0.990822494752221, 0.11729920547879, 47975), Cartesian3.fromRadians(1.22405890229697, 1.46292679641256, 13438) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_wall_positions_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_positions_cartographicDegrees')).toBeDefined();");
            try (Using<WallCesiumWriter> using$4 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$4.resource;
                try (Using<PositionListCesiumWriter> using$5 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$5.resource;
                    w2.writeCartographicDegrees(TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(30.0, 24.0, 27738.0), new Cartographic(14.0, 41.0, 41667.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.positions.getValue(date)).toEqual([ Cartesian3.fromDegrees(30, 24, 27738), Cartesian3.fromDegrees(14, 41, 41667) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_wall_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_material_solidColor_color')).toBeDefined();");
            try (Using<WallCesiumWriter> using$7 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$7.resource;
                try (Using<MaterialCesiumWriter> using$8 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$8.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$9 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$9.resource;
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(128, 177, 81, 232));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.694117647058824, 0.317647058823529, 0.909803921568627, 0.501960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("material_wall_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_image')).toBeDefined();");
            try (Using<WallCesiumWriter> using$12 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<ImageMaterialCesiumWriter> using$14 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$14.resource;
                        try (Using<UriCesiumWriter> using$15 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$15.resource;
                            m2.writeUri("http://example.com/58529", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.image.getValue(date).url).toEqual('http://example.com/58529');");
                        }
                        try (Using<RepeatCesiumWriter> using$16 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$16.resource;
                            m2.writeCartesian2(new Rectangular(36340.0, 47245.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(36340, 47245));");
                        }
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeRgba(ColorHelper.fromArgb(38, 252, 63, 12));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(252, 63, 12, 38));");
                        }
                        try (Using<BooleanCesiumWriter> using$18 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$18.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$19 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$19.resource;
            packet.writeId("material_wall_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_grid')).toBeDefined();");
            try (Using<WallCesiumWriter> using$20 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$20.resource;
                try (Using<MaterialCesiumWriter> using$21 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$21.resource;
                    try (Using<GridMaterialCesiumWriter> using$22 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$22.resource;
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeRgba(ColorHelper.fromArgb(174, 38, 183, 237));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(Color.fromBytes(38, 183, 237, 174));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeNumber(59606.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(59606.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$25 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$25.resource;
                            m2.writeCartesian2(new Rectangular(3079.0, 31244.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(date)).toEqual(new Cartesian2(3079, 31244));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$26 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$26.resource;
                            m2.writeCartesian2(new Rectangular(32099.0, 44157.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineThickness.getValue(date)).toEqual(new Cartesian2(32099, 44157));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$27 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$27.resource;
                            m2.writeCartesian2(new Rectangular(13529.0, 1844.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(date)).toEqual(new Cartesian2(13529, 1844));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("material_wall_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_stripe')).toBeDefined();");
            try (Using<WallCesiumWriter> using$29 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<StripeMaterialCesiumWriter> using$31 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$31.resource;
                        try (Using<StripeOrientationCesiumWriter> using$32 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$32.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(ColorHelper.fromArgb(215, 202, 190, 37));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(date)).toEqual(Color.fromBytes(202, 190, 37, 215));");
                        }
                        try (Using<ColorCesiumWriter> using$34 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$34.resource;
                            m2.writeRgba(ColorHelper.fromArgb(38, 56, 107, 92));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(date)).toEqual(Color.fromBytes(56, 107, 92, 38));");
                        }
                        try (Using<DoubleCesiumWriter> using$35 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$35.resource;
                            m2.writeNumber(34142.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(date)).toEqual(34142.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$36 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$36.resource;
                            m2.writeNumber(33528.0);
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(date)).toEqual(33528.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$37 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$37.resource;
            packet.writeId("material_wall_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_wall_material_checkerboard')).toBeDefined();");
            try (Using<WallCesiumWriter> using$38 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$38.resource;
                try (Using<MaterialCesiumWriter> using$39 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$39.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$40 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$40.resource;
                        try (Using<ColorCesiumWriter> using$41 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$41.resource;
                            m2.writeRgba(ColorHelper.fromArgb(130, 187, 134, 139));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(date)).toEqual(Color.fromBytes(187, 134, 139, 130));");
                        }
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgba(ColorHelper.fromArgb(149, 177, 172, 79));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(date)).toEqual(Color.fromBytes(177, 172, 79, 149));");
                        }
                        try (Using<RepeatCesiumWriter> using$43 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$43.resource;
                            m2.writeCartesian2(new Rectangular(22341.0, 60503.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(date)).toEqual(new Cartesian2(22341, 60503));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$44 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$44.resource;
            packet.writeId("constant_wall_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_material_image_color')).toBeDefined();");
            try (Using<WallCesiumWriter> using$45 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$45.resource;
                try (Using<MaterialCesiumWriter> using$46 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$46.resource;
                    try (Using<ImageMaterialCesiumWriter> using$47 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$47.resource;
                        try (Using<ColorCesiumWriter> using$48 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$48.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(11, 89, 215, 74));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.349019607843137, 0.843137254901961, 0.290196078431373, 0.0431372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$49 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$49.resource;
            packet.writeId("constant_wall_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_material_grid_color')).toBeDefined();");
            try (Using<WallCesiumWriter> using$50 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$50.resource;
                try (Using<MaterialCesiumWriter> using$51 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$51.resource;
                    try (Using<GridMaterialCesiumWriter> using$52 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$52.resource;
                        try (Using<ColorCesiumWriter> using$53 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$53.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(118, 193, 253, 253));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(date)).toEqualEpsilon(new Color(0.756862745098039, 0.992156862745098, 0.992156862745098, 0.462745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$54 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$54.resource;
            packet.writeId("constant_wall_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_material_stripe_evenColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$55 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$55.resource;
                try (Using<MaterialCesiumWriter> using$56 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$56.resource;
                    try (Using<StripeMaterialCesiumWriter> using$57 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$57.resource;
                        try (Using<ColorCesiumWriter> using$58 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$58.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(160, 176, 54, 157));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.690196078431373, 0.211764705882353, 0.615686274509804, 0.627450980392157), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$59 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$59.resource;
            packet.writeId("constant_wall_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_material_stripe_oddColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$60 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$60.resource;
                try (Using<MaterialCesiumWriter> using$61 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$61.resource;
                    try (Using<StripeMaterialCesiumWriter> using$62 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$62.resource;
                        try (Using<ColorCesiumWriter> using$63 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$63.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(1, 247, 94, 56));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.968627450980392, 0.368627450980392, 0.219607843137255, 0.00392156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$64 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$64.resource;
            packet.writeId("constant_wall_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$65 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$65.resource;
                try (Using<MaterialCesiumWriter> using$66 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$66.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$67 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$67.resource;
                        try (Using<ColorCesiumWriter> using$68 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$68.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(139, 96, 101, 178));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.376470588235294, 0.396078431372549, 0.698039215686274, 0.545098039215686), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$69 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$69.resource;
            packet.writeId("constant_wall_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$70 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$70.resource;
                try (Using<MaterialCesiumWriter> using$71 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$71.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$72 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$72.resource;
                        try (Using<ColorCesiumWriter> using$73 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$73.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(134, 101, 5, 71));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.396078431372549, 0.0196078431372549, 0.27843137254902, 0.525490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$74 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$74.resource;
            packet.writeId("constant_wall_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_wall_outlineColor_rgbaf')).toBeDefined();");
            try (Using<WallCesiumWriter> using$75 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$75.resource;
                try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$76.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(207, 144, 173, 195));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.564705882352941, 0.67843137254902, 0.764705882352941, 0.811764705882353), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualConicSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_agi_conicSensor_intersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_conicSensor_intersectionColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$1 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(110, 244, 85, 164));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.956862745098039, 0.333333333333333, 0.643137254901961, 0.431372549019608), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_conicSensor_lateralSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_lateralSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$4 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$4.resource;
                try (Using<MaterialCesiumWriter> using$5 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$5.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$6 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$6.resource;
                        try (Using<ColorCesiumWriter> using$7 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$7.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(63, 177, 54, 94));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.694117647058824, 0.211764705882353, 0.368627450980392, 0.247058823529412), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("material_conicSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$9 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<ImageMaterialCesiumWriter> using$11 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$11.resource;
                        try (Using<UriCesiumWriter> using$12 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$12.resource;
                            m2.writeUri("http://example.com/21823", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/21823');");
                        }
                        try (Using<RepeatCesiumWriter> using$13 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$13.resource;
                            m2.writeCartesian2(new Rectangular(25181.0, 35938.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(25181, 35938));");
                        }
                        try (Using<ColorCesiumWriter> using$14 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$14.resource;
                            m2.writeRgba(ColorHelper.fromArgb(44, 67, 8, 98));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(67, 8, 98, 44));");
                        }
                        try (Using<BooleanCesiumWriter> using$15 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$15.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$16 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$16.resource;
            packet.writeId("material_conicSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$17 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$17.resource;
                try (Using<MaterialCesiumWriter> using$18 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$18.resource;
                    try (Using<GridMaterialCesiumWriter> using$19 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$19.resource;
                        try (Using<ColorCesiumWriter> using$20 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$20.resource;
                            m2.writeRgba(ColorHelper.fromArgb(35, 61, 0, 183));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(61, 0, 183, 35));");
                        }
                        try (Using<DoubleCesiumWriter> using$21 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$21.resource;
                            m2.writeNumber(51635.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(51635.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$22 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(new Rectangular(2156.0, 25864.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(2156, 25864));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$23 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$23.resource;
                            m2.writeCartesian2(new Rectangular(33546.0, 23683.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(33546, 23683));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$24 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$24.resource;
                            m2.writeCartesian2(new Rectangular(38184.0, 24725.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(38184, 24725));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("material_conicSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$26 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$26.resource;
                try (Using<MaterialCesiumWriter> using$27 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$27.resource;
                    try (Using<StripeMaterialCesiumWriter> using$28 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$28.resource;
                        try (Using<StripeOrientationCesiumWriter> using$29 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$29.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeRgba(ColorHelper.fromArgb(52, 15, 60, 203));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(15, 60, 203, 52));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeRgba(ColorHelper.fromArgb(18, 32, 223, 184));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(32, 223, 184, 18));");
                        }
                        try (Using<DoubleCesiumWriter> using$32 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$32.resource;
                            m2.writeNumber(5179.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(5179.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$33 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$33.resource;
                            m2.writeNumber(19988.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(19988.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$34 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$34.resource;
            packet.writeId("material_conicSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$35 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$35.resource;
                try (Using<MaterialCesiumWriter> using$36 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$36.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$37 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$37.resource;
                        try (Using<ColorCesiumWriter> using$38 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$38.resource;
                            m2.writeRgba(ColorHelper.fromArgb(115, 143, 14, 11));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(143, 14, 11, 115));");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgba(ColorHelper.fromArgb(237, 219, 175, 60));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(219, 175, 60, 237));");
                        }
                        try (Using<RepeatCesiumWriter> using$40 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$40.resource;
                            m2.writeCartesian2(new Rectangular(33167.0, 58753.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(33167, 58753));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$41 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$41.resource;
            packet.writeId("constant_conicSensor_lateralSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_lateralSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$42 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$42.resource;
                try (Using<MaterialCesiumWriter> using$43 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$43.resource;
                    try (Using<ImageMaterialCesiumWriter> using$44 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$44.resource;
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(130, 163, 154, 152));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.63921568627451, 0.603921568627451, 0.596078431372549, 0.509803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$46 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$46.resource;
            packet.writeId("constant_conicSensor_lateralSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_lateralSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$47 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$47.resource;
                try (Using<MaterialCesiumWriter> using$48 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$48.resource;
                    try (Using<GridMaterialCesiumWriter> using$49 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$49.resource;
                        try (Using<ColorCesiumWriter> using$50 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$50.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(20, 145, 33, 56));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.568627450980392, 0.129411764705882, 0.219607843137255, 0.0784313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$51 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$51.resource;
            packet.writeId("constant_conicSensor_lateralSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_lateralSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$52 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$52.resource;
                try (Using<MaterialCesiumWriter> using$53 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$53.resource;
                    try (Using<StripeMaterialCesiumWriter> using$54 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$54.resource;
                        try (Using<ColorCesiumWriter> using$55 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$55.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(180, 113, 127, 152));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.443137254901961, 0.498039215686275, 0.596078431372549, 0.705882352941177), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$56 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$56.resource;
            packet.writeId("constant_conicSensor_lateralSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_lateralSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$57 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$57.resource;
                try (Using<MaterialCesiumWriter> using$58 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$58.resource;
                    try (Using<StripeMaterialCesiumWriter> using$59 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$59.resource;
                        try (Using<ColorCesiumWriter> using$60 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$60.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(145, 32, 115, 155));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.125490196078431, 0.450980392156863, 0.607843137254902, 0.568627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$61 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$61.resource;
            packet.writeId("constant_conicSensor_lateralSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_lateralSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$62 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$62.resource;
                try (Using<MaterialCesiumWriter> using$63 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$63.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$64 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$64.resource;
                        try (Using<ColorCesiumWriter> using$65 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$65.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(242, 8, 25, 205));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0313725490196078, 0.0980392156862745, 0.803921568627451, 0.949019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$66 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$66.resource;
            packet.writeId("constant_conicSensor_lateralSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_lateralSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$67 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$67.resource;
                try (Using<MaterialCesiumWriter> using$68 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$68.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$69 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$69.resource;
                        try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$70.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(35, 212, 99, 33));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.831372549019608, 0.388235294117647, 0.129411764705882, 0.137254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$71 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$71.resource;
            packet.writeId("constant_conicSensor_ellipsoidSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$72 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$72.resource;
                try (Using<MaterialCesiumWriter> using$73 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$73.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$74 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$74.resource;
                        try (Using<ColorCesiumWriter> using$75 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$75.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(201, 19, 61, 92));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0745098039215686, 0.23921568627451, 0.36078431372549, 0.788235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$76 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$76.resource;
            packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$77 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$77.resource;
                try (Using<MaterialCesiumWriter> using$78 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$78.resource;
                    try (Using<ImageMaterialCesiumWriter> using$79 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$79.resource;
                        try (Using<UriCesiumWriter> using$80 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$80.resource;
                            m2.writeUri("http://example.com/3660", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/3660');");
                        }
                        try (Using<RepeatCesiumWriter> using$81 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$81.resource;
                            m2.writeCartesian2(new Rectangular(21421.0, 10579.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(21421, 10579));");
                        }
                        try (Using<ColorCesiumWriter> using$82 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$82.resource;
                            m2.writeRgba(ColorHelper.fromArgb(126, 6, 107, 206));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(6, 107, 206, 126));");
                        }
                        try (Using<BooleanCesiumWriter> using$83 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$83.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$84 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$84.resource;
            packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$85 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$85.resource;
                try (Using<MaterialCesiumWriter> using$86 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$86.resource;
                    try (Using<GridMaterialCesiumWriter> using$87 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$87.resource;
                        try (Using<ColorCesiumWriter> using$88 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$88.resource;
                            m2.writeRgba(ColorHelper.fromArgb(61, 4, 151, 187));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(4, 151, 187, 61));");
                        }
                        try (Using<DoubleCesiumWriter> using$89 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$89.resource;
                            m2.writeNumber(59779.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(59779.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$90 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$90.resource;
                            m2.writeCartesian2(new Rectangular(10702.0, 63785.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(10702, 63785));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$91 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$91.resource;
                            m2.writeCartesian2(new Rectangular(38065.0, 47764.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(38065, 47764));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$92 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$92.resource;
                            m2.writeCartesian2(new Rectangular(49821.0, 31938.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(49821, 31938));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$93 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$93.resource;
            packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$94 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$94.resource;
                try (Using<MaterialCesiumWriter> using$95 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$95.resource;
                    try (Using<StripeMaterialCesiumWriter> using$96 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$96.resource;
                        try (Using<StripeOrientationCesiumWriter> using$97 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$97.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$98 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$98.resource;
                            m2.writeRgba(ColorHelper.fromArgb(5, 86, 123, 192));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(86, 123, 192, 5));");
                        }
                        try (Using<ColorCesiumWriter> using$99 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$99.resource;
                            m2.writeRgba(ColorHelper.fromArgb(191, 7, 238, 130));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(7, 238, 130, 191));");
                        }
                        try (Using<DoubleCesiumWriter> using$100 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$100.resource;
                            m2.writeNumber(4651.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(4651.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$101 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$101.resource;
                            m2.writeNumber(23937.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(23937.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$102 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$102.resource;
            packet.writeId("material_conicSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$103 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$103.resource;
                try (Using<MaterialCesiumWriter> using$104 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$104.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$105 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$105.resource;
                        try (Using<ColorCesiumWriter> using$106 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$106.resource;
                            m2.writeRgba(ColorHelper.fromArgb(245, 103, 129, 36));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(103, 129, 36, 245));");
                        }
                        try (Using<ColorCesiumWriter> using$107 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$107.resource;
                            m2.writeRgba(ColorHelper.fromArgb(45, 125, 17, 186));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(125, 17, 186, 45));");
                        }
                        try (Using<RepeatCesiumWriter> using$108 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$108.resource;
                            m2.writeCartesian2(new Rectangular(56863.0, 31454.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(56863, 31454));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$109 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$109.resource;
            packet.writeId("constant_conicSensor_ellipsoidSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$110 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$110.resource;
                try (Using<MaterialCesiumWriter> using$111 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$111.resource;
                    try (Using<ImageMaterialCesiumWriter> using$112 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$112.resource;
                        try (Using<ColorCesiumWriter> using$113 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$113.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(2, 165, 125, 179));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.647058823529412, 0.490196078431373, 0.701960784313725, 0.00784313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$114 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$114.resource;
            packet.writeId("constant_conicSensor_ellipsoidSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$115 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$115.resource;
                try (Using<MaterialCesiumWriter> using$116 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$116.resource;
                    try (Using<GridMaterialCesiumWriter> using$117 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$117.resource;
                        try (Using<ColorCesiumWriter> using$118 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$118.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(32, 36, 78, 37));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.141176470588235, 0.305882352941176, 0.145098039215686, 0.125490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$119 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$119.resource;
            packet.writeId("constant_conicSensor_ellipsoidSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$120 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$120.resource;
                try (Using<MaterialCesiumWriter> using$121 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$121.resource;
                    try (Using<StripeMaterialCesiumWriter> using$122 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$122.resource;
                        try (Using<ColorCesiumWriter> using$123 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$123.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(176, 45, 224, 35));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.176470588235294, 0.87843137254902, 0.137254901960784, 0.690196078431373), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$124 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$124.resource;
            packet.writeId("constant_conicSensor_ellipsoidSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$125 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$125.resource;
                try (Using<MaterialCesiumWriter> using$126 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$126.resource;
                    try (Using<StripeMaterialCesiumWriter> using$127 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$127.resource;
                        try (Using<ColorCesiumWriter> using$128 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$128.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(219, 116, 158, 29));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.454901960784314, 0.619607843137255, 0.113725490196078, 0.858823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$129 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$129.resource;
            packet.writeId("constant_conicSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$130 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$130.resource;
                try (Using<MaterialCesiumWriter> using$131 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$131.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$132 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$132.resource;
                        try (Using<ColorCesiumWriter> using$133 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$133.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(28, 74, 119, 138));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.290196078431373, 0.466666666666667, 0.541176470588235, 0.109803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$134 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$134.resource;
            packet.writeId("constant_conicSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$135 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$135.resource;
                try (Using<MaterialCesiumWriter> using$136 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$136.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$137 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$137.resource;
                        try (Using<ColorCesiumWriter> using$138 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$138.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(161, 196, 154, 218));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.768627450980392, 0.603921568627451, 0.854901960784314, 0.631372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$139 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$139.resource;
            packet.writeId("constant_conicSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$140 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$140.resource;
                try (Using<MaterialCesiumWriter> using$141 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$141.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$142 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$142.resource;
                        try (Using<ColorCesiumWriter> using$143 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$143.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(76, 35, 231, 211));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.137254901960784, 0.905882352941176, 0.827450980392157, 0.298039215686275), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$144 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$144.resource;
            packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$145 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$145.resource;
                try (Using<MaterialCesiumWriter> using$146 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$146.resource;
                    try (Using<ImageMaterialCesiumWriter> using$147 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$147.resource;
                        try (Using<UriCesiumWriter> using$148 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$148.resource;
                            m2.writeUri("http://example.com/42334", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/42334');");
                        }
                        try (Using<RepeatCesiumWriter> using$149 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$149.resource;
                            m2.writeCartesian2(new Rectangular(35010.0, 3208.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(35010, 3208));");
                        }
                        try (Using<ColorCesiumWriter> using$150 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$150.resource;
                            m2.writeRgba(ColorHelper.fromArgb(175, 139, 142, 32));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(139, 142, 32, 175));");
                        }
                        try (Using<BooleanCesiumWriter> using$151 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$151.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$152 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$152.resource;
            packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$153 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$153.resource;
                try (Using<MaterialCesiumWriter> using$154 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$154.resource;
                    try (Using<GridMaterialCesiumWriter> using$155 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$155.resource;
                        try (Using<ColorCesiumWriter> using$156 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$156.resource;
                            m2.writeRgba(ColorHelper.fromArgb(34, 13, 160, 236));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(13, 160, 236, 34));");
                        }
                        try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$157.resource;
                            m2.writeNumber(16915.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(16915.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$158 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$158.resource;
                            m2.writeCartesian2(new Rectangular(55175.0, 19927.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(55175, 19927));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$159 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$159.resource;
                            m2.writeCartesian2(new Rectangular(19695.0, 1356.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(19695, 1356));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$160 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$160.resource;
                            m2.writeCartesian2(new Rectangular(20937.0, 31057.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(20937, 31057));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$161 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$161.resource;
            packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$162 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$162.resource;
                try (Using<MaterialCesiumWriter> using$163 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$163.resource;
                    try (Using<StripeMaterialCesiumWriter> using$164 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$164.resource;
                        try (Using<StripeOrientationCesiumWriter> using$165 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$165.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$166 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$166.resource;
                            m2.writeRgba(ColorHelper.fromArgb(25, 55, 198, 189));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(55, 198, 189, 25));");
                        }
                        try (Using<ColorCesiumWriter> using$167 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$167.resource;
                            m2.writeRgba(ColorHelper.fromArgb(198, 228, 141, 11));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(228, 141, 11, 198));");
                        }
                        try (Using<DoubleCesiumWriter> using$168 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$168.resource;
                            m2.writeNumber(5749.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(5749.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$169 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$169.resource;
                            m2.writeNumber(65092.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(65092.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$170 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$170.resource;
            packet.writeId("material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$171 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$171.resource;
                try (Using<MaterialCesiumWriter> using$172 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$172.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$173 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$173.resource;
                        try (Using<ColorCesiumWriter> using$174 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$174.resource;
                            m2.writeRgba(ColorHelper.fromArgb(64, 184, 26, 104));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(184, 26, 104, 64));");
                        }
                        try (Using<ColorCesiumWriter> using$175 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$175.resource;
                            m2.writeRgba(ColorHelper.fromArgb(170, 5, 165, 153));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(5, 165, 153, 170));");
                        }
                        try (Using<RepeatCesiumWriter> using$176 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$176.resource;
                            m2.writeCartesian2(new Rectangular(25804.0, 5220.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(25804, 5220));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$177 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$177.resource;
            packet.writeId("constant_conicSensor_ellipsoidHorizonSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidHorizonSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$178 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$178.resource;
                try (Using<MaterialCesiumWriter> using$179 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$179.resource;
                    try (Using<ImageMaterialCesiumWriter> using$180 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$180.resource;
                        try (Using<ColorCesiumWriter> using$181 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$181.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(216, 89, 191, 64));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.349019607843137, 0.749019607843137, 0.250980392156863, 0.847058823529412), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$182 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$182.resource;
            packet.writeId("constant_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$183 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$183.resource;
                try (Using<MaterialCesiumWriter> using$184 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$184.resource;
                    try (Using<GridMaterialCesiumWriter> using$185 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$185.resource;
                        try (Using<ColorCesiumWriter> using$186 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$186.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(220, 49, 30, 36));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.192156862745098, 0.117647058823529, 0.141176470588235, 0.862745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$187 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$187.resource;
            packet.writeId("constant_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$188 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$188.resource;
                try (Using<MaterialCesiumWriter> using$189 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$189.resource;
                    try (Using<StripeMaterialCesiumWriter> using$190 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$190.resource;
                        try (Using<ColorCesiumWriter> using$191 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$191.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(29, 225, 175, 199));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.686274509803922, 0.780392156862745, 0.113725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$192 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$192.resource;
            packet.writeId("constant_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$193 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$193.resource;
                try (Using<MaterialCesiumWriter> using$194 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$194.resource;
                    try (Using<StripeMaterialCesiumWriter> using$195 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$195.resource;
                        try (Using<ColorCesiumWriter> using$196 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$196.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(85, 100, 220, 216));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.392156862745098, 0.862745098039216, 0.847058823529412, 0.333333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$197 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$197.resource;
            packet.writeId("constant_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$198 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$198.resource;
                try (Using<MaterialCesiumWriter> using$199 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$199.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$200 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$200.resource;
                        try (Using<ColorCesiumWriter> using$201 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$201.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(84, 61, 156, 74));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.23921568627451, 0.611764705882353, 0.290196078431373, 0.329411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$202 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$202.resource;
            packet.writeId("constant_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$203 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$203.resource;
                try (Using<MaterialCesiumWriter> using$204 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$204.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$205 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$205.resource;
                        try (Using<ColorCesiumWriter> using$206 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$206.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(118, 162, 13, 109));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.635294117647059, 0.0509803921568627, 0.427450980392157, 0.462745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$207 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$207.resource;
            packet.writeId("constant_conicSensor_domeSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_domeSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$208 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$208.resource;
                try (Using<MaterialCesiumWriter> using$209 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$209.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$210 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$210.resource;
                        try (Using<ColorCesiumWriter> using$211 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$211.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(80, 28, 236, 46));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.109803921568627, 0.925490196078431, 0.180392156862745, 0.313725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$212 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$212.resource;
            packet.writeId("material_conicSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$213 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$213.resource;
                try (Using<MaterialCesiumWriter> using$214 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$214.resource;
                    try (Using<ImageMaterialCesiumWriter> using$215 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$215.resource;
                        try (Using<UriCesiumWriter> using$216 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$216.resource;
                            m2.writeUri("http://example.com/32043", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/32043');");
                        }
                        try (Using<RepeatCesiumWriter> using$217 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$217.resource;
                            m2.writeCartesian2(new Rectangular(47952.0, 25019.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(47952, 25019));");
                        }
                        try (Using<ColorCesiumWriter> using$218 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$218.resource;
                            m2.writeRgba(ColorHelper.fromArgb(93, 116, 1, 117));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(116, 1, 117, 93));");
                        }
                        try (Using<BooleanCesiumWriter> using$219 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$219.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$220 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$220.resource;
            packet.writeId("material_conicSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$221 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$221.resource;
                try (Using<MaterialCesiumWriter> using$222 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$222.resource;
                    try (Using<GridMaterialCesiumWriter> using$223 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$223.resource;
                        try (Using<ColorCesiumWriter> using$224 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$224.resource;
                            m2.writeRgba(ColorHelper.fromArgb(143, 85, 86, 101));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(85, 86, 101, 143));");
                        }
                        try (Using<DoubleCesiumWriter> using$225 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$225.resource;
                            m2.writeNumber(15766.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(15766.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$226 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$226.resource;
                            m2.writeCartesian2(new Rectangular(60249.0, 20459.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(60249, 20459));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$227 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$227.resource;
                            m2.writeCartesian2(new Rectangular(14212.0, 1847.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(14212, 1847));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$228 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$228.resource;
                            m2.writeCartesian2(new Rectangular(47595.0, 2489.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(47595, 2489));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$229 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$229.resource;
            packet.writeId("material_conicSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$230 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$230.resource;
                try (Using<MaterialCesiumWriter> using$231 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$231.resource;
                    try (Using<StripeMaterialCesiumWriter> using$232 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$232.resource;
                        try (Using<StripeOrientationCesiumWriter> using$233 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$233.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$234 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$234.resource;
                            m2.writeRgba(ColorHelper.fromArgb(77, 99, 63, 25));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(99, 63, 25, 77));");
                        }
                        try (Using<ColorCesiumWriter> using$235 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$235.resource;
                            m2.writeRgba(ColorHelper.fromArgb(70, 196, 159, 121));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(196, 159, 121, 70));");
                        }
                        try (Using<DoubleCesiumWriter> using$236 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$236.resource;
                            m2.writeNumber(3098.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(3098.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$237 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$237.resource;
                            m2.writeNumber(62080.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(62080.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$238 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$238.resource;
            packet.writeId("material_conicSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$239 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$239.resource;
                try (Using<MaterialCesiumWriter> using$240 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$240.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$241 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$241.resource;
                        try (Using<ColorCesiumWriter> using$242 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$242.resource;
                            m2.writeRgba(ColorHelper.fromArgb(17, 82, 4, 132));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(82, 4, 132, 17));");
                        }
                        try (Using<ColorCesiumWriter> using$243 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$243.resource;
                            m2.writeRgba(ColorHelper.fromArgb(253, 224, 212, 71));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(224, 212, 71, 253));");
                        }
                        try (Using<RepeatCesiumWriter> using$244 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$244.resource;
                            m2.writeCartesian2(new Rectangular(24608.0, 33120.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(24608, 33120));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$245 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$245.resource;
            packet.writeId("constant_conicSensor_domeSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_domeSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$246 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$246.resource;
                try (Using<MaterialCesiumWriter> using$247 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$247.resource;
                    try (Using<ImageMaterialCesiumWriter> using$248 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$248.resource;
                        try (Using<ColorCesiumWriter> using$249 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$249.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(3, 149, 48, 150));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.584313725490196, 0.188235294117647, 0.588235294117647, 0.0117647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$250 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$250.resource;
            packet.writeId("constant_conicSensor_domeSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_domeSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$251 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$251.resource;
                try (Using<MaterialCesiumWriter> using$252 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$252.resource;
                    try (Using<GridMaterialCesiumWriter> using$253 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$253.resource;
                        try (Using<ColorCesiumWriter> using$254 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$254.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(205, 61, 127, 105));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.23921568627451, 0.498039215686275, 0.411764705882353, 0.803921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$255 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$255.resource;
            packet.writeId("constant_conicSensor_domeSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_domeSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$256 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$256.resource;
                try (Using<MaterialCesiumWriter> using$257 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$257.resource;
                    try (Using<StripeMaterialCesiumWriter> using$258 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$258.resource;
                        try (Using<ColorCesiumWriter> using$259 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$259.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(249, 132, 53, 121));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.517647058823529, 0.207843137254902, 0.474509803921569, 0.976470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$260 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$260.resource;
            packet.writeId("constant_conicSensor_domeSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_domeSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$261 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$261.resource;
                try (Using<MaterialCesiumWriter> using$262 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$262.resource;
                    try (Using<StripeMaterialCesiumWriter> using$263 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$263.resource;
                        try (Using<ColorCesiumWriter> using$264 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$264.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(166, 225, 57, 240));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.223529411764706, 0.941176470588235, 0.650980392156863), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$265 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$265.resource;
            packet.writeId("constant_conicSensor_domeSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_domeSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$266 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$266.resource;
                try (Using<MaterialCesiumWriter> using$267 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$267.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$268 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$268.resource;
                        try (Using<ColorCesiumWriter> using$269 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$269.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(52, 198, 85, 231));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.776470588235294, 0.333333333333333, 0.905882352941176, 0.203921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$270 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$270.resource;
            packet.writeId("constant_conicSensor_domeSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_domeSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$271 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$271.resource;
                try (Using<MaterialCesiumWriter> using$272 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$272.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$273 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$273.resource;
                        try (Using<ColorCesiumWriter> using$274 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$274.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(201, 16, 114, 100));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0627450980392157, 0.447058823529412, 0.392156862745098, 0.788235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$275 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$275.resource;
            packet.writeId("constant_conicSensor_environmentOcclusionMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_environmentOcclusionMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$276 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$276.resource;
                try (Using<MaterialCesiumWriter> using$277 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$277.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$278 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$278.resource;
                        try (Using<ColorCesiumWriter> using$279 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$279.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(3, 131, 45, 215));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.513725490196078, 0.176470588235294, 0.843137254901961, 0.0117647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$280 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$280.resource;
            packet.writeId("material_conicSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$281 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$281.resource;
                try (Using<MaterialCesiumWriter> using$282 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$282.resource;
                    try (Using<ImageMaterialCesiumWriter> using$283 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$283.resource;
                        try (Using<UriCesiumWriter> using$284 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$284.resource;
                            m2.writeUri("http://example.com/37360", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date).url).toEqual('http://example.com/37360');");
                        }
                        try (Using<RepeatCesiumWriter> using$285 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$285.resource;
                            m2.writeCartesian2(new Rectangular(9889.0, 48166.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(9889, 48166));");
                        }
                        try (Using<ColorCesiumWriter> using$286 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$286.resource;
                            m2.writeRgba(ColorHelper.fromArgb(175, 154, 113, 32));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(154, 113, 32, 175));");
                        }
                        try (Using<BooleanCesiumWriter> using$287 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$287.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$288 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$288.resource;
            packet.writeId("material_conicSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$289 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$289.resource;
                try (Using<MaterialCesiumWriter> using$290 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$290.resource;
                    try (Using<GridMaterialCesiumWriter> using$291 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$291.resource;
                        try (Using<ColorCesiumWriter> using$292 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$292.resource;
                            m2.writeRgba(ColorHelper.fromArgb(205, 133, 84, 224));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(133, 84, 224, 205));");
                        }
                        try (Using<DoubleCesiumWriter> using$293 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$293.resource;
                            m2.writeNumber(34722.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(34722.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$294 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$294.resource;
                            m2.writeCartesian2(new Rectangular(3975.0, 47375.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(3975, 47375));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$295 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$295.resource;
                            m2.writeCartesian2(new Rectangular(39364.0, 37529.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(39364, 37529));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$296 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$296.resource;
                            m2.writeCartesian2(new Rectangular(3660.0, 28430.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(3660, 28430));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$297 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$297.resource;
            packet.writeId("material_conicSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$298 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$298.resource;
                try (Using<MaterialCesiumWriter> using$299 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$299.resource;
                    try (Using<StripeMaterialCesiumWriter> using$300 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$300.resource;
                        try (Using<StripeOrientationCesiumWriter> using$301 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$301.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$302 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$302.resource;
                            m2.writeRgba(ColorHelper.fromArgb(22, 63, 231, 182));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(63, 231, 182, 22));");
                        }
                        try (Using<ColorCesiumWriter> using$303 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$303.resource;
                            m2.writeRgba(ColorHelper.fromArgb(90, 145, 64, 200));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(145, 64, 200, 90));");
                        }
                        try (Using<DoubleCesiumWriter> using$304 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$304.resource;
                            m2.writeNumber(30686.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(30686.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$305 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$305.resource;
                            m2.writeNumber(53567.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(53567.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$306 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$306.resource;
            packet.writeId("material_conicSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$307 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$307.resource;
                try (Using<MaterialCesiumWriter> using$308 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$308.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$309 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$309.resource;
                        try (Using<ColorCesiumWriter> using$310 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$310.resource;
                            m2.writeRgba(ColorHelper.fromArgb(224, 158, 112, 6));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(158, 112, 6, 224));");
                        }
                        try (Using<ColorCesiumWriter> using$311 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$311.resource;
                            m2.writeRgba(ColorHelper.fromArgb(238, 176, 40, 146));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(176, 40, 146, 238));");
                        }
                        try (Using<RepeatCesiumWriter> using$312 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$312.resource;
                            m2.writeCartesian2(new Rectangular(29879.0, 39796.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(29879, 39796));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$313 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$313.resource;
            packet.writeId("constant_conicSensor_environmentOcclusionMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_environmentOcclusionMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$314 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$314.resource;
                try (Using<MaterialCesiumWriter> using$315 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$315.resource;
                    try (Using<ImageMaterialCesiumWriter> using$316 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$316.resource;
                        try (Using<ColorCesiumWriter> using$317 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$317.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(39, 225, 242, 122));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.949019607843137, 0.47843137254902, 0.152941176470588), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$318 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$318.resource;
            packet.writeId("constant_conicSensor_environmentOcclusionMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_environmentOcclusionMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$319 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$319.resource;
                try (Using<MaterialCesiumWriter> using$320 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$320.resource;
                    try (Using<GridMaterialCesiumWriter> using$321 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$321.resource;
                        try (Using<ColorCesiumWriter> using$322 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$322.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(241, 123, 14, 65));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.482352941176471, 0.0549019607843137, 0.254901960784314, 0.945098039215686), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$323 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$323.resource;
            packet.writeId("constant_conicSensor_environmentOcclusionMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_environmentOcclusionMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$324 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$324.resource;
                try (Using<MaterialCesiumWriter> using$325 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$325.resource;
                    try (Using<StripeMaterialCesiumWriter> using$326 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$326.resource;
                        try (Using<ColorCesiumWriter> using$327 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$327.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(62, 18, 67, 214));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0705882352941176, 0.262745098039216, 0.83921568627451, 0.243137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$328 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$328.resource;
            packet.writeId("constant_conicSensor_environmentOcclusionMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_environmentOcclusionMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$329 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$329.resource;
                try (Using<MaterialCesiumWriter> using$330 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$330.resource;
                    try (Using<StripeMaterialCesiumWriter> using$331 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$331.resource;
                        try (Using<ColorCesiumWriter> using$332 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$332.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(151, 20, 139, 134));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0784313725490196, 0.545098039215686, 0.525490196078431, 0.592156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$333 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$333.resource;
            packet.writeId("constant_conicSensor_environmentOcclusionMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_environmentOcclusionMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$334 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$334.resource;
                try (Using<MaterialCesiumWriter> using$335 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$335.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$336 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$336.resource;
                        try (Using<ColorCesiumWriter> using$337 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$337.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(9, 162, 152, 88));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.635294117647059, 0.596078431372549, 0.345098039215686, 0.0352941176470588), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$338 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$338.resource;
            packet.writeId("constant_conicSensor_environmentOcclusionMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_conicSensor_environmentOcclusionMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$339 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$339.resource;
                try (Using<MaterialCesiumWriter> using$340 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$340.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$341 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$341.resource;
                        try (Using<ColorCesiumWriter> using$342 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$342.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(169, 67, 76, 148));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.262745098039216, 0.298039215686275, 0.580392156862745, 0.662745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$343 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$343.resource;
            packet.writeId("constant_agi_conicSensor_environmentIntersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_conicSensor_environmentIntersectionColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$344 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$344.resource;
                try (Using<ColorCesiumWriter> using$345 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$345.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(99, 239, 130, 60));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.937254901960784, 0.509803921568627, 0.235294117647059, 0.388235294117647), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$346 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$346.resource;
            packet.writeId("constant_agi_conicSensor_viewshedVisibleColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_conicSensor_viewshedVisibleColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$347 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$347.resource;
                try (Using<ColorCesiumWriter> using$348 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$348.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(52, 140, 60, 88));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedVisibleColor.getValue(date)).toEqualEpsilon(new Color(0.549019607843137, 0.235294117647059, 0.345098039215686, 0.203921568627451), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$349 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$349.resource;
            packet.writeId("constant_agi_conicSensor_viewshedOccludedColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_conicSensor_viewshedOccludedColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$350 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$350.resource;
                try (Using<ColorCesiumWriter> using$351 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$351.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(2, 243, 98, 227));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedOccludedColor.getValue(date)).toEqualEpsilon(new Color(0.952941176470588, 0.384313725490196, 0.890196078431372, 0.00784313725490196), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualCustomPatternSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_agi_customPatternSensor_directions_unitSpherical");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_customPatternSensor_directions_unitSpherical')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$1 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$1.resource;
                try (Using<DirectionListCesiumWriter> using$2 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$2.resource;
                    w2.writeUnitSpherical(TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(47421.0, 31161.0), new UnitSpherical(31609.0, 11387.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ new Spherical(47421, 31161), new Spherical(31609, 11387) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_agi_customPatternSensor_directions_cartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_customPatternSensor_directions_cartesian')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$4 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$4.resource;
                try (Using<DirectionListCesiumWriter> using$5 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$5.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(22239.0, 54614.0, 35029.0), new Cartesian(5768.0, 61974.0, 38386.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(22239, 54614, 35029)), Spherical.fromCartesian3(new Cartesian3(5768, 61974, 38386)) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_agi_customPatternSensor_directions_unitCartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_customPatternSensor_directions_unitCartesian')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$7 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$7.resource;
                try (Using<DirectionListCesiumWriter> using$8 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$8.resource;
                    w2.writeUnitCartesian(TestGenerateValidationDocument.<UnitCartesian> createList(new UnitCartesian(0.487826110219005, 0.870820071510947, 0.0608119169428565),
                            new UnitCartesian(0.532391171359761, 0.837660156389704, 0.122004520634927)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.487826110219005, 0.870820071510947, 0.0608119169428565)), Spherical.fromCartesian3(new Cartesian3(0.532391171359761, 0.837660156389704, 0.122004520634927)) ], 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$9 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$9.resource;
            packet.writeId("constant_agi_customPatternSensor_intersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_customPatternSensor_intersectionColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$10 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$10.resource;
                try (Using<ColorCesiumWriter> using$11 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$11.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(242, 133, 95, 76));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.52156862745098, 0.372549019607843, 0.298039215686275, 0.949019607843137), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("constant_customPatternSensor_lateralSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_lateralSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$13 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$13.resource;
                try (Using<MaterialCesiumWriter> using$14 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$14.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$15 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$15.resource;
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(226, 238, 202, 37));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.933333333333333, 0.792156862745098, 0.145098039215686, 0.886274509803922), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$18 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<ImageMaterialCesiumWriter> using$20 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$20.resource;
                        try (Using<UriCesiumWriter> using$21 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$21.resource;
                            m2.writeUri("http://example.com/43097", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/43097');");
                        }
                        try (Using<RepeatCesiumWriter> using$22 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(new Rectangular(52089.0, 65227.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(52089, 65227));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeRgba(ColorHelper.fromArgb(17, 43, 75, 177));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(43, 75, 177, 17));");
                        }
                        try (Using<BooleanCesiumWriter> using$24 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$24.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$26 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$26.resource;
                try (Using<MaterialCesiumWriter> using$27 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$27.resource;
                    try (Using<GridMaterialCesiumWriter> using$28 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$28.resource;
                        try (Using<ColorCesiumWriter> using$29 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$29.resource;
                            m2.writeRgba(ColorHelper.fromArgb(220, 31, 237, 211));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(31, 237, 211, 220));");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(54409.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(54409.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$31 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$31.resource;
                            m2.writeCartesian2(new Rectangular(60604.0, 52716.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(60604, 52716));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$32 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$32.resource;
                            m2.writeCartesian2(new Rectangular(35445.0, 54154.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(35445, 54154));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$33 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$33.resource;
                            m2.writeCartesian2(new Rectangular(60273.0, 55787.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(60273, 55787));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$34 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$34.resource;
            packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$35 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$35.resource;
                try (Using<MaterialCesiumWriter> using$36 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$36.resource;
                    try (Using<StripeMaterialCesiumWriter> using$37 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$37.resource;
                        try (Using<StripeOrientationCesiumWriter> using$38 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$38.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgba(ColorHelper.fromArgb(95, 126, 117, 233));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(126, 117, 233, 95));");
                        }
                        try (Using<ColorCesiumWriter> using$40 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$40.resource;
                            m2.writeRgba(ColorHelper.fromArgb(65, 156, 140, 249));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(156, 140, 249, 65));");
                        }
                        try (Using<DoubleCesiumWriter> using$41 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$41.resource;
                            m2.writeNumber(63167.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(63167.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$42 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$42.resource;
                            m2.writeNumber(18519.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(18519.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("material_customPatternSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$44 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$46 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgba(ColorHelper.fromArgb(87, 145, 158, 64));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(145, 158, 64, 87));");
                        }
                        try (Using<ColorCesiumWriter> using$48 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$48.resource;
                            m2.writeRgba(ColorHelper.fromArgb(59, 8, 152, 176));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(8, 152, 176, 59));");
                        }
                        try (Using<RepeatCesiumWriter> using$49 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$49.resource;
                            m2.writeCartesian2(new Rectangular(32394.0, 37502.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(32394, 37502));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("constant_customPatternSensor_lateralSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_lateralSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$51 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<ImageMaterialCesiumWriter> using$53 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(132, 88, 171, 168));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.345098039215686, 0.670588235294118, 0.658823529411765, 0.517647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("constant_customPatternSensor_lateralSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_lateralSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$56 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<GridMaterialCesiumWriter> using$58 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(53, 12, 83, 236));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0470588235294118, 0.325490196078431, 0.925490196078431, 0.207843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("constant_customPatternSensor_lateralSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_lateralSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$61 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<StripeMaterialCesiumWriter> using$63 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(33, 55, 189, 225));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.215686274509804, 0.741176470588235, 0.882352941176471, 0.129411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("constant_customPatternSensor_lateralSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_lateralSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$66 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$66.resource;
                try (Using<MaterialCesiumWriter> using$67 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$67.resource;
                    try (Using<StripeMaterialCesiumWriter> using$68 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$68.resource;
                        try (Using<ColorCesiumWriter> using$69 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$69.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(32, 186, 137, 177));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.729411764705882, 0.537254901960784, 0.694117647058824, 0.125490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$70 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$70.resource;
            packet.writeId("constant_customPatternSensor_lateralSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_lateralSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$71 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$71.resource;
                try (Using<MaterialCesiumWriter> using$72 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$72.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$73 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$73.resource;
                        try (Using<ColorCesiumWriter> using$74 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$74.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(228, 24, 20, 161));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0941176470588235, 0.0784313725490196, 0.631372549019608, 0.894117647058824), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$75 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$75.resource;
            packet.writeId("constant_customPatternSensor_lateralSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_lateralSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$76 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$76.resource;
                try (Using<MaterialCesiumWriter> using$77 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$77.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$78 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$78.resource;
                        try (Using<ColorCesiumWriter> using$79 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$79.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(220, 192, 79, 223));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.752941176470588, 0.309803921568627, 0.874509803921569, 0.862745098039216), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$80 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$80.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$81 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$81.resource;
                try (Using<MaterialCesiumWriter> using$82 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$82.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$83 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$83.resource;
                        try (Using<ColorCesiumWriter> using$84 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$84.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(28, 46, 214, 56));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.180392156862745, 0.83921568627451, 0.219607843137255, 0.109803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$85 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$85.resource;
            packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$86 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$86.resource;
                try (Using<MaterialCesiumWriter> using$87 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$87.resource;
                    try (Using<ImageMaterialCesiumWriter> using$88 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$88.resource;
                        try (Using<UriCesiumWriter> using$89 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$89.resource;
                            m2.writeUri("http://example.com/53957", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/53957');");
                        }
                        try (Using<RepeatCesiumWriter> using$90 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$90.resource;
                            m2.writeCartesian2(new Rectangular(54128.0, 19667.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(54128, 19667));");
                        }
                        try (Using<ColorCesiumWriter> using$91 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$91.resource;
                            m2.writeRgba(ColorHelper.fromArgb(139, 197, 165, 19));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(197, 165, 19, 139));");
                        }
                        try (Using<BooleanCesiumWriter> using$92 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$92.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$93 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$93.resource;
            packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$94 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$94.resource;
                try (Using<MaterialCesiumWriter> using$95 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$95.resource;
                    try (Using<GridMaterialCesiumWriter> using$96 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$96.resource;
                        try (Using<ColorCesiumWriter> using$97 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$97.resource;
                            m2.writeRgba(ColorHelper.fromArgb(160, 112, 146, 248));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(112, 146, 248, 160));");
                        }
                        try (Using<DoubleCesiumWriter> using$98 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$98.resource;
                            m2.writeNumber(44766.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(44766.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$99 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$99.resource;
                            m2.writeCartesian2(new Rectangular(30524.0, 42103.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(30524, 42103));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$100 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$100.resource;
                            m2.writeCartesian2(new Rectangular(11464.0, 16684.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(11464, 16684));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$101 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$101.resource;
                            m2.writeCartesian2(new Rectangular(23594.0, 33884.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(23594, 33884));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$102 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$102.resource;
            packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$103 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$103.resource;
                try (Using<MaterialCesiumWriter> using$104 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$104.resource;
                    try (Using<StripeMaterialCesiumWriter> using$105 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$105.resource;
                        try (Using<StripeOrientationCesiumWriter> using$106 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$106.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$107 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$107.resource;
                            m2.writeRgba(ColorHelper.fromArgb(0, 252, 48, 62));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(252, 48, 62, 0));");
                        }
                        try (Using<ColorCesiumWriter> using$108 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$108.resource;
                            m2.writeRgba(ColorHelper.fromArgb(59, 34, 219, 166));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(34, 219, 166, 59));");
                        }
                        try (Using<DoubleCesiumWriter> using$109 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$109.resource;
                            m2.writeNumber(14619.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(14619.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$110 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$110.resource;
                            m2.writeNumber(31654.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(31654.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$111 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$111.resource;
            packet.writeId("material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$112 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$112.resource;
                try (Using<MaterialCesiumWriter> using$113 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$113.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$114 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$114.resource;
                        try (Using<ColorCesiumWriter> using$115 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$115.resource;
                            m2.writeRgba(ColorHelper.fromArgb(156, 95, 175, 187));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(95, 175, 187, 156));");
                        }
                        try (Using<ColorCesiumWriter> using$116 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$116.resource;
                            m2.writeRgba(ColorHelper.fromArgb(100, 163, 10, 92));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(163, 10, 92, 100));");
                        }
                        try (Using<RepeatCesiumWriter> using$117 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$117.resource;
                            m2.writeCartesian2(new Rectangular(45574.0, 30898.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(45574, 30898));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$118 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$118.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$119 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$119.resource;
                try (Using<MaterialCesiumWriter> using$120 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$120.resource;
                    try (Using<ImageMaterialCesiumWriter> using$121 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$121.resource;
                        try (Using<ColorCesiumWriter> using$122 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$122.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(213, 26, 238, 74));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.101960784313725, 0.933333333333333, 0.290196078431373, 0.835294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$123 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$123.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$124 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$124.resource;
                try (Using<MaterialCesiumWriter> using$125 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$125.resource;
                    try (Using<GridMaterialCesiumWriter> using$126 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$126.resource;
                        try (Using<ColorCesiumWriter> using$127 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$127.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(107, 94, 9, 118));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.368627450980392, 0.0352941176470588, 0.462745098039216, 0.419607843137255), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$128 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$128.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$129 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$129.resource;
                try (Using<MaterialCesiumWriter> using$130 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$130.resource;
                    try (Using<StripeMaterialCesiumWriter> using$131 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$131.resource;
                        try (Using<ColorCesiumWriter> using$132 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$132.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(111, 71, 202, 161));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.27843137254902, 0.792156862745098, 0.631372549019608, 0.435294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$133 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$133.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$134 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$134.resource;
                try (Using<MaterialCesiumWriter> using$135 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$135.resource;
                    try (Using<StripeMaterialCesiumWriter> using$136 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$136.resource;
                        try (Using<ColorCesiumWriter> using$137 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$137.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(35, 69, 56, 209));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.270588235294118, 0.219607843137255, 0.819607843137255, 0.137254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$138 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$138.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$139 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$139.resource;
                try (Using<MaterialCesiumWriter> using$140 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$140.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$141 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$141.resource;
                        try (Using<ColorCesiumWriter> using$142 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$142.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(194, 12, 215, 131));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0470588235294118, 0.843137254901961, 0.513725490196078, 0.76078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$143 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$143.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$144 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$144.resource;
                try (Using<MaterialCesiumWriter> using$145 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$145.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$146 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$146.resource;
                        try (Using<ColorCesiumWriter> using$147 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$147.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(240, 87, 110, 14));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.341176470588235, 0.431372549019608, 0.0549019607843137, 0.941176470588235), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$148 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$148.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$149 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$149.resource;
                try (Using<MaterialCesiumWriter> using$150 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$150.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$151 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$151.resource;
                        try (Using<ColorCesiumWriter> using$152 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$152.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(6, 47, 177, 239));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.184313725490196, 0.694117647058824, 0.937254901960784, 0.0235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$153 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$153.resource;
            packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$154 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$154.resource;
                try (Using<MaterialCesiumWriter> using$155 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$155.resource;
                    try (Using<ImageMaterialCesiumWriter> using$156 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$156.resource;
                        try (Using<UriCesiumWriter> using$157 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$157.resource;
                            m2.writeUri("http://example.com/17353", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/17353');");
                        }
                        try (Using<RepeatCesiumWriter> using$158 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$158.resource;
                            m2.writeCartesian2(new Rectangular(55611.0, 32217.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(55611, 32217));");
                        }
                        try (Using<ColorCesiumWriter> using$159 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$159.resource;
                            m2.writeRgba(ColorHelper.fromArgb(146, 86, 76, 232));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(86, 76, 232, 146));");
                        }
                        try (Using<BooleanCesiumWriter> using$160 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$160.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$161 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$161.resource;
            packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$162 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$162.resource;
                try (Using<MaterialCesiumWriter> using$163 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$163.resource;
                    try (Using<GridMaterialCesiumWriter> using$164 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$164.resource;
                        try (Using<ColorCesiumWriter> using$165 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$165.resource;
                            m2.writeRgba(ColorHelper.fromArgb(103, 196, 96, 175));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(196, 96, 175, 103));");
                        }
                        try (Using<DoubleCesiumWriter> using$166 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$166.resource;
                            m2.writeNumber(37213.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(37213.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$167 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$167.resource;
                            m2.writeCartesian2(new Rectangular(44500.0, 4781.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(44500, 4781));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$168 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$168.resource;
                            m2.writeCartesian2(new Rectangular(30042.0, 49013.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(30042, 49013));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$169 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$169.resource;
                            m2.writeCartesian2(new Rectangular(37409.0, 34962.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(37409, 34962));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$170 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$170.resource;
            packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$171 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$171.resource;
                try (Using<MaterialCesiumWriter> using$172 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$172.resource;
                    try (Using<StripeMaterialCesiumWriter> using$173 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$173.resource;
                        try (Using<StripeOrientationCesiumWriter> using$174 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$174.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$175 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$175.resource;
                            m2.writeRgba(ColorHelper.fromArgb(101, 73, 110, 9));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(73, 110, 9, 101));");
                        }
                        try (Using<ColorCesiumWriter> using$176 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$176.resource;
                            m2.writeRgba(ColorHelper.fromArgb(202, 249, 200, 205));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(249, 200, 205, 202));");
                        }
                        try (Using<DoubleCesiumWriter> using$177 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$177.resource;
                            m2.writeNumber(28340.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(28340.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$178 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$178.resource;
                            m2.writeNumber(34666.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(34666.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$179 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$179.resource;
            packet.writeId("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$180 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$180.resource;
                try (Using<MaterialCesiumWriter> using$181 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$181.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$182 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$182.resource;
                        try (Using<ColorCesiumWriter> using$183 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$183.resource;
                            m2.writeRgba(ColorHelper.fromArgb(165, 167, 231, 126));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(167, 231, 126, 165));");
                        }
                        try (Using<ColorCesiumWriter> using$184 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$184.resource;
                            m2.writeRgba(ColorHelper.fromArgb(70, 240, 113, 184));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(240, 113, 184, 70));");
                        }
                        try (Using<RepeatCesiumWriter> using$185 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$185.resource;
                            m2.writeCartesian2(new Rectangular(62427.0, 63987.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(62427, 63987));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$186 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$186.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$187 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$187.resource;
                try (Using<MaterialCesiumWriter> using$188 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$188.resource;
                    try (Using<ImageMaterialCesiumWriter> using$189 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$189.resource;
                        try (Using<ColorCesiumWriter> using$190 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$190.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(98, 54, 33, 147));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.211764705882353, 0.129411764705882, 0.576470588235294, 0.384313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$191 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$191.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$192 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$192.resource;
                try (Using<MaterialCesiumWriter> using$193 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$193.resource;
                    try (Using<GridMaterialCesiumWriter> using$194 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$194.resource;
                        try (Using<ColorCesiumWriter> using$195 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$195.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(121, 32, 190, 54));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.125490196078431, 0.745098039215686, 0.211764705882353, 0.474509803921569), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$196 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$196.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$197 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$197.resource;
                try (Using<MaterialCesiumWriter> using$198 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$198.resource;
                    try (Using<StripeMaterialCesiumWriter> using$199 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$199.resource;
                        try (Using<ColorCesiumWriter> using$200 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$200.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(252, 71, 40, 12));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.27843137254902, 0.156862745098039, 0.0470588235294118, 0.988235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$201 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$201.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$202 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$202.resource;
                try (Using<MaterialCesiumWriter> using$203 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$203.resource;
                    try (Using<StripeMaterialCesiumWriter> using$204 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$204.resource;
                        try (Using<ColorCesiumWriter> using$205 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$205.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(33, 201, 163, 226));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.788235294117647, 0.63921568627451, 0.886274509803922, 0.129411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$206 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$206.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$207 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$207.resource;
                try (Using<MaterialCesiumWriter> using$208 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$208.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$209 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$209.resource;
                        try (Using<ColorCesiumWriter> using$210 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$210.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(217, 233, 99, 124));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.913725490196078, 0.388235294117647, 0.486274509803922, 0.850980392156863), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$211 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$211.resource;
            packet.writeId("constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$212 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$212.resource;
                try (Using<MaterialCesiumWriter> using$213 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$213.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$214 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$214.resource;
                        try (Using<ColorCesiumWriter> using$215 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$215.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(244, 85, 119, 51));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.333333333333333, 0.466666666666667, 0.2, 0.956862745098039), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$216 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$216.resource;
            packet.writeId("constant_customPatternSensor_domeSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_domeSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$217 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$217.resource;
                try (Using<MaterialCesiumWriter> using$218 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$218.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$219 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$219.resource;
                        try (Using<ColorCesiumWriter> using$220 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$220.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(43, 46, 77, 58));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.180392156862745, 0.301960784313725, 0.227450980392157, 0.168627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$221 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$221.resource;
            packet.writeId("material_customPatternSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$222 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$222.resource;
                try (Using<MaterialCesiumWriter> using$223 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$223.resource;
                    try (Using<ImageMaterialCesiumWriter> using$224 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$224.resource;
                        try (Using<UriCesiumWriter> using$225 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$225.resource;
                            m2.writeUri("http://example.com/30161", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/30161');");
                        }
                        try (Using<RepeatCesiumWriter> using$226 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$226.resource;
                            m2.writeCartesian2(new Rectangular(35321.0, 31113.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(35321, 31113));");
                        }
                        try (Using<ColorCesiumWriter> using$227 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$227.resource;
                            m2.writeRgba(ColorHelper.fromArgb(233, 65, 246, 253));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(65, 246, 253, 233));");
                        }
                        try (Using<BooleanCesiumWriter> using$228 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$228.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$229 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$229.resource;
            packet.writeId("material_customPatternSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$230 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$230.resource;
                try (Using<MaterialCesiumWriter> using$231 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$231.resource;
                    try (Using<GridMaterialCesiumWriter> using$232 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$232.resource;
                        try (Using<ColorCesiumWriter> using$233 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$233.resource;
                            m2.writeRgba(ColorHelper.fromArgb(132, 77, 194, 210));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(77, 194, 210, 132));");
                        }
                        try (Using<DoubleCesiumWriter> using$234 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$234.resource;
                            m2.writeNumber(54307.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(54307.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$235 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$235.resource;
                            m2.writeCartesian2(new Rectangular(24794.0, 1120.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(24794, 1120));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$236 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$236.resource;
                            m2.writeCartesian2(new Rectangular(63618.0, 58104.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(63618, 58104));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$237 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$237.resource;
                            m2.writeCartesian2(new Rectangular(58084.0, 43234.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(58084, 43234));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$238 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$238.resource;
            packet.writeId("material_customPatternSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$239 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$239.resource;
                try (Using<MaterialCesiumWriter> using$240 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$240.resource;
                    try (Using<StripeMaterialCesiumWriter> using$241 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$241.resource;
                        try (Using<StripeOrientationCesiumWriter> using$242 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$242.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$243 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$243.resource;
                            m2.writeRgba(ColorHelper.fromArgb(154, 48, 139, 176));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(48, 139, 176, 154));");
                        }
                        try (Using<ColorCesiumWriter> using$244 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$244.resource;
                            m2.writeRgba(ColorHelper.fromArgb(61, 237, 89, 130));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(237, 89, 130, 61));");
                        }
                        try (Using<DoubleCesiumWriter> using$245 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$245.resource;
                            m2.writeNumber(64570.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(64570.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$246 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$246.resource;
                            m2.writeNumber(64333.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(64333.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$247 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$247.resource;
            packet.writeId("material_customPatternSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$248 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$248.resource;
                try (Using<MaterialCesiumWriter> using$249 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$249.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$250 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$250.resource;
                        try (Using<ColorCesiumWriter> using$251 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$251.resource;
                            m2.writeRgba(ColorHelper.fromArgb(80, 237, 200, 236));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(237, 200, 236, 80));");
                        }
                        try (Using<ColorCesiumWriter> using$252 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$252.resource;
                            m2.writeRgba(ColorHelper.fromArgb(14, 253, 232, 10));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(253, 232, 10, 14));");
                        }
                        try (Using<RepeatCesiumWriter> using$253 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$253.resource;
                            m2.writeCartesian2(new Rectangular(4049.0, 46095.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(4049, 46095));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$254 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$254.resource;
            packet.writeId("constant_customPatternSensor_domeSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_domeSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$255 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$255.resource;
                try (Using<MaterialCesiumWriter> using$256 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$256.resource;
                    try (Using<ImageMaterialCesiumWriter> using$257 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$257.resource;
                        try (Using<ColorCesiumWriter> using$258 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$258.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(246, 123, 127, 207));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.482352941176471, 0.498039215686275, 0.811764705882353, 0.964705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$259 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$259.resource;
            packet.writeId("constant_customPatternSensor_domeSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_domeSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$260 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$260.resource;
                try (Using<MaterialCesiumWriter> using$261 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$261.resource;
                    try (Using<GridMaterialCesiumWriter> using$262 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$262.resource;
                        try (Using<ColorCesiumWriter> using$263 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$263.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(45, 137, 77, 19));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.537254901960784, 0.301960784313725, 0.0745098039215686, 0.176470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$264 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$264.resource;
            packet.writeId("constant_customPatternSensor_domeSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_domeSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$265 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$265.resource;
                try (Using<MaterialCesiumWriter> using$266 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$266.resource;
                    try (Using<StripeMaterialCesiumWriter> using$267 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$267.resource;
                        try (Using<ColorCesiumWriter> using$268 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$268.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(202, 102, 24, 123));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.4, 0.0941176470588235, 0.482352941176471, 0.792156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$269 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$269.resource;
            packet.writeId("constant_customPatternSensor_domeSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_domeSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$270 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$270.resource;
                try (Using<MaterialCesiumWriter> using$271 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$271.resource;
                    try (Using<StripeMaterialCesiumWriter> using$272 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$272.resource;
                        try (Using<ColorCesiumWriter> using$273 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$273.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(89, 220, 113, 166));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.862745098039216, 0.443137254901961, 0.650980392156863, 0.349019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$274 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$274.resource;
            packet.writeId("constant_customPatternSensor_domeSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_domeSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$275 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$275.resource;
                try (Using<MaterialCesiumWriter> using$276 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$276.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$277 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$277.resource;
                        try (Using<ColorCesiumWriter> using$278 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$278.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(183, 42, 10, 34));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.164705882352941, 0.0392156862745098, 0.133333333333333, 0.717647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$279 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$279.resource;
            packet.writeId("constant_customPatternSensor_domeSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_domeSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$280 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$280.resource;
                try (Using<MaterialCesiumWriter> using$281 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$281.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$282 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$282.resource;
                        try (Using<ColorCesiumWriter> using$283 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$283.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(177, 20, 97, 36));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0784313725490196, 0.380392156862745, 0.141176470588235, 0.694117647058824), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$284 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$284.resource;
            packet.writeId("constant_customPatternSensor_environmentOcclusionMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_environmentOcclusionMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$285 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$285.resource;
                try (Using<MaterialCesiumWriter> using$286 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$286.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$287 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$287.resource;
                        try (Using<ColorCesiumWriter> using$288 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$288.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(46, 165, 252, 114));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.647058823529412, 0.988235294117647, 0.447058823529412, 0.180392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$289 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$289.resource;
            packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$290 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$290.resource;
                try (Using<MaterialCesiumWriter> using$291 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$291.resource;
                    try (Using<ImageMaterialCesiumWriter> using$292 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$292.resource;
                        try (Using<UriCesiumWriter> using$293 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$293.resource;
                            m2.writeUri("http://example.com/43990", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date).url).toEqual('http://example.com/43990');");
                        }
                        try (Using<RepeatCesiumWriter> using$294 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$294.resource;
                            m2.writeCartesian2(new Rectangular(15786.0, 37437.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(15786, 37437));");
                        }
                        try (Using<ColorCesiumWriter> using$295 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$295.resource;
                            m2.writeRgba(ColorHelper.fromArgb(35, 194, 23, 148));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(194, 23, 148, 35));");
                        }
                        try (Using<BooleanCesiumWriter> using$296 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$296.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$297 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$297.resource;
            packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$298 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$298.resource;
                try (Using<MaterialCesiumWriter> using$299 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$299.resource;
                    try (Using<GridMaterialCesiumWriter> using$300 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$300.resource;
                        try (Using<ColorCesiumWriter> using$301 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$301.resource;
                            m2.writeRgba(ColorHelper.fromArgb(103, 53, 92, 100));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(53, 92, 100, 103));");
                        }
                        try (Using<DoubleCesiumWriter> using$302 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$302.resource;
                            m2.writeNumber(61818.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(61818.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$303 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$303.resource;
                            m2.writeCartesian2(new Rectangular(16838.0, 19777.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(16838, 19777));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$304 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$304.resource;
                            m2.writeCartesian2(new Rectangular(18042.0, 19782.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(18042, 19782));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$305 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$305.resource;
                            m2.writeCartesian2(new Rectangular(63892.0, 17401.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(63892, 17401));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$306 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$306.resource;
            packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$307 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$307.resource;
                try (Using<MaterialCesiumWriter> using$308 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$308.resource;
                    try (Using<StripeMaterialCesiumWriter> using$309 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$309.resource;
                        try (Using<StripeOrientationCesiumWriter> using$310 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$310.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$311 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$311.resource;
                            m2.writeRgba(ColorHelper.fromArgb(44, 240, 118, 45));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(240, 118, 45, 44));");
                        }
                        try (Using<ColorCesiumWriter> using$312 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$312.resource;
                            m2.writeRgba(ColorHelper.fromArgb(45, 73, 99, 195));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(73, 99, 195, 45));");
                        }
                        try (Using<DoubleCesiumWriter> using$313 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$313.resource;
                            m2.writeNumber(48052.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(48052.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$314 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$314.resource;
                            m2.writeNumber(39502.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(39502.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$315 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$315.resource;
            packet.writeId("material_customPatternSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$316 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$316.resource;
                try (Using<MaterialCesiumWriter> using$317 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$317.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$318 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$318.resource;
                        try (Using<ColorCesiumWriter> using$319 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$319.resource;
                            m2.writeRgba(ColorHelper.fromArgb(231, 214, 144, 88));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(214, 144, 88, 231));");
                        }
                        try (Using<ColorCesiumWriter> using$320 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$320.resource;
                            m2.writeRgba(ColorHelper.fromArgb(79, 133, 77, 73));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(133, 77, 73, 79));");
                        }
                        try (Using<RepeatCesiumWriter> using$321 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$321.resource;
                            m2.writeCartesian2(new Rectangular(20601.0, 18000.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(20601, 18000));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$322 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$322.resource;
            packet.writeId("constant_customPatternSensor_environmentOcclusionMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_environmentOcclusionMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$323 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$323.resource;
                try (Using<MaterialCesiumWriter> using$324 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$324.resource;
                    try (Using<ImageMaterialCesiumWriter> using$325 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$325.resource;
                        try (Using<ColorCesiumWriter> using$326 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$326.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(202, 14, 176, 85));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0549019607843137, 0.690196078431373, 0.333333333333333, 0.792156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$327 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$327.resource;
            packet.writeId("constant_customPatternSensor_environmentOcclusionMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_environmentOcclusionMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$328 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$328.resource;
                try (Using<MaterialCesiumWriter> using$329 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$329.resource;
                    try (Using<GridMaterialCesiumWriter> using$330 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$330.resource;
                        try (Using<ColorCesiumWriter> using$331 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$331.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(43, 107, 152, 51));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.419607843137255, 0.596078431372549, 0.2, 0.168627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$332 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$332.resource;
            packet.writeId("constant_customPatternSensor_environmentOcclusionMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_environmentOcclusionMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$333 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$333.resource;
                try (Using<MaterialCesiumWriter> using$334 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$334.resource;
                    try (Using<StripeMaterialCesiumWriter> using$335 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$335.resource;
                        try (Using<ColorCesiumWriter> using$336 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$336.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(40, 128, 224, 251));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.501960784313725, 0.87843137254902, 0.984313725490196, 0.156862745098039), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$337 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$337.resource;
            packet.writeId("constant_customPatternSensor_environmentOcclusionMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_environmentOcclusionMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$338 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$338.resource;
                try (Using<MaterialCesiumWriter> using$339 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$339.resource;
                    try (Using<StripeMaterialCesiumWriter> using$340 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$340.resource;
                        try (Using<ColorCesiumWriter> using$341 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$341.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(180, 46, 184, 26));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.180392156862745, 0.72156862745098, 0.101960784313725, 0.705882352941177), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$342 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$342.resource;
            packet.writeId("constant_customPatternSensor_environmentOcclusionMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_environmentOcclusionMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$343 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$343.resource;
                try (Using<MaterialCesiumWriter> using$344 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$344.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$345 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$345.resource;
                        try (Using<ColorCesiumWriter> using$346 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$346.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(35, 4, 14, 178));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0156862745098039, 0.0549019607843137, 0.698039215686274, 0.137254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$347 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$347.resource;
            packet.writeId("constant_customPatternSensor_environmentOcclusionMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_customPatternSensor_environmentOcclusionMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$348 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$348.resource;
                try (Using<MaterialCesiumWriter> using$349 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$349.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$350 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$350.resource;
                        try (Using<ColorCesiumWriter> using$351 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$351.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(139, 159, 66, 169));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.623529411764706, 0.258823529411765, 0.662745098039216, 0.545098039215686), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$352 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$352.resource;
            packet.writeId("constant_agi_customPatternSensor_environmentIntersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_customPatternSensor_environmentIntersectionColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$353 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$353.resource;
                try (Using<ColorCesiumWriter> using$354 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$354.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(233, 93, 225, 119));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.364705882352941, 0.882352941176471, 0.466666666666667, 0.913725490196078), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$355 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$355.resource;
            packet.writeId("constant_agi_customPatternSensor_viewshedVisibleColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_customPatternSensor_viewshedVisibleColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$356 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$356.resource;
                try (Using<ColorCesiumWriter> using$357 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$357.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(242, 3, 78, 23));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedVisibleColor.getValue(date)).toEqualEpsilon(new Color(0.0117647058823529, 0.305882352941176, 0.0901960784313725, 0.949019607843137), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$358 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$358.resource;
            packet.writeId("constant_agi_customPatternSensor_viewshedOccludedColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_customPatternSensor_viewshedOccludedColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$359 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$359.resource;
                try (Using<ColorCesiumWriter> using$360 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$360.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(65, 158, 22, 122));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedOccludedColor.getValue(date)).toEqualEpsilon(new Color(0.619607843137255, 0.0862745098039216, 0.47843137254902, 0.254901960784314), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualRectangularSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_agi_rectangularSensor_intersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_rectangularSensor_intersectionColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$1 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(52, 27, 118, 112));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqualEpsilon(new Color(0.105882352941176, 0.462745098039216, 0.43921568627451, 0.203921568627451), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_rectangularSensor_lateralSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_lateralSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$4 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$4.resource;
                try (Using<MaterialCesiumWriter> using$5 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$5.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$6 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$6.resource;
                        try (Using<ColorCesiumWriter> using$7 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$7.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(170, 225, 229, 120));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.882352941176471, 0.898039215686275, 0.470588235294118, 0.666666666666667), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$9 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<ImageMaterialCesiumWriter> using$11 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$11.resource;
                        try (Using<UriCesiumWriter> using$12 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$12.resource;
                            m2.writeUri("http://example.com/43004", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/43004');");
                        }
                        try (Using<RepeatCesiumWriter> using$13 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$13.resource;
                            m2.writeCartesian2(new Rectangular(62347.0, 2291.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(62347, 2291));");
                        }
                        try (Using<ColorCesiumWriter> using$14 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$14.resource;
                            m2.writeRgba(ColorHelper.fromArgb(66, 117, 86, 172));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(117, 86, 172, 66));");
                        }
                        try (Using<BooleanCesiumWriter> using$15 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$15.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$16 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$16.resource;
            packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$17 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$17.resource;
                try (Using<MaterialCesiumWriter> using$18 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$18.resource;
                    try (Using<GridMaterialCesiumWriter> using$19 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$19.resource;
                        try (Using<ColorCesiumWriter> using$20 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$20.resource;
                            m2.writeRgba(ColorHelper.fromArgb(20, 137, 21, 181));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(137, 21, 181, 20));");
                        }
                        try (Using<DoubleCesiumWriter> using$21 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$21.resource;
                            m2.writeNumber(7977.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(7977.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$22 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(new Rectangular(38214.0, 27541.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(38214, 27541));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$23 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$23.resource;
                            m2.writeCartesian2(new Rectangular(15407.0, 35132.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(15407, 35132));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$24 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$24.resource;
                            m2.writeCartesian2(new Rectangular(15638.0, 41789.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(15638, 41789));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$26 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$26.resource;
                try (Using<MaterialCesiumWriter> using$27 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$27.resource;
                    try (Using<StripeMaterialCesiumWriter> using$28 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$28.resource;
                        try (Using<StripeOrientationCesiumWriter> using$29 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$29.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeRgba(ColorHelper.fromArgb(222, 32, 87, 110));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(32, 87, 110, 222));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeRgba(ColorHelper.fromArgb(48, 90, 108, 154));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(90, 108, 154, 48));");
                        }
                        try (Using<DoubleCesiumWriter> using$32 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$32.resource;
                            m2.writeNumber(1333.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(1333.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$33 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$33.resource;
                            m2.writeNumber(28338.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(28338.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$34 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$34.resource;
            packet.writeId("material_rectangularSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$35 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$35.resource;
                try (Using<MaterialCesiumWriter> using$36 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$36.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$37 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$37.resource;
                        try (Using<ColorCesiumWriter> using$38 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$38.resource;
                            m2.writeRgba(ColorHelper.fromArgb(96, 56, 163, 110));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(56, 163, 110, 96));");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgba(ColorHelper.fromArgb(129, 193, 174, 249));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(193, 174, 249, 129));");
                        }
                        try (Using<RepeatCesiumWriter> using$40 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$40.resource;
                            m2.writeCartesian2(new Rectangular(18769.0, 30537.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(18769, 30537));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$41 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$41.resource;
            packet.writeId("constant_rectangularSensor_lateralSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_lateralSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$42 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$42.resource;
                try (Using<MaterialCesiumWriter> using$43 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$43.resource;
                    try (Using<ImageMaterialCesiumWriter> using$44 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$44.resource;
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(199, 170, 47, 216));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.666666666666667, 0.184313725490196, 0.847058823529412, 0.780392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$46 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$46.resource;
            packet.writeId("constant_rectangularSensor_lateralSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_lateralSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$47 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$47.resource;
                try (Using<MaterialCesiumWriter> using$48 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$48.resource;
                    try (Using<GridMaterialCesiumWriter> using$49 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$49.resource;
                        try (Using<ColorCesiumWriter> using$50 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$50.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(224, 178, 123, 205));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.698039215686274, 0.482352941176471, 0.803921568627451, 0.87843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$51 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$51.resource;
            packet.writeId("constant_rectangularSensor_lateralSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_lateralSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$52 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$52.resource;
                try (Using<MaterialCesiumWriter> using$53 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$53.resource;
                    try (Using<StripeMaterialCesiumWriter> using$54 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$54.resource;
                        try (Using<ColorCesiumWriter> using$55 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$55.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(122, 54, 204, 134));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.211764705882353, 0.8, 0.525490196078431, 0.47843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$56 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$56.resource;
            packet.writeId("constant_rectangularSensor_lateralSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_lateralSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$57 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$57.resource;
                try (Using<MaterialCesiumWriter> using$58 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$58.resource;
                    try (Using<StripeMaterialCesiumWriter> using$59 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$59.resource;
                        try (Using<ColorCesiumWriter> using$60 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$60.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(119, 67, 54, 209));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.262745098039216, 0.211764705882353, 0.819607843137255, 0.466666666666667), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$61 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$61.resource;
            packet.writeId("constant_rectangularSensor_lateralSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_lateralSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$62 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$62.resource;
                try (Using<MaterialCesiumWriter> using$63 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$63.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$64 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$64.resource;
                        try (Using<ColorCesiumWriter> using$65 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$65.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(0, 36, 15, 18));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.141176470588235, 0.0588235294117647, 0.0705882352941176, 0), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$66 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$66.resource;
            packet.writeId("constant_rectangularSensor_lateralSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_lateralSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$67 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$67.resource;
                try (Using<MaterialCesiumWriter> using$68 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$68.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$69 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$69.resource;
                        try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$70.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(134, 44, 174, 156));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.172549019607843, 0.682352941176471, 0.611764705882353, 0.525490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$71 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$71.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$72 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$72.resource;
                try (Using<MaterialCesiumWriter> using$73 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$73.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$74 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$74.resource;
                        try (Using<ColorCesiumWriter> using$75 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$75.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(51, 35, 154, 250));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.137254901960784, 0.603921568627451, 0.980392156862745, 0.2), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$76 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$76.resource;
            packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$77 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$77.resource;
                try (Using<MaterialCesiumWriter> using$78 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$78.resource;
                    try (Using<ImageMaterialCesiumWriter> using$79 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$79.resource;
                        try (Using<UriCesiumWriter> using$80 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$80.resource;
                            m2.writeUri("http://example.com/9645", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/9645');");
                        }
                        try (Using<RepeatCesiumWriter> using$81 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$81.resource;
                            m2.writeCartesian2(new Rectangular(32574.0, 59007.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(32574, 59007));");
                        }
                        try (Using<ColorCesiumWriter> using$82 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$82.resource;
                            m2.writeRgba(ColorHelper.fromArgb(164, 45, 73, 29));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(45, 73, 29, 164));");
                        }
                        try (Using<BooleanCesiumWriter> using$83 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$83.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$84 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$84.resource;
            packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$85 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$85.resource;
                try (Using<MaterialCesiumWriter> using$86 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$86.resource;
                    try (Using<GridMaterialCesiumWriter> using$87 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$87.resource;
                        try (Using<ColorCesiumWriter> using$88 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$88.resource;
                            m2.writeRgba(ColorHelper.fromArgb(85, 20, 238, 183));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(20, 238, 183, 85));");
                        }
                        try (Using<DoubleCesiumWriter> using$89 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$89.resource;
                            m2.writeNumber(9816.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(9816.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$90 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$90.resource;
                            m2.writeCartesian2(new Rectangular(638.0, 49922.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(638, 49922));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$91 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$91.resource;
                            m2.writeCartesian2(new Rectangular(33475.0, 32898.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(33475, 32898));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$92 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$92.resource;
                            m2.writeCartesian2(new Rectangular(27656.0, 20076.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(27656, 20076));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$93 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$93.resource;
            packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$94 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$94.resource;
                try (Using<MaterialCesiumWriter> using$95 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$95.resource;
                    try (Using<StripeMaterialCesiumWriter> using$96 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$96.resource;
                        try (Using<StripeOrientationCesiumWriter> using$97 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$97.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$98 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$98.resource;
                            m2.writeRgba(ColorHelper.fromArgb(189, 24, 90, 119));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(24, 90, 119, 189));");
                        }
                        try (Using<ColorCesiumWriter> using$99 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$99.resource;
                            m2.writeRgba(ColorHelper.fromArgb(209, 205, 98, 105));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(205, 98, 105, 209));");
                        }
                        try (Using<DoubleCesiumWriter> using$100 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$100.resource;
                            m2.writeNumber(37589.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(37589.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$101 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$101.resource;
                            m2.writeNumber(65125.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(65125.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$102 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$102.resource;
            packet.writeId("material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$103 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$103.resource;
                try (Using<MaterialCesiumWriter> using$104 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$104.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$105 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$105.resource;
                        try (Using<ColorCesiumWriter> using$106 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$106.resource;
                            m2.writeRgba(ColorHelper.fromArgb(207, 109, 156, 164));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(109, 156, 164, 207));");
                        }
                        try (Using<ColorCesiumWriter> using$107 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$107.resource;
                            m2.writeRgba(ColorHelper.fromArgb(209, 97, 121, 77));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(97, 121, 77, 209));");
                        }
                        try (Using<RepeatCesiumWriter> using$108 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$108.resource;
                            m2.writeCartesian2(new Rectangular(40989.0, 43680.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(40989, 43680));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$109 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$109.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$110 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$110.resource;
                try (Using<MaterialCesiumWriter> using$111 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$111.resource;
                    try (Using<ImageMaterialCesiumWriter> using$112 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$112.resource;
                        try (Using<ColorCesiumWriter> using$113 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$113.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(245, 74, 26, 118));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.290196078431373, 0.101960784313725, 0.462745098039216, 0.96078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$114 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$114.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$115 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$115.resource;
                try (Using<MaterialCesiumWriter> using$116 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$116.resource;
                    try (Using<GridMaterialCesiumWriter> using$117 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$117.resource;
                        try (Using<ColorCesiumWriter> using$118 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$118.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(5, 167, 67, 159));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.654901960784314, 0.262745098039216, 0.623529411764706, 0.0196078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$119 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$119.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$120 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$120.resource;
                try (Using<MaterialCesiumWriter> using$121 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$121.resource;
                    try (Using<StripeMaterialCesiumWriter> using$122 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$122.resource;
                        try (Using<ColorCesiumWriter> using$123 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$123.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(77, 183, 227, 0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.717647058823529, 0.890196078431372, 0, 0.301960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$124 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$124.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$125 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$125.resource;
                try (Using<MaterialCesiumWriter> using$126 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$126.resource;
                    try (Using<StripeMaterialCesiumWriter> using$127 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$127.resource;
                        try (Using<ColorCesiumWriter> using$128 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$128.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(2, 26, 156, 210));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.101960784313725, 0.611764705882353, 0.823529411764706, 0.00784313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$129 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$129.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$130 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$130.resource;
                try (Using<MaterialCesiumWriter> using$131 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$131.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$132 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$132.resource;
                        try (Using<ColorCesiumWriter> using$133 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$133.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(30, 56, 94, 187));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.219607843137255, 0.368627450980392, 0.733333333333333, 0.117647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$134 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$134.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$135 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$135.resource;
                try (Using<MaterialCesiumWriter> using$136 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$136.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$137 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$137.resource;
                        try (Using<ColorCesiumWriter> using$138 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$138.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(134, 25, 217, 164));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.0980392156862745, 0.850980392156863, 0.643137254901961, 0.525490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$139 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$139.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$140 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$140.resource;
                try (Using<MaterialCesiumWriter> using$141 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$141.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$142 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$142.resource;
                        try (Using<ColorCesiumWriter> using$143 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$143.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(171, 6, 161, 79));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0235294117647059, 0.631372549019608, 0.309803921568627, 0.670588235294118), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$144 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$144.resource;
            packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$145 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$145.resource;
                try (Using<MaterialCesiumWriter> using$146 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$146.resource;
                    try (Using<ImageMaterialCesiumWriter> using$147 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$147.resource;
                        try (Using<UriCesiumWriter> using$148 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$148.resource;
                            m2.writeUri("http://example.com/24029", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/24029');");
                        }
                        try (Using<RepeatCesiumWriter> using$149 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$149.resource;
                            m2.writeCartesian2(new Rectangular(25949.0, 5221.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(25949, 5221));");
                        }
                        try (Using<ColorCesiumWriter> using$150 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$150.resource;
                            m2.writeRgba(ColorHelper.fromArgb(141, 250, 150, 27));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(250, 150, 27, 141));");
                        }
                        try (Using<BooleanCesiumWriter> using$151 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$151.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$152 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$152.resource;
            packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$153 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$153.resource;
                try (Using<MaterialCesiumWriter> using$154 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$154.resource;
                    try (Using<GridMaterialCesiumWriter> using$155 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$155.resource;
                        try (Using<ColorCesiumWriter> using$156 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$156.resource;
                            m2.writeRgba(ColorHelper.fromArgb(214, 72, 123, 65));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(72, 123, 65, 214));");
                        }
                        try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$157.resource;
                            m2.writeNumber(64262.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(64262.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$158 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$158.resource;
                            m2.writeCartesian2(new Rectangular(55649.0, 41177.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(55649, 41177));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$159 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$159.resource;
                            m2.writeCartesian2(new Rectangular(9279.0, 32036.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(9279, 32036));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$160 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$160.resource;
                            m2.writeCartesian2(new Rectangular(22057.0, 32854.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(22057, 32854));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$161 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$161.resource;
            packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$162 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$162.resource;
                try (Using<MaterialCesiumWriter> using$163 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$163.resource;
                    try (Using<StripeMaterialCesiumWriter> using$164 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$164.resource;
                        try (Using<StripeOrientationCesiumWriter> using$165 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$165.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$166 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$166.resource;
                            m2.writeRgba(ColorHelper.fromArgb(211, 232, 205, 141));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(232, 205, 141, 211));");
                        }
                        try (Using<ColorCesiumWriter> using$167 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$167.resource;
                            m2.writeRgba(ColorHelper.fromArgb(194, 213, 74, 9));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(213, 74, 9, 194));");
                        }
                        try (Using<DoubleCesiumWriter> using$168 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$168.resource;
                            m2.writeNumber(27981.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(27981.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$169 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$169.resource;
                            m2.writeNumber(35510.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(35510.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$170 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$170.resource;
            packet.writeId("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$171 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$171.resource;
                try (Using<MaterialCesiumWriter> using$172 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$172.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$173 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$173.resource;
                        try (Using<ColorCesiumWriter> using$174 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$174.resource;
                            m2.writeRgba(ColorHelper.fromArgb(123, 180, 69, 194));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(180, 69, 194, 123));");
                        }
                        try (Using<ColorCesiumWriter> using$175 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$175.resource;
                            m2.writeRgba(ColorHelper.fromArgb(47, 118, 6, 103));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(118, 6, 103, 47));");
                        }
                        try (Using<RepeatCesiumWriter> using$176 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$176.resource;
                            m2.writeCartesian2(new Rectangular(65401.0, 31999.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(65401, 31999));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$177 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$177.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$178 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$178.resource;
                try (Using<MaterialCesiumWriter> using$179 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$179.resource;
                    try (Using<ImageMaterialCesiumWriter> using$180 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$180.resource;
                        try (Using<ColorCesiumWriter> using$181 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$181.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(213, 185, 221, 125));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.725490196078431, 0.866666666666667, 0.490196078431373, 0.835294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$182 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$182.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$183 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$183.resource;
                try (Using<MaterialCesiumWriter> using$184 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$184.resource;
                    try (Using<GridMaterialCesiumWriter> using$185 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$185.resource;
                        try (Using<ColorCesiumWriter> using$186 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$186.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(246, 126, 71, 191));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.494117647058824, 0.27843137254902, 0.749019607843137, 0.964705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$187 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$187.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$188 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$188.resource;
                try (Using<MaterialCesiumWriter> using$189 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$189.resource;
                    try (Using<StripeMaterialCesiumWriter> using$190 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$190.resource;
                        try (Using<ColorCesiumWriter> using$191 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$191.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(96, 183, 163, 179));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.717647058823529, 0.63921568627451, 0.701960784313725, 0.376470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$192 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$192.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$193 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$193.resource;
                try (Using<MaterialCesiumWriter> using$194 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$194.resource;
                    try (Using<StripeMaterialCesiumWriter> using$195 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$195.resource;
                        try (Using<ColorCesiumWriter> using$196 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$196.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(52, 201, 137, 40));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.788235294117647, 0.537254901960784, 0.156862745098039, 0.203921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$197 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$197.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$198 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$198.resource;
                try (Using<MaterialCesiumWriter> using$199 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$199.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$200 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$200.resource;
                        try (Using<ColorCesiumWriter> using$201 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$201.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(8, 69, 221, 79));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.270588235294118, 0.866666666666667, 0.309803921568627, 0.0313725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$202 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$202.resource;
            packet.writeId("constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$203 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$203.resource;
                try (Using<MaterialCesiumWriter> using$204 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$204.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$205 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$205.resource;
                        try (Using<ColorCesiumWriter> using$206 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$206.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(77, 82, 214, 42));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.32156862745098, 0.83921568627451, 0.164705882352941, 0.301960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$207 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$207.resource;
            packet.writeId("constant_rectangularSensor_domeSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_domeSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$208 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$208.resource;
                try (Using<MaterialCesiumWriter> using$209 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$209.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$210 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$210.resource;
                        try (Using<ColorCesiumWriter> using$211 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$211.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(147, 39, 241, 134));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.152941176470588, 0.945098039215686, 0.525490196078431, 0.576470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$212 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$212.resource;
            packet.writeId("material_rectangularSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$213 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$213.resource;
                try (Using<MaterialCesiumWriter> using$214 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$214.resource;
                    try (Using<ImageMaterialCesiumWriter> using$215 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$215.resource;
                        try (Using<UriCesiumWriter> using$216 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$216.resource;
                            m2.writeUri("http://example.com/39720", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date).url).toEqual('http://example.com/39720');");
                        }
                        try (Using<RepeatCesiumWriter> using$217 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$217.resource;
                            m2.writeCartesian2(new Rectangular(36759.0, 34959.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(36759, 34959));");
                        }
                        try (Using<ColorCesiumWriter> using$218 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$218.resource;
                            m2.writeRgba(ColorHelper.fromArgb(137, 93, 221, 12));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(93, 221, 12, 137));");
                        }
                        try (Using<BooleanCesiumWriter> using$219 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$219.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$220 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$220.resource;
            packet.writeId("material_rectangularSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$221 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$221.resource;
                try (Using<MaterialCesiumWriter> using$222 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$222.resource;
                    try (Using<GridMaterialCesiumWriter> using$223 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$223.resource;
                        try (Using<ColorCesiumWriter> using$224 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$224.resource;
                            m2.writeRgba(ColorHelper.fromArgb(185, 117, 242, 182));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(Color.fromBytes(117, 242, 182, 185));");
                        }
                        try (Using<DoubleCesiumWriter> using$225 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$225.resource;
                            m2.writeNumber(58215.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(58215.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$226 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$226.resource;
                            m2.writeCartesian2(new Rectangular(12463.0, 42544.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(12463, 42544));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$227 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$227.resource;
                            m2.writeCartesian2(new Rectangular(56378.0, 63452.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(56378, 63452));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$228 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$228.resource;
                            m2.writeCartesian2(new Rectangular(33185.0, 51585.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(33185, 51585));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$229 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$229.resource;
            packet.writeId("material_rectangularSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$230 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$230.resource;
                try (Using<MaterialCesiumWriter> using$231 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$231.resource;
                    try (Using<StripeMaterialCesiumWriter> using$232 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$232.resource;
                        try (Using<StripeOrientationCesiumWriter> using$233 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$233.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$234 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$234.resource;
                            m2.writeRgba(ColorHelper.fromArgb(142, 99, 109, 104));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(99, 109, 104, 142));");
                        }
                        try (Using<ColorCesiumWriter> using$235 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$235.resource;
                            m2.writeRgba(ColorHelper.fromArgb(94, 144, 89, 171));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(144, 89, 171, 94));");
                        }
                        try (Using<DoubleCesiumWriter> using$236 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$236.resource;
                            m2.writeNumber(55592.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(55592.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$237 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$237.resource;
                            m2.writeNumber(20225.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(20225.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$238 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$238.resource;
            packet.writeId("material_rectangularSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$239 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$239.resource;
                try (Using<MaterialCesiumWriter> using$240 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$240.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$241 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$241.resource;
                        try (Using<ColorCesiumWriter> using$242 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$242.resource;
                            m2.writeRgba(ColorHelper.fromArgb(29, 238, 64, 137));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(238, 64, 137, 29));");
                        }
                        try (Using<ColorCesiumWriter> using$243 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$243.resource;
                            m2.writeRgba(ColorHelper.fromArgb(30, 254, 141, 98));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(254, 141, 98, 30));");
                        }
                        try (Using<RepeatCesiumWriter> using$244 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$244.resource;
                            m2.writeCartesian2(new Rectangular(58995.0, 46566.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(new Cartesian2(58995, 46566));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$245 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$245.resource;
            packet.writeId("constant_rectangularSensor_domeSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_domeSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$246 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$246.resource;
                try (Using<MaterialCesiumWriter> using$247 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$247.resource;
                    try (Using<ImageMaterialCesiumWriter> using$248 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$248.resource;
                        try (Using<ColorCesiumWriter> using$249 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$249.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(105, 20, 221, 180));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.0784313725490196, 0.866666666666667, 0.705882352941177, 0.411764705882353), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$250 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$250.resource;
            packet.writeId("constant_rectangularSensor_domeSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_domeSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$251 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$251.resource;
                try (Using<MaterialCesiumWriter> using$252 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$252.resource;
                    try (Using<GridMaterialCesiumWriter> using$253 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$253.resource;
                        try (Using<ColorCesiumWriter> using$254 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$254.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(112, 186, 164, 163));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.729411764705882, 0.643137254901961, 0.63921568627451, 0.43921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$255 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$255.resource;
            packet.writeId("constant_rectangularSensor_domeSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_domeSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$256 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$256.resource;
                try (Using<MaterialCesiumWriter> using$257 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$257.resource;
                    try (Using<StripeMaterialCesiumWriter> using$258 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$258.resource;
                        try (Using<ColorCesiumWriter> using$259 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$259.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(80, 164, 216, 50));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.643137254901961, 0.847058823529412, 0.196078431372549, 0.313725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$260 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$260.resource;
            packet.writeId("constant_rectangularSensor_domeSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_domeSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$261 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$261.resource;
                try (Using<MaterialCesiumWriter> using$262 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$262.resource;
                    try (Using<StripeMaterialCesiumWriter> using$263 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$263.resource;
                        try (Using<ColorCesiumWriter> using$264 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$264.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(126, 240, 161, 180));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.941176470588235, 0.631372549019608, 0.705882352941177, 0.494117647058824), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$265 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$265.resource;
            packet.writeId("constant_rectangularSensor_domeSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_domeSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$266 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$266.resource;
                try (Using<MaterialCesiumWriter> using$267 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$267.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$268 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$268.resource;
                        try (Using<ColorCesiumWriter> using$269 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$269.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(21, 192, 108, 117));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.752941176470588, 0.423529411764706, 0.458823529411765, 0.0823529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$270 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$270.resource;
            packet.writeId("constant_rectangularSensor_domeSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_domeSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$271 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$271.resource;
                try (Using<MaterialCesiumWriter> using$272 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$272.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$273 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$273.resource;
                        try (Using<ColorCesiumWriter> using$274 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$274.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(205, 102, 236, 11));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.4, 0.925490196078431, 0.0431372549019608, 0.803921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$275 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$275.resource;
            packet.writeId("constant_rectangularSensor_environmentOcclusionMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_environmentOcclusionMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$276 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$276.resource;
                try (Using<MaterialCesiumWriter> using$277 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$277.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$278 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$278.resource;
                        try (Using<ColorCesiumWriter> using$279 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$279.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(184, 72, 48, 200));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.282352941176471, 0.188235294117647, 0.784313725490196, 0.72156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$280 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$280.resource;
            packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$281 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$281.resource;
                try (Using<MaterialCesiumWriter> using$282 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$282.resource;
                    try (Using<ImageMaterialCesiumWriter> using$283 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$283.resource;
                        try (Using<UriCesiumWriter> using$284 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$284.resource;
                            m2.writeUri("http://example.com/22276", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date).url).toEqual('http://example.com/22276');");
                        }
                        try (Using<RepeatCesiumWriter> using$285 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$285.resource;
                            m2.writeCartesian2(new Rectangular(24100.0, 51550.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(24100, 51550));");
                        }
                        try (Using<ColorCesiumWriter> using$286 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$286.resource;
                            m2.writeRgba(ColorHelper.fromArgb(54, 11, 6, 155));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(11, 6, 155, 54));");
                        }
                        try (Using<BooleanCesiumWriter> using$287 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$287.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$288 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$288.resource;
            packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$289 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$289.resource;
                try (Using<MaterialCesiumWriter> using$290 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$290.resource;
                    try (Using<GridMaterialCesiumWriter> using$291 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$291.resource;
                        try (Using<ColorCesiumWriter> using$292 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$292.resource;
                            m2.writeRgba(ColorHelper.fromArgb(10, 212, 195, 41));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(Color.fromBytes(212, 195, 41, 10));");
                        }
                        try (Using<DoubleCesiumWriter> using$293 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$293.resource;
                            m2.writeNumber(36411.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(36411.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$294 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$294.resource;
                            m2.writeCartesian2(new Rectangular(46422.0, 32693.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(new Cartesian2(46422, 32693));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$295 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$295.resource;
                            m2.writeCartesian2(new Rectangular(48390.0, 49341.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(new Cartesian2(48390, 49341));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$296 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$296.resource;
                            m2.writeCartesian2(new Rectangular(8359.0, 23584.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(new Cartesian2(8359, 23584));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$297 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$297.resource;
            packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$298 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$298.resource;
                try (Using<MaterialCesiumWriter> using$299 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$299.resource;
                    try (Using<StripeMaterialCesiumWriter> using$300 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$300.resource;
                        try (Using<StripeOrientationCesiumWriter> using$301 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$301.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$302 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$302.resource;
                            m2.writeRgba(ColorHelper.fromArgb(229, 249, 180, 43));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(249, 180, 43, 229));");
                        }
                        try (Using<ColorCesiumWriter> using$303 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$303.resource;
                            m2.writeRgba(ColorHelper.fromArgb(71, 192, 184, 121));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(192, 184, 121, 71));");
                        }
                        try (Using<DoubleCesiumWriter> using$304 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$304.resource;
                            m2.writeNumber(38358.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(38358.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$305 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$305.resource;
                            m2.writeNumber(12111.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(12111.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$306 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$306.resource;
            packet.writeId("material_rectangularSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$307 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$307.resource;
                try (Using<MaterialCesiumWriter> using$308 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$308.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$309 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$309.resource;
                        try (Using<ColorCesiumWriter> using$310 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$310.resource;
                            m2.writeRgba(ColorHelper.fromArgb(75, 215, 166, 202));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(Color.fromBytes(215, 166, 202, 75));");
                        }
                        try (Using<ColorCesiumWriter> using$311 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$311.resource;
                            m2.writeRgba(ColorHelper.fromArgb(14, 72, 105, 185));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(Color.fromBytes(72, 105, 185, 14));");
                        }
                        try (Using<RepeatCesiumWriter> using$312 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$312.resource;
                            m2.writeCartesian2(new Rectangular(51334.0, 47048.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(new Cartesian2(51334, 47048));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$313 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$313.resource;
            packet.writeId("constant_rectangularSensor_environmentOcclusionMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_environmentOcclusionMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$314 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$314.resource;
                try (Using<MaterialCesiumWriter> using$315 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$315.resource;
                    try (Using<ImageMaterialCesiumWriter> using$316 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$316.resource;
                        try (Using<ColorCesiumWriter> using$317 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$317.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(110, 196, 107, 135));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.768627450980392, 0.419607843137255, 0.529411764705882, 0.431372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$318 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$318.resource;
            packet.writeId("constant_rectangularSensor_environmentOcclusionMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_environmentOcclusionMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$319 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$319.resource;
                try (Using<MaterialCesiumWriter> using$320 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$320.resource;
                    try (Using<GridMaterialCesiumWriter> using$321 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$321.resource;
                        try (Using<ColorCesiumWriter> using$322 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$322.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(101, 51, 55, 167));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqualEpsilon(new Color(0.2, 0.215686274509804, 0.654901960784314, 0.396078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$323 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$323.resource;
            packet.writeId("constant_rectangularSensor_environmentOcclusionMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_environmentOcclusionMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$324 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$324.resource;
                try (Using<MaterialCesiumWriter> using$325 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$325.resource;
                    try (Using<StripeMaterialCesiumWriter> using$326 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$326.resource;
                        try (Using<ColorCesiumWriter> using$327 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$327.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(158, 17, 46, 154));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.0666666666666667, 0.180392156862745, 0.603921568627451, 0.619607843137255), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$328 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$328.resource;
            packet.writeId("constant_rectangularSensor_environmentOcclusionMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_environmentOcclusionMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$329 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$329.resource;
                try (Using<MaterialCesiumWriter> using$330 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$330.resource;
                    try (Using<StripeMaterialCesiumWriter> using$331 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$331.resource;
                        try (Using<ColorCesiumWriter> using$332 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$332.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(114, 55, 177, 99));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.215686274509804, 0.694117647058824, 0.388235294117647, 0.447058823529412), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$333 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$333.resource;
            packet.writeId("constant_rectangularSensor_environmentOcclusionMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_environmentOcclusionMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$334 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$334.resource;
                try (Using<MaterialCesiumWriter> using$335 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$335.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$336 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$336.resource;
                        try (Using<ColorCesiumWriter> using$337 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$337.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(110, 172, 19, 23));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqualEpsilon(new Color(0.674509803921569, 0.0745098039215686, 0.0901960784313725, 0.431372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$338 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$338.resource;
            packet.writeId("constant_rectangularSensor_environmentOcclusionMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_rectangularSensor_environmentOcclusionMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$339 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$339.resource;
                try (Using<MaterialCesiumWriter> using$340 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$340.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$341 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$341.resource;
                        try (Using<ColorCesiumWriter> using$342 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$342.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(154, 172, 124, 8));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqualEpsilon(new Color(0.674509803921569, 0.486274509803922, 0.0313725490196078, 0.603921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$343 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$343.resource;
            packet.writeId("constant_agi_rectangularSensor_environmentIntersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_rectangularSensor_environmentIntersectionColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$344 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$344.resource;
                try (Using<ColorCesiumWriter> using$345 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$345.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(30, 41, 43, 77));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqualEpsilon(new Color(0.16078431372549, 0.168627450980392, 0.301960784313725, 0.117647058823529), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$346 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$346.resource;
            packet.writeId("constant_agi_rectangularSensor_viewshedVisibleColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_rectangularSensor_viewshedVisibleColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$347 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$347.resource;
                try (Using<ColorCesiumWriter> using$348 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$348.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(14, 235, 87, 42));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedVisibleColor.getValue(date)).toEqualEpsilon(new Color(0.92156862745098, 0.341176470588235, 0.164705882352941, 0.0549019607843137), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$349 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$349.resource;
            packet.writeId("constant_agi_rectangularSensor_viewshedOccludedColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_rectangularSensor_viewshedOccludedColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$350 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$350.resource;
                try (Using<ColorCesiumWriter> using$351 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$351.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(142, 47, 163, 170));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedOccludedColor.getValue(date)).toEqualEpsilon(new Color(0.184313725490196, 0.63921568627451, 0.666666666666667, 0.556862745098039), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualFan() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_agi_fan_directions_unitSpherical");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_fan_directions_unitSpherical')).toBeDefined();");
            try (Using<FanCesiumWriter> using$1 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$1.resource;
                try (Using<DirectionListCesiumWriter> using$2 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$2.resource;
                    w2.writeUnitSpherical(TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(58733.0, 12261.0), new UnitSpherical(59695.0, 54505.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.directions.getValue(date)).toEqual([ new Spherical(58733, 12261), new Spherical(59695, 54505) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_agi_fan_directions_cartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_fan_directions_cartesian')).toBeDefined();");
            try (Using<FanCesiumWriter> using$4 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$4.resource;
                try (Using<DirectionListCesiumWriter> using$5 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$5.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(26610.0, 54119.0, 64979.0), new Cartesian(9469.0, 6948.0, 56091.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.fan.directions.getValue(date)).toEqual([ Spherical.fromCartesian3(new Cartesian3(26610, 54119, 64979)), Spherical.fromCartesian3(new Cartesian3(9469, 6948, 56091)) ]);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_agi_fan_directions_unitCartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_fan_directions_unitCartesian')).toBeDefined();");
            try (Using<FanCesiumWriter> using$7 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$7.resource;
                try (Using<DirectionListCesiumWriter> using$8 = new Using<DirectionListCesiumWriter>(w.openDirectionsProperty())) {
                    final DirectionListCesiumWriter w2 = using$8.resource;
                    w2.writeUnitCartesian(TestGenerateValidationDocument.<UnitCartesian> createList(new UnitCartesian(0.511636686895275, 0.858618228999757, 0.0316644509213064),
                            new UnitCartesian(0.121216354583563, 0.632759881014748, 0.76480162680245)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.fan.directions.getValue(date)).toEqualEpsilon([ Spherical.fromCartesian3(new Cartesian3(0.511636686895275, 0.858618228999757, 0.0316644509213064)), Spherical.fromCartesian3(new Cartesian3(0.121216354583563, 0.632759881014748, 0.76480162680245)) ], 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$9 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$9.resource;
            packet.writeId("constant_fan_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_fan_material_solidColor_color')).toBeDefined();");
            try (Using<FanCesiumWriter> using$10 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$10.resource;
                try (Using<MaterialCesiumWriter> using$11 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$11.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$12 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$12.resource;
                        try (Using<ColorCesiumWriter> using$13 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$13.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(151, 68, 147, 60));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.266666666666667, 0.576470588235294, 0.235294117647059, 0.592156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$14 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$14.resource;
            packet.writeId("material_fan_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_image')).toBeDefined();");
            try (Using<FanCesiumWriter> using$15 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$15.resource;
                try (Using<MaterialCesiumWriter> using$16 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$16.resource;
                    try (Using<ImageMaterialCesiumWriter> using$17 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$17.resource;
                        try (Using<UriCesiumWriter> using$18 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$18.resource;
                            m2.writeUri("http://example.com/11768", CesiumResourceBehavior.LINK_TO);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.image.getValue(date).url).toEqual('http://example.com/11768');");
                        }
                        try (Using<RepeatCesiumWriter> using$19 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(new Rectangular(24583.0, 56160.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(date)).toEqual(new Cartesian2(24583, 56160));");
                        }
                        try (Using<ColorCesiumWriter> using$20 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$20.resource;
                            m2.writeRgba(ColorHelper.fromArgb(148, 173, 42, 118));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(173, 42, 118, 148));");
                        }
                        try (Using<BooleanCesiumWriter> using$21 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$21.resource;
                            m2.writeBoolean(true);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.transparent.getValue(date)).toEqual(true);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$22 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$22.resource;
            packet.writeId("material_fan_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_grid')).toBeDefined();");
            try (Using<FanCesiumWriter> using$23 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$23.resource;
                try (Using<MaterialCesiumWriter> using$24 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$24.resource;
                    try (Using<GridMaterialCesiumWriter> using$25 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$25.resource;
                        try (Using<ColorCesiumWriter> using$26 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$26.resource;
                            m2.writeRgba(ColorHelper.fromArgb(146, 41, 240, 181));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(date)).toEqual(Color.fromBytes(41, 240, 181, 146));");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(25319.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(25319.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$28 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$28.resource;
                            m2.writeCartesian2(new Rectangular(32075.0, 36477.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineCount.getValue(date)).toEqual(new Cartesian2(32075, 36477));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$29 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$29.resource;
                            m2.writeCartesian2(new Rectangular(10654.0, 41513.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineThickness.getValue(date)).toEqual(new Cartesian2(10654, 41513));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$30 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$30.resource;
                            m2.writeCartesian2(new Rectangular(16605.0, 57664.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineOffset.getValue(date)).toEqual(new Cartesian2(16605, 57664));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("material_fan_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_stripe')).toBeDefined();");
            try (Using<FanCesiumWriter> using$32 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<StripeMaterialCesiumWriter> using$34 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$34.resource;
                        try (Using<StripeOrientationCesiumWriter> using$35 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$35.resource;
                            m2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.orientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(ColorHelper.fromArgb(156, 166, 47, 64));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.evenColor.getValue(date)).toEqual(Color.fromBytes(166, 47, 64, 156));");
                        }
                        try (Using<ColorCesiumWriter> using$37 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$37.resource;
                            m2.writeRgba(ColorHelper.fromArgb(253, 245, 22, 105));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.oddColor.getValue(date)).toEqual(Color.fromBytes(245, 22, 105, 253));");
                        }
                        try (Using<DoubleCesiumWriter> using$38 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$38.resource;
                            m2.writeNumber(40932.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(date)).toEqual(40932.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$39 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$39.resource;
                            m2.writeNumber(32181.0);
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(date)).toEqual(32181.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("material_fan_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('material_fan_material_checkerboard')).toBeDefined();");
            try (Using<FanCesiumWriter> using$41 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$43 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgba(ColorHelper.fromArgb(9, 65, 103, 119));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.evenColor.getValue(date)).toEqual(Color.fromBytes(65, 103, 119, 9));");
                        }
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeRgba(ColorHelper.fromArgb(13, 34, 102, 5));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.oddColor.getValue(date)).toEqual(Color.fromBytes(34, 102, 5, 13));");
                        }
                        try (Using<RepeatCesiumWriter> using$46 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$46.resource;
                            m2.writeCartesian2(new Rectangular(27029.0, 37737.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(date)).toEqual(new Cartesian2(27029, 37737));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$47 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$47.resource;
            packet.writeId("constant_fan_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_fan_material_image_color')).toBeDefined();");
            try (Using<FanCesiumWriter> using$48 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$48.resource;
                try (Using<MaterialCesiumWriter> using$49 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$49.resource;
                    try (Using<ImageMaterialCesiumWriter> using$50 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$50.resource;
                        try (Using<ColorCesiumWriter> using$51 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$51.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(213, 227, 125, 222));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.890196078431372, 0.490196078431373, 0.870588235294118, 0.835294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$52 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$52.resource;
            packet.writeId("constant_fan_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_fan_material_grid_color')).toBeDefined();");
            try (Using<FanCesiumWriter> using$53 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$53.resource;
                try (Using<MaterialCesiumWriter> using$54 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$54.resource;
                    try (Using<GridMaterialCesiumWriter> using$55 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$55.resource;
                        try (Using<ColorCesiumWriter> using$56 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$56.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(184, 143, 103, 70));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(date)).toEqualEpsilon(new Color(0.56078431372549, 0.403921568627451, 0.274509803921569, 0.72156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$57 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$57.resource;
            packet.writeId("constant_fan_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_fan_material_stripe_evenColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$58 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$58.resource;
                try (Using<MaterialCesiumWriter> using$59 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$59.resource;
                    try (Using<StripeMaterialCesiumWriter> using$60 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$60.resource;
                        try (Using<ColorCesiumWriter> using$61 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$61.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(231, 32, 210, 88));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.125490196078431, 0.823529411764706, 0.345098039215686, 0.905882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$62 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$62.resource;
            packet.writeId("constant_fan_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_fan_material_stripe_oddColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$63 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$63.resource;
                try (Using<MaterialCesiumWriter> using$64 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$64.resource;
                    try (Using<StripeMaterialCesiumWriter> using$65 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$65.resource;
                        try (Using<ColorCesiumWriter> using$66 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$66.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(189, 244, 137, 252));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.956862745098039, 0.537254901960784, 0.988235294117647, 0.741176470588235), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$67 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$67.resource;
            packet.writeId("constant_fan_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_fan_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$68 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$68.resource;
                try (Using<MaterialCesiumWriter> using$69 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$69.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$70 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$70.resource;
                        try (Using<ColorCesiumWriter> using$71 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$71.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(195, 145, 82, 206));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(date)).toEqualEpsilon(new Color(0.568627450980392, 0.32156862745098, 0.807843137254902, 0.764705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$72 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$72.resource;
            packet.writeId("constant_fan_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_fan_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$73 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$73.resource;
                try (Using<MaterialCesiumWriter> using$74 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$74.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$75 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$75.resource;
                        try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$76.resource;
                            m2.writeRgbaf(ColorHelper.fromArgb(124, 250, 167, 68));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(date)).toEqualEpsilon(new Color(0.980392156862745, 0.654901960784314, 0.266666666666667, 0.486274509803922), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$77 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$77.resource;
            packet.writeId("constant_agi_fan_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_fan_outlineColor_rgbaf')).toBeDefined();");
            try (Using<FanCesiumWriter> using$78 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$78.resource;
                try (Using<ColorCesiumWriter> using$79 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$79.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(219, 41, 151, 54));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.fan.outlineColor.getValue(date)).toEqualEpsilon(new Color(0.16078431372549, 0.592156862745098, 0.211764705882353, 0.858823529411765), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesIndividualVector() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_agi_vector_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_vector_color_rgbaf')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$1 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(172, 93, 204, 191));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.color.getValue(date)).toEqualEpsilon(new Color(0.364705882352941, 0.8, 0.749019607843137, 0.674509803921569), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("constant_agi_vector_direction_unitSpherical");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_vector_direction_unitSpherical')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$4 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$4.resource;
                try (Using<DirectionCesiumWriter> using$5 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$5.resource;
                    w2.writeUnitSpherical(new UnitSpherical(34609.0, 391.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(date)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(34609, 391)), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("constant_agi_vector_direction_cartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_vector_direction_cartesian')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$7 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$7.resource;
                try (Using<DirectionCesiumWriter> using$8 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$8.resource;
                    w2.writeCartesian(new Cartesian(42919.0, 34215.0, 55429.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(new Cartesian3(42919, 34215, 55429));");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$9 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$9.resource;
            packet.writeId("constant_agi_vector_direction_unitCartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_agi_vector_direction_unitCartesian')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$10 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$10.resource;
                try (Using<DirectionCesiumWriter> using$11 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$11.resource;
                    w2.writeUnitCartesian(new UnitCartesian(0.408369179119112, 0.647772264783761, 0.643137393192543));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(date)).toEqualEpsilon(new Cartesian3(0.408369179119112, 0.647772264783761, 0.643137393192543), 1e-14);");
                }
            }
        }
    }

    private final void writeConstantValuesCustomProperties() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("constant_custom");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('constant_custom')).toBeDefined();");
            try (Using<CustomPropertiesCesiumWriter> using$1 = new Using<CustomPropertiesCesiumWriter>(packet.openPropertiesProperty())) {
                final CustomPropertiesCesiumWriter w = using$1.resource;
                try (Using<CustomPropertyCesiumWriter> using$2 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_boolean"))) {
                    final CustomPropertyCesiumWriter w2 = using$2.resource;
                    w2.writeBoolean(true);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_boolean.getValue(date)).toEqual(true);");
                }
                try (Using<CustomPropertyCesiumWriter> using$3 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_boundingRectangle"))) {
                    final CustomPropertyCesiumWriter w2 = using$3.resource;
                    w2.writeBoundingRectangle(BoundingRectangle.fromWidthHeight(9369.0, 63524.0, 6904.0, 17690.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_boundingRectangle.getValue(date)).toEqual(new BoundingRectangle(9369, 63524, 6904, 17690));");
                }
                try (Using<CustomPropertyCesiumWriter> using$4 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartesian"))) {
                    final CustomPropertyCesiumWriter w2 = using$4.resource;
                    w2.writeCartesian(new Cartesian(28502.0, 45167.0, 944.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartesian.getValue(date)).toEqual(new Cartesian3(28502, 45167, 944));");
                }
                try (Using<CustomPropertyCesiumWriter> using$5 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartographicRadians"))) {
                    final CustomPropertyCesiumWriter w2 = using$5.resource;
                    w2.writeCartographicRadians(new Cartographic(0.350571264887744, 0.633274262413284, 42979.0));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_cartographicRadians.getValue(date)).toEqual(Cartesian3.fromRadians(0.350571264887744, 0.633274262413284, 42979));");
                }
                try (Using<CustomPropertyCesiumWriter> using$6 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartographicDegrees"))) {
                    final CustomPropertyCesiumWriter w2 = using$6.resource;
                    w2.writeCartographicDegrees(new Cartographic(18.0, 36.0, 37743.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartographicDegrees.getValue(date)).toEqual(Cartesian3.fromDegrees(18, 36, 37743));");
                }
                try (Using<CustomPropertyCesiumWriter> using$7 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartesian2"))) {
                    final CustomPropertyCesiumWriter w2 = using$7.resource;
                    w2.writeCartesian2(new Rectangular(44825.0, 16303.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartesian2.getValue(date)).toEqual(new Cartesian2(44825, 16303));");
                }
                try (Using<CustomPropertyCesiumWriter> using$8 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_unitCartesian"))) {
                    final CustomPropertyCesiumWriter w2 = using$8.resource;
                    w2.writeUnitCartesian(new UnitCartesian(0.77935070007851, 0.565493818550955, 0.269868907930861));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitCartesian.getValue(date)).toEqualEpsilon(new Cartesian3(0.77935070007851, 0.565493818550955, 0.269868907930861), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$9 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_spherical"))) {
                    final CustomPropertyCesiumWriter w2 = using$9.resource;
                    w2.writeSpherical(new Spherical(1705.0, 13830.0, 21558.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_spherical.getValue(date)).toEqual(Cartesian3.fromSpherical(new Spherical(1705, 13830, 21558)));");
                }
                try (Using<CustomPropertyCesiumWriter> using$10 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_unitSpherical"))) {
                    final CustomPropertyCesiumWriter w2 = using$10.resource;
                    w2.writeUnitSpherical(new UnitSpherical(59387.0, 15591.0));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitSpherical.getValue(date)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(59387, 15591)), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$11 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_rgba"))) {
                    final CustomPropertyCesiumWriter w2 = using$11.resource;
                    w2.writeRgba(ColorHelper.fromArgb(147, 50, 149, 175));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_rgba.getValue(date)).toEqual(Color.fromBytes(50, 149, 175, 147));");
                }
                try (Using<CustomPropertyCesiumWriter> using$12 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_rgbaf"))) {
                    final CustomPropertyCesiumWriter w2 = using$12.resource;
                    w2.writeRgbaf(ColorHelper.fromArgb(109, 17, 17, 59));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_rgbaf.getValue(date)).toEqualEpsilon(new Color(0.0666666666666667, 0.0666666666666667, 0.231372549019608, 0.427450980392157), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$13 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_colorBlendMode"))) {
                    final CustomPropertyCesiumWriter w2 = using$13.resource;
                    w2.writeColorBlendMode(CesiumColorBlendMode.REPLACE);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_colorBlendMode.getValue(date)).toEqual(ColorBlendMode.REPLACE);");
                }
                try (Using<CustomPropertyCesiumWriter> using$14 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cornerType"))) {
                    final CustomPropertyCesiumWriter w2 = using$14.resource;
                    w2.writeCornerType(CesiumCornerType.BEVELED);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cornerType.getValue(date)).toEqual(CornerType.BEVELED);");
                }
                try (Using<CustomPropertyCesiumWriter> using$15 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_heightReference"))) {
                    final CustomPropertyCesiumWriter w2 = using$15.resource;
                    w2.writeHeightReference(CesiumHeightReference.CLAMP_TO_GROUND);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_heightReference.getValue(date)).toEqual(HeightReference.CLAMP_TO_GROUND);");
                }
                try (Using<CustomPropertyCesiumWriter> using$16 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_horizontalOrigin"))) {
                    final CustomPropertyCesiumWriter w2 = using$16.resource;
                    w2.writeHorizontalOrigin(CesiumHorizontalOrigin.LEFT);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_horizontalOrigin.getValue(date)).toEqual(HorizontalOrigin.LEFT);");
                }
                try (Using<CustomPropertyCesiumWriter> using$17 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_labelStyle"))) {
                    final CustomPropertyCesiumWriter w2 = using$17.resource;
                    w2.writeLabelStyle(CesiumLabelStyle.FILL_AND_OUTLINE);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_labelStyle.getValue(date)).toEqual(LabelStyle.FILL_AND_OUTLINE);");
                }
                try (Using<CustomPropertyCesiumWriter> using$18 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_number"))) {
                    final CustomPropertyCesiumWriter w2 = using$18.resource;
                    w2.writeNumber(31507.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_number.getValue(date)).toEqual(31507.0);");
                }
                try (Using<CustomPropertyCesiumWriter> using$19 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_nearFarScalar"))) {
                    final CustomPropertyCesiumWriter w2 = using$19.resource;
                    w2.writeNearFarScalar(new NearFarScalar(14621.0, 24121.0, 16734.0, 56129.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_nearFarScalar.getValue(date)).toEqual(new NearFarScalar(14621, 24121, 16734, 56129));");
                }
                try (Using<CustomPropertyCesiumWriter> using$20 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_unitQuaternion"))) {
                    final CustomPropertyCesiumWriter w2 = using$20.resource;
                    w2.writeUnitQuaternion(new UnitQuaternion(0.344558178514049, 0.742737937277143, 0.267679401430615, 0.507905263014791));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitQuaternion.getValue(date)).toEqualEpsilon(new Quaternion(0.742737937277143, 0.267679401430615, 0.507905263014791, 0.344558178514049), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$21 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_shadowMode"))) {
                    final CustomPropertyCesiumWriter w2 = using$21.resource;
                    w2.writeShadowMode(CesiumShadowMode.CAST_ONLY);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_shadowMode.getValue(date)).toEqual(ShadowMode.CAST_ONLY);");
                }
                try (Using<CustomPropertyCesiumWriter> using$22 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_string"))) {
                    final CustomPropertyCesiumWriter w2 = using$22.resource;
                    w2.writeString("string41758");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_string.getValue(date)).toEqual('string41758');");
                }
                try (Using<CustomPropertyCesiumWriter> using$23 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_stripeOrientation"))) {
                    final CustomPropertyCesiumWriter w2 = using$23.resource;
                    w2.writeStripeOrientation(CesiumStripeOrientation.VERTICAL);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_stripeOrientation.getValue(date)).toEqual(StripeOrientation.VERTICAL);");
                }
                try (Using<CustomPropertyCesiumWriter> using$24 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_wsen"))) {
                    final CustomPropertyCesiumWriter w2 = using$24.resource;
                    w2.writeWsen(new CartographicExtent(1.47520917005826, 1.17615981869183, 0.973692387723505, 1.00039738410474));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_wsen.getValue(date)).toEqual(new Rectangle(1.47520917005826, 1.17615981869183, 0.973692387723505, 1.00039738410474));");
                }
                try (Using<CustomPropertyCesiumWriter> using$25 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_wsenDegrees"))) {
                    final CustomPropertyCesiumWriter w2 = using$25.resource;
                    w2.writeWsenDegrees(new CartographicExtent(5.0, 3.0, 6.0, 19.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_wsenDegrees.getValue(date)).toEqual(Rectangle.fromDegrees(5, 3, 6, 19));");
                }
                try (Using<CustomPropertyCesiumWriter> using$26 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_uri"))) {
                    final CustomPropertyCesiumWriter w2 = using$26.resource;
                    w2.writeUri("http://example.com/41986", CesiumResourceBehavior.LINK_TO);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_uri.getValue(date).url).toEqual('http://example.com/41986');");
                }
                try (Using<CustomPropertyCesiumWriter> using$27 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_verticalOrigin"))) {
                    final CustomPropertyCesiumWriter w2 = using$27.resource;
                    w2.writeVerticalOrigin(CesiumVerticalOrigin.BOTTOM);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_verticalOrigin.getValue(date)).toEqual(VerticalOrigin.BOTTOM);");
                }
            }
        }
    }

    private final void writeReferenceValues() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("ConstantPosition1");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition1')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$1 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$1.resource;
                w.writeCartesian(new Cartesian(48370.0, 3260.0, 44044.0));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(48370, 3260, 44044));");
            }
        }
        try (Using<PacketCesiumWriter> using$2 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$2.resource;
            packet.writeId("ConstantDouble1");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble1')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$3 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$3.resource;
                try (Using<DoubleCesiumWriter> using$4 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$4.resource;
                    w2.writeNumber(1155.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(1155.0);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("ConstantPosition2");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition2')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$6 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$6.resource;
                w.writeCartesian(new Cartesian(2599.0, 10.0, 39168.0));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(2599, 10, 39168));");
            }
        }
        try (Using<PacketCesiumWriter> using$7 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$7.resource;
            packet.writeId("ConstantDouble2");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble2')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$8 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$8.resource;
                try (Using<DoubleCesiumWriter> using$9 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$9.resource;
                    w2.writeNumber(16451.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(16451.0);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$10 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$10.resource;
            packet.writeId("ConstantPosition3");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantPosition3')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$11 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$11.resource;
                w.writeCartesian(new Cartesian(1758.0, 45062.0, 8624.0));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(new Cartesian3(1758, 45062, 8624));");
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("ConstantDouble3");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('ConstantDouble3')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$13 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$13.resource;
                try (Using<DoubleCesiumWriter> using$14 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$14.resource;
                    w2.writeNumber(50938.0);
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(50938.0);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$15 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$15.resource;
            packet.writeId("Reference");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('Reference')).toBeDefined();");
            try (Using<StringCesiumWriter> using$16 = new Using<StringCesiumWriter>(packet.openDescriptionProperty())) {
                final StringCesiumWriter w = using$16.resource;
                w.writeReference(new Reference("Constant", "description"));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.description.getValue(date)).toEqual(constant.description.getValue(date));");
            }
            try (Using<PositionCesiumWriter> using$17 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$17.resource;
                w.writeReference(new Reference("Constant", "position"));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(date)).toEqual(constant.position.getValue(date));");
            }
            try (Using<OrientationCesiumWriter> using$18 = new Using<OrientationCesiumWriter>(packet.openOrientationProperty())) {
                final OrientationCesiumWriter w = using$18.resource;
                w.writeReference(new Reference("Constant", "orientation"));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.orientation.getValue(date)).toEqual(constant.orientation.getValue(date));");
            }
            try (Using<ViewFromCesiumWriter> using$19 = new Using<ViewFromCesiumWriter>(packet.openViewFromProperty())) {
                final ViewFromCesiumWriter w = using$19.resource;
                w.writeReference(new Reference("Constant", "viewFrom"));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(date)).toEqual(constant.viewFrom.getValue(date));");
            }
            try (Using<BillboardCesiumWriter> using$20 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$20.resource;
                try (Using<BooleanCesiumWriter> using$21 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$21.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.show.getValue(date)).toEqual(constant.billboard.show.getValue(date));");
                }
                try (Using<UriCesiumWriter> using$22 = new Using<UriCesiumWriter>(w.openImageProperty())) {
                    final UriCesiumWriter w2 = using$22.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "image")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.image.getValue(date)).toEqual(constant.billboard.image.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$23 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$23.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "scale")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(date)).toEqual(constant.billboard.scale.getValue(date));");
                }
                try (Using<PixelOffsetCesiumWriter> using$24 = new Using<PixelOffsetCesiumWriter>(w.openPixelOffsetProperty())) {
                    final PixelOffsetCesiumWriter w2 = using$24.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "pixelOffset")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(date)).toEqual(constant.billboard.pixelOffset.getValue(date));");
                }
                try (Using<EyeOffsetCesiumWriter> using$25 = new Using<EyeOffsetCesiumWriter>(w.openEyeOffsetProperty())) {
                    final EyeOffsetCesiumWriter w2 = using$25.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "eyeOffset")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(date)).toEqual(constant.billboard.eyeOffset.getValue(date));");
                }
                try (Using<HorizontalOriginCesiumWriter> using$26 = new Using<HorizontalOriginCesiumWriter>(w.openHorizontalOriginProperty())) {
                    final HorizontalOriginCesiumWriter w2 = using$26.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "horizontalOrigin")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.horizontalOrigin.getValue(date)).toEqual(constant.billboard.horizontalOrigin.getValue(date));");
                }
                try (Using<VerticalOriginCesiumWriter> using$27 = new Using<VerticalOriginCesiumWriter>(w.openVerticalOriginProperty())) {
                    final VerticalOriginCesiumWriter w2 = using$27.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "verticalOrigin")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.verticalOrigin.getValue(date)).toEqual(constant.billboard.verticalOrigin.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$28 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$28.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.heightReference.getValue(date)).toEqual(constant.billboard.heightReference.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$29 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$29.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "color")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(date)).toEqual(constant.billboard.color.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$30.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "rotation")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(date)).toEqual(constant.billboard.rotation.getValue(date));");
                }
                try (Using<AlignedAxisCesiumWriter> using$31 = new Using<AlignedAxisCesiumWriter>(w.openAlignedAxisProperty())) {
                    final AlignedAxisCesiumWriter w2 = using$31.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "alignedAxis")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.alignedAxis.getValue(date)).toEqual(constant.billboard.alignedAxis.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$32 = new Using<BooleanCesiumWriter>(w.openSizeInMetersProperty())) {
                    final BooleanCesiumWriter w2 = using$32.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "sizeInMeters")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.sizeInMeters.getValue(date)).toEqual(constant.billboard.sizeInMeters.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$33 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$33.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "width")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(date)).toEqual(constant.billboard.width.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$34 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$34.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "height")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(date)).toEqual(constant.billboard.height.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$35 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$35.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "scaleByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(date)).toEqual(constant.billboard.scaleByDistance.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$36 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$36.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "translucencyByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(date)).toEqual(constant.billboard.translucencyByDistance.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$37 = new Using<NearFarScalarCesiumWriter>(w.openPixelOffsetScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$37.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "pixelOffsetScaleByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.billboard.pixelOffsetScaleByDistance.getValue(date));");
                }
                try (Using<BoundingRectangleCesiumWriter> using$38 = new Using<BoundingRectangleCesiumWriter>(w.openImageSubRegionProperty())) {
                    final BoundingRectangleCesiumWriter w2 = using$38.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "imageSubRegion")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(date)).toEqual(constant.billboard.imageSubRegion.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$39 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$39.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.distanceDisplayCondition.getValue(date)).toEqual(constant.billboard.distanceDisplayCondition.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$40 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$40.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("billboard", "disableDepthTestDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.disableDepthTestDistance.getValue(date)).toEqual(constant.billboard.disableDepthTestDistance.getValue(date));");
                }
            }
            try (Using<BoxCesiumWriter> using$41 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$41.resource;
                try (Using<BooleanCesiumWriter> using$42 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$42.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.show.getValue(date)).toEqual(constant.box.show.getValue(date));");
                }
                try (Using<BoxDimensionsCesiumWriter> using$43 = new Using<BoxDimensionsCesiumWriter>(w.openDimensionsProperty())) {
                    final BoxDimensionsCesiumWriter w2 = using$43.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "dimensions")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(date)).toEqual(constant.box.dimensions.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$44 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$44.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.heightReference.getValue(date)).toEqual(constant.box.heightReference.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$45 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$45.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.fill.getValue(date)).toEqual(constant.box.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$46 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$46.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$47 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$47.resource;
                        try (Using<ColorCesiumWriter> using$48 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$48.resource;
                            m2.writeReference(new Reference("Constant", createList("box", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(date)).toEqual(constant.box.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$49 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$49.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outline.getValue(date)).toEqual(constant.box.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$50 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$50.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(date)).toEqual(constant.box.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$51 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$51.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(date)).toEqual(constant.box.outlineWidth.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$52 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$52.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.shadows.getValue(date)).toEqual(constant.box.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$53 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$53.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("box", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.distanceDisplayCondition.getValue(date)).toEqual(constant.box.distanceDisplayCondition.getValue(date));");
                }
            }
            try (Using<CorridorCesiumWriter> using$54 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$54.resource;
                try (Using<BooleanCesiumWriter> using$55 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$55.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.show.getValue(date)).toEqual(constant.corridor.show.getValue(date));");
                }
                try (Using<PositionListCesiumWriter> using$56 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$56.resource;
                    w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")),
                            new Reference("ConstantPosition2", createList("position"))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                }
                try (Using<DoubleCesiumWriter> using$57 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$57.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "width")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(date)).toEqual(constant.corridor.width.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$58 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$58.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "height")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(date)).toEqual(constant.corridor.height.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$59 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$59.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.heightReference.getValue(date)).toEqual(constant.corridor.heightReference.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$60 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$60.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "extrudedHeight")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(date)).toEqual(constant.corridor.extrudedHeight.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$61 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$61.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "extrudedHeightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeightReference.getValue(date)).toEqual(constant.corridor.extrudedHeightReference.getValue(date));");
                }
                try (Using<CornerTypeCesiumWriter> using$62 = new Using<CornerTypeCesiumWriter>(w.openCornerTypeProperty())) {
                    final CornerTypeCesiumWriter w2 = using$62.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "cornerType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.cornerType.getValue(date)).toEqual(constant.corridor.cornerType.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$63 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$63.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "granularity")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(date)).toEqual(constant.corridor.granularity.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$64 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$64.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.fill.getValue(date)).toEqual(constant.corridor.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$66 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeReference(new Reference("Constant", createList("corridor", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(date)).toEqual(constant.corridor.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$68 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$68.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outline.getValue(date)).toEqual(constant.corridor.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$69 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$69.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(date)).toEqual(constant.corridor.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$70 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$70.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(date)).toEqual(constant.corridor.outlineWidth.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$71 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$71.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.shadows.getValue(date)).toEqual(constant.corridor.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$72 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$72.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.distanceDisplayCondition.getValue(date)).toEqual(constant.corridor.distanceDisplayCondition.getValue(date));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$73 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$73.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "classificationType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.classificationType.getValue(date)).toEqual(constant.corridor.classificationType.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$74 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$74.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("corridor", "zIndex")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.zIndex.getValue(date)).toEqual(constant.corridor.zIndex.getValue(date));");
                }
            }
            try (Using<CylinderCesiumWriter> using$75 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$75.resource;
                try (Using<BooleanCesiumWriter> using$76 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$76.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.show.getValue(date)).toEqual(constant.cylinder.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$77 = new Using<DoubleCesiumWriter>(w.openLengthProperty())) {
                    final DoubleCesiumWriter w2 = using$77.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "length")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(date)).toEqual(constant.cylinder.length.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$78 = new Using<DoubleCesiumWriter>(w.openTopRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$78.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "topRadius")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(date)).toEqual(constant.cylinder.topRadius.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$79 = new Using<DoubleCesiumWriter>(w.openBottomRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$79.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "bottomRadius")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(date)).toEqual(constant.cylinder.bottomRadius.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$80 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$80.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.heightReference.getValue(date)).toEqual(constant.cylinder.heightReference.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$81 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$81.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.fill.getValue(date)).toEqual(constant.cylinder.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$82 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$82.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$83 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$83.resource;
                        try (Using<ColorCesiumWriter> using$84 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$84.resource;
                            m2.writeReference(new Reference("Constant", createList("cylinder", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(date)).toEqual(constant.cylinder.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$85 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$85.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outline.getValue(date)).toEqual(constant.cylinder.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$86 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$86.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(date)).toEqual(constant.cylinder.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$87 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$87.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(date)).toEqual(constant.cylinder.outlineWidth.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$88 = new Using<IntegerCesiumWriter>(w.openNumberOfVerticalLinesProperty())) {
                    final IntegerCesiumWriter w2 = using$88.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "numberOfVerticalLines")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(date)).toEqual(constant.cylinder.numberOfVerticalLines.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$89 = new Using<IntegerCesiumWriter>(w.openSlicesProperty())) {
                    final IntegerCesiumWriter w2 = using$89.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "slices")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(date)).toEqual(constant.cylinder.slices.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$90 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$90.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.shadows.getValue(date)).toEqual(constant.cylinder.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$91 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$91.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("cylinder", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.cylinder.distanceDisplayCondition.getValue(date)).toEqual(constant.cylinder.distanceDisplayCondition.getValue(date));");
                }
            }
            try (Using<EllipseCesiumWriter> using$92 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$92.resource;
                try (Using<BooleanCesiumWriter> using$93 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$93.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.show.getValue(date)).toEqual(constant.ellipse.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$94 = new Using<DoubleCesiumWriter>(w.openSemiMajorAxisProperty())) {
                    final DoubleCesiumWriter w2 = using$94.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "semiMajorAxis")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(date)).toEqual(constant.ellipse.semiMajorAxis.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$95 = new Using<DoubleCesiumWriter>(w.openSemiMinorAxisProperty())) {
                    final DoubleCesiumWriter w2 = using$95.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "semiMinorAxis")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(date)).toEqual(constant.ellipse.semiMinorAxis.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$96 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$96.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "height")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(date)).toEqual(constant.ellipse.height.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$97 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$97.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.heightReference.getValue(date)).toEqual(constant.ellipse.heightReference.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$98 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$98.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "extrudedHeight")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(date)).toEqual(constant.ellipse.extrudedHeight.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$99 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$99.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "extrudedHeightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeightReference.getValue(date)).toEqual(constant.ellipse.extrudedHeightReference.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$100 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$100.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "rotation")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(date)).toEqual(constant.ellipse.rotation.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$101 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$101.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "stRotation")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(date)).toEqual(constant.ellipse.stRotation.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$102 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$102.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "granularity")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(date)).toEqual(constant.ellipse.granularity.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$103 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$103.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.fill.getValue(date)).toEqual(constant.ellipse.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$104 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$104.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$105 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$105.resource;
                        try (Using<ColorCesiumWriter> using$106 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$106.resource;
                            m2.writeReference(new Reference("Constant", createList("ellipse", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(date)).toEqual(constant.ellipse.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$107 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$107.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outline.getValue(date)).toEqual(constant.ellipse.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$108 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$108.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(date)).toEqual(constant.ellipse.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$109 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$109.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(date)).toEqual(constant.ellipse.outlineWidth.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$110 = new Using<IntegerCesiumWriter>(w.openNumberOfVerticalLinesProperty())) {
                    final IntegerCesiumWriter w2 = using$110.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "numberOfVerticalLines")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(date)).toEqual(constant.ellipse.numberOfVerticalLines.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$111 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$111.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.shadows.getValue(date)).toEqual(constant.ellipse.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$112 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$112.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.distanceDisplayCondition.getValue(date)).toEqual(constant.ellipse.distanceDisplayCondition.getValue(date));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$113 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$113.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "classificationType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.classificationType.getValue(date)).toEqual(constant.ellipse.classificationType.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$114 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$114.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipse", "zIndex")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.zIndex.getValue(date)).toEqual(constant.ellipse.zIndex.getValue(date));");
                }
            }
            try (Using<EllipsoidCesiumWriter> using$115 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$115.resource;
                try (Using<BooleanCesiumWriter> using$116 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$116.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.show.getValue(date)).toEqual(constant.ellipsoid.show.getValue(date));");
                }
                try (Using<EllipsoidRadiiCesiumWriter> using$117 = new Using<EllipsoidRadiiCesiumWriter>(w.openRadiiProperty())) {
                    final EllipsoidRadiiCesiumWriter w2 = using$117.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "radii")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(date)).toEqual(constant.ellipsoid.radii.getValue(date));");
                }
                try (Using<EllipsoidRadiiCesiumWriter> using$118 = new Using<EllipsoidRadiiCesiumWriter>(w.openInnerRadiiProperty())) {
                    final EllipsoidRadiiCesiumWriter w2 = using$118.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "innerRadii")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.innerRadii.getValue(date)).toEqual(constant.ellipsoid.innerRadii.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$119 = new Using<DoubleCesiumWriter>(w.openMinimumClockProperty())) {
                    final DoubleCesiumWriter w2 = using$119.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "minimumClock")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumClock.getValue(date)).toEqual(constant.ellipsoid.minimumClock.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$120 = new Using<DoubleCesiumWriter>(w.openMaximumClockProperty())) {
                    final DoubleCesiumWriter w2 = using$120.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "maximumClock")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumClock.getValue(date)).toEqual(constant.ellipsoid.maximumClock.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$121 = new Using<DoubleCesiumWriter>(w.openMinimumConeProperty())) {
                    final DoubleCesiumWriter w2 = using$121.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "minimumCone")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumCone.getValue(date)).toEqual(constant.ellipsoid.minimumCone.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$122 = new Using<DoubleCesiumWriter>(w.openMaximumConeProperty())) {
                    final DoubleCesiumWriter w2 = using$122.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "maximumCone")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumCone.getValue(date)).toEqual(constant.ellipsoid.maximumCone.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$123 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$123.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.heightReference.getValue(date)).toEqual(constant.ellipsoid.heightReference.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$124 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$124.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.fill.getValue(date)).toEqual(constant.ellipsoid.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$125 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$125.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$126 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$126.resource;
                        try (Using<ColorCesiumWriter> using$127 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$127.resource;
                            m2.writeReference(new Reference("Constant", createList("ellipsoid", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(constant.ellipsoid.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$128 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$128.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outline.getValue(date)).toEqual(constant.ellipsoid.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$129 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$129.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(date)).toEqual(constant.ellipsoid.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$130 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$130.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(date)).toEqual(constant.ellipsoid.outlineWidth.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$131 = new Using<IntegerCesiumWriter>(w.openStackPartitionsProperty())) {
                    final IntegerCesiumWriter w2 = using$131.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "stackPartitions")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(date)).toEqual(constant.ellipsoid.stackPartitions.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$132 = new Using<IntegerCesiumWriter>(w.openSlicePartitionsProperty())) {
                    final IntegerCesiumWriter w2 = using$132.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "slicePartitions")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(date)).toEqual(constant.ellipsoid.slicePartitions.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$133 = new Using<IntegerCesiumWriter>(w.openSubdivisionsProperty())) {
                    final IntegerCesiumWriter w2 = using$133.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "subdivisions")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(date)).toEqual(constant.ellipsoid.subdivisions.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$134 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$134.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.shadows.getValue(date)).toEqual(constant.ellipsoid.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$135 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$135.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("ellipsoid", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.ellipsoid.distanceDisplayCondition.getValue(date)).toEqual(constant.ellipsoid.distanceDisplayCondition.getValue(date));");
                }
            }
            try (Using<LabelCesiumWriter> using$136 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$136.resource;
                try (Using<BooleanCesiumWriter> using$137 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$137.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.show.getValue(date)).toEqual(constant.label.show.getValue(date));");
                }
                try (Using<StringCesiumWriter> using$138 = new Using<StringCesiumWriter>(w.openTextProperty())) {
                    final StringCesiumWriter w2 = using$138.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "text")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.text.getValue(date)).toEqual(constant.label.text.getValue(date));");
                }
                try (Using<FontCesiumWriter> using$139 = new Using<FontCesiumWriter>(w.openFontProperty())) {
                    final FontCesiumWriter w2 = using$139.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "font")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.font.getValue(date)).toEqual(constant.label.font.getValue(date));");
                }
                try (Using<LabelStyleCesiumWriter> using$140 = new Using<LabelStyleCesiumWriter>(w.openStyleProperty())) {
                    final LabelStyleCesiumWriter w2 = using$140.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "style")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.style.getValue(date)).toEqual(constant.label.style.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$141 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$141.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "scale")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(date)).toEqual(constant.label.scale.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$142 = new Using<BooleanCesiumWriter>(w.openShowBackgroundProperty())) {
                    final BooleanCesiumWriter w2 = using$142.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "showBackground")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.showBackground.getValue(date)).toEqual(constant.label.showBackground.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$143 = new Using<ColorCesiumWriter>(w.openBackgroundColorProperty())) {
                    final ColorCesiumWriter w2 = using$143.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "backgroundColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundColor.getValue(date)).toEqual(constant.label.backgroundColor.getValue(date));");
                }
                try (Using<BackgroundPaddingCesiumWriter> using$144 = new Using<BackgroundPaddingCesiumWriter>(w.openBackgroundPaddingProperty())) {
                    final BackgroundPaddingCesiumWriter w2 = using$144.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "backgroundPadding")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundPadding.getValue(date)).toEqual(constant.label.backgroundPadding.getValue(date));");
                }
                try (Using<PixelOffsetCesiumWriter> using$145 = new Using<PixelOffsetCesiumWriter>(w.openPixelOffsetProperty())) {
                    final PixelOffsetCesiumWriter w2 = using$145.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "pixelOffset")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(date)).toEqual(constant.label.pixelOffset.getValue(date));");
                }
                try (Using<EyeOffsetCesiumWriter> using$146 = new Using<EyeOffsetCesiumWriter>(w.openEyeOffsetProperty())) {
                    final EyeOffsetCesiumWriter w2 = using$146.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "eyeOffset")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(date)).toEqual(constant.label.eyeOffset.getValue(date));");
                }
                try (Using<HorizontalOriginCesiumWriter> using$147 = new Using<HorizontalOriginCesiumWriter>(w.openHorizontalOriginProperty())) {
                    final HorizontalOriginCesiumWriter w2 = using$147.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "horizontalOrigin")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.horizontalOrigin.getValue(date)).toEqual(constant.label.horizontalOrigin.getValue(date));");
                }
                try (Using<VerticalOriginCesiumWriter> using$148 = new Using<VerticalOriginCesiumWriter>(w.openVerticalOriginProperty())) {
                    final VerticalOriginCesiumWriter w2 = using$148.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "verticalOrigin")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.verticalOrigin.getValue(date)).toEqual(constant.label.verticalOrigin.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$149 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$149.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.heightReference.getValue(date)).toEqual(constant.label.heightReference.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$150 = new Using<ColorCesiumWriter>(w.openFillColorProperty())) {
                    final ColorCesiumWriter w2 = using$150.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "fillColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(date)).toEqual(constant.label.fillColor.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$151 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$151.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(date)).toEqual(constant.label.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$152 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$152.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(date)).toEqual(constant.label.outlineWidth.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$153 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$153.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "translucencyByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(date)).toEqual(constant.label.translucencyByDistance.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$154 = new Using<NearFarScalarCesiumWriter>(w.openPixelOffsetScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$154.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "pixelOffsetScaleByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffsetScaleByDistance.getValue(date)).toEqual(constant.label.pixelOffsetScaleByDistance.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$155 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$155.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "scaleByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scaleByDistance.getValue(date)).toEqual(constant.label.scaleByDistance.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$156 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$156.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.distanceDisplayCondition.getValue(date)).toEqual(constant.label.distanceDisplayCondition.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$157.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("label", "disableDepthTestDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.disableDepthTestDistance.getValue(date)).toEqual(constant.label.disableDepthTestDistance.getValue(date));");
                }
            }
            try (Using<ModelCesiumWriter> using$158 = new Using<ModelCesiumWriter>(packet.openModelProperty())) {
                final ModelCesiumWriter w = using$158.resource;
                try (Using<BooleanCesiumWriter> using$159 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$159.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.show.getValue(date)).toEqual(constant.model.show.getValue(date));");
                }
                try (Using<UriCesiumWriter> using$160 = new Using<UriCesiumWriter>(w.openGltfProperty())) {
                    final UriCesiumWriter w2 = using$160.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "uri")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.uri.getValue(date)).toEqual(constant.model.uri.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$161 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$161.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "scale")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(date)).toEqual(constant.model.scale.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$162 = new Using<DoubleCesiumWriter>(w.openMinimumPixelSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$162.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "minimumPixelSize")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(date)).toEqual(constant.model.minimumPixelSize.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$163 = new Using<DoubleCesiumWriter>(w.openMaximumScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$163.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "maximumScale")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(date)).toEqual(constant.model.maximumScale.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$164 = new Using<BooleanCesiumWriter>(w.openIncrementallyLoadTexturesProperty())) {
                    final BooleanCesiumWriter w2 = using$164.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "incrementallyLoadTextures")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.incrementallyLoadTextures.getValue(date)).toEqual(constant.model.incrementallyLoadTextures.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$165 = new Using<BooleanCesiumWriter>(w.openRunAnimationsProperty())) {
                    final BooleanCesiumWriter w2 = using$165.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "runAnimations")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.runAnimations.getValue(date)).toEqual(constant.model.runAnimations.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$166 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$166.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.shadows.getValue(date)).toEqual(constant.model.shadows.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$167 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$167.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.heightReference.getValue(date)).toEqual(constant.model.heightReference.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$168 = new Using<ColorCesiumWriter>(w.openSilhouetteColorProperty())) {
                    final ColorCesiumWriter w2 = using$168.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "silhouetteColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteColor.getValue(date)).toEqual(constant.model.silhouetteColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$169 = new Using<DoubleCesiumWriter>(w.openSilhouetteSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$169.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "silhouetteSize")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteSize.getValue(date)).toEqual(constant.model.silhouetteSize.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$170 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$170.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "color")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.color.getValue(date)).toEqual(constant.model.color.getValue(date));");
                }
                try (Using<ColorBlendModeCesiumWriter> using$171 = new Using<ColorBlendModeCesiumWriter>(w.openColorBlendModeProperty())) {
                    final ColorBlendModeCesiumWriter w2 = using$171.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "colorBlendMode")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.colorBlendMode.getValue(date)).toEqual(constant.model.colorBlendMode.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$172 = new Using<DoubleCesiumWriter>(w.openColorBlendAmountProperty())) {
                    final DoubleCesiumWriter w2 = using$172.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "colorBlendAmount")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.colorBlendAmount.getValue(date)).toEqual(constant.model.colorBlendAmount.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$173 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$173.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("model", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.distanceDisplayCondition.getValue(date)).toEqual(constant.model.distanceDisplayCondition.getValue(date));");
                }
                try (Using<NodeTransformationsCesiumWriter> using$174 = new Using<NodeTransformationsCesiumWriter>(w.openNodeTransformationsProperty())) {
                    final NodeTransformationsCesiumWriter w2 = using$174.resource;
                    try (Using<NodeTransformationCesiumWriter> using$175 = new Using<NodeTransformationCesiumWriter>(w2.openNodeTransformationProperty("referenceProp"))) {
                        final NodeTransformationCesiumWriter a = using$175.resource;
                        try (Using<TranslationCesiumWriter> using$176 = new Using<TranslationCesiumWriter>(a.openTranslationProperty())) {
                            final TranslationCesiumWriter w3 = using$176.resource;
                            w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "translation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.model.nodeTransformations.referenceProp.translation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.translation.getValue(date));");
                        }
                        try (Using<RotationCesiumWriter> using$177 = new Using<RotationCesiumWriter>(a.openRotationProperty())) {
                            final RotationCesiumWriter w3 = using$177.resource;
                            w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "rotation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.model.nodeTransformations.referenceProp.rotation.getValue(date)).toEqual(constant.model.nodeTransformations.prop.rotation.getValue(date));");
                        }
                        try (Using<ScaleCesiumWriter> using$178 = new Using<ScaleCesiumWriter>(a.openScaleProperty())) {
                            final ScaleCesiumWriter w3 = using$178.resource;
                            w3.writeReference(new Reference("Constant", createList("model", "nodeTransformations", "prop", "scale")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.model.nodeTransformations.referenceProp.scale.getValue(date)).toEqual(constant.model.nodeTransformations.prop.scale.getValue(date));");
                        }
                    }
                }
                try (Using<ArticulationsCesiumWriter> using$179 = new Using<ArticulationsCesiumWriter>(w.openArticulationsProperty())) {
                    final ArticulationsCesiumWriter w2 = using$179.resource;
                    try (Using<ArticulationCesiumWriter> using$180 = new Using<ArticulationCesiumWriter>(w2.openArticulationProperty("referenceProp"))) {
                        final ArticulationCesiumWriter a = using$180.resource;
                        a.writeReference(new Reference("Constant", createList("model", "articulations", "prop")));
                        TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.articulations.referenceProp.getValue(date)).toEqual(constant.model.articulations.prop.getValue(date));");
                    }
                }
            }
            try (Using<PathCesiumWriter> using$181 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$181.resource;
                try (Using<BooleanCesiumWriter> using$182 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$182.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.show.getValue(date)).toEqual(constant.path.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$183 = new Using<DoubleCesiumWriter>(w.openLeadTimeProperty())) {
                    final DoubleCesiumWriter w2 = using$183.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "leadTime")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(date)).toEqual(constant.path.leadTime.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$184 = new Using<DoubleCesiumWriter>(w.openTrailTimeProperty())) {
                    final DoubleCesiumWriter w2 = using$184.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "trailTime")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(date)).toEqual(constant.path.trailTime.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$185 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$185.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "width")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(date)).toEqual(constant.path.width.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$186 = new Using<DoubleCesiumWriter>(w.openResolutionProperty())) {
                    final DoubleCesiumWriter w2 = using$186.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "resolution")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(date)).toEqual(constant.path.resolution.getValue(date));");
                }
                try (Using<PolylineMaterialCesiumWriter> using$187 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$187.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$188 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$188.resource;
                        try (Using<ColorCesiumWriter> using$189 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$189.resource;
                            m2.writeReference(new Reference("Constant", createList("path", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(date)).toEqual(constant.path.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$190 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$190.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("path", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.distanceDisplayCondition.getValue(date)).toEqual(constant.path.distanceDisplayCondition.getValue(date));");
                }
            }
            try (Using<PointCesiumWriter> using$191 = new Using<PointCesiumWriter>(packet.openPointProperty())) {
                final PointCesiumWriter w = using$191.resource;
                try (Using<BooleanCesiumWriter> using$192 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$192.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.show.getValue(date)).toEqual(constant.point.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$193 = new Using<DoubleCesiumWriter>(w.openPixelSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$193.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "pixelSize")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(date)).toEqual(constant.point.pixelSize.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$194 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$194.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.heightReference.getValue(date)).toEqual(constant.point.heightReference.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$195 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$195.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "color")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(date)).toEqual(constant.point.color.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$196 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$196.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(date)).toEqual(constant.point.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$197 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$197.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(date)).toEqual(constant.point.outlineWidth.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$198 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$198.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "scaleByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(date)).toEqual(constant.point.scaleByDistance.getValue(date));");
                }
                try (Using<NearFarScalarCesiumWriter> using$199 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$199.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "translucencyByDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(date)).toEqual(constant.point.translucencyByDistance.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$200 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$200.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.distanceDisplayCondition.getValue(date)).toEqual(constant.point.distanceDisplayCondition.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$201 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$201.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("point", "disableDepthTestDistance")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.disableDepthTestDistance.getValue(date)).toEqual(constant.point.disableDepthTestDistance.getValue(date));");
                }
            }
            try (Using<PolygonCesiumWriter> using$202 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$202.resource;
                try (Using<BooleanCesiumWriter> using$203 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$203.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.show.getValue(date)).toEqual(constant.polygon.show.getValue(date));");
                }
                try (Using<PositionListCesiumWriter> using$204 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$204.resource;
                    w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")),
                            new Reference("ConstantPosition2", createList("position"))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).positions).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                }
                try (Using<PositionListOfListsCesiumWriter> using$205 = new Using<PositionListOfListsCesiumWriter>(w.openHolesProperty())) {
                    final PositionListOfListsCesiumWriter w2 = using$205.resource;
                    w2.writeReferences(createList(createList(new Reference("ConstantPosition1", createList("position")), new Reference("ConstantPosition2", createList("position")),
                            new Reference("ConstantPosition3", createList("position")))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.hierarchy.getValue(date).holes).toEqual([ new PolygonHierarchy([ dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date), dataSource.entities.getById('ConstantPosition3').position.getValue(date) ])]);");
                }
                try (Using<ArcTypeCesiumWriter> using$206 = new Using<ArcTypeCesiumWriter>(w.openArcTypeProperty())) {
                    final ArcTypeCesiumWriter w2 = using$206.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "arcType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.arcType.getValue(date)).toEqual(constant.polygon.arcType.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$207 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$207.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "height")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(date)).toEqual(constant.polygon.height.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$208 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$208.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.heightReference.getValue(date)).toEqual(constant.polygon.heightReference.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$209 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$209.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "extrudedHeight")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(date)).toEqual(constant.polygon.extrudedHeight.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$210 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$210.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "extrudedHeightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeightReference.getValue(date)).toEqual(constant.polygon.extrudedHeightReference.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$211 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$211.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "stRotation")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(date)).toEqual(constant.polygon.stRotation.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$212 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$212.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "granularity")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(date)).toEqual(constant.polygon.granularity.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$213 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$213.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.fill.getValue(date)).toEqual(constant.polygon.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$214 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$214.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$215 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$215.resource;
                        try (Using<ColorCesiumWriter> using$216 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$216.resource;
                            m2.writeReference(new Reference("Constant", createList("polygon", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(date)).toEqual(constant.polygon.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$217 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$217.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outline.getValue(date)).toEqual(constant.polygon.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$218 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$218.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(date)).toEqual(constant.polygon.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$219 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$219.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(date)).toEqual(constant.polygon.outlineWidth.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$220 = new Using<BooleanCesiumWriter>(w.openPerPositionHeightProperty())) {
                    final BooleanCesiumWriter w2 = using$220.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "perPositionHeight")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.perPositionHeight.getValue(date)).toEqual(constant.polygon.perPositionHeight.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$221 = new Using<BooleanCesiumWriter>(w.openCloseTopProperty())) {
                    final BooleanCesiumWriter w2 = using$221.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "closeTop")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeTop.getValue(date)).toEqual(constant.polygon.closeTop.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$222 = new Using<BooleanCesiumWriter>(w.openCloseBottomProperty())) {
                    final BooleanCesiumWriter w2 = using$222.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "closeBottom")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.closeBottom.getValue(date)).toEqual(constant.polygon.closeBottom.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$223 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$223.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.shadows.getValue(date)).toEqual(constant.polygon.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$224 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$224.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.distanceDisplayCondition.getValue(date)).toEqual(constant.polygon.distanceDisplayCondition.getValue(date));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$225 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$225.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "classificationType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.classificationType.getValue(date)).toEqual(constant.polygon.classificationType.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$226 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$226.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polygon", "zIndex")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.zIndex.getValue(date)).toEqual(constant.polygon.zIndex.getValue(date));");
                }
            }
            try (Using<PolylineCesiumWriter> using$227 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$227.resource;
                try (Using<BooleanCesiumWriter> using$228 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$228.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.show.getValue(date)).toEqual(constant.polyline.show.getValue(date));");
                }
                try (Using<PositionListCesiumWriter> using$229 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$229.resource;
                    w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")),
                            new Reference("ConstantPosition2", createList("position"))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polyline.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                }
                try (Using<ArcTypeCesiumWriter> using$230 = new Using<ArcTypeCesiumWriter>(w.openArcTypeProperty())) {
                    final ArcTypeCesiumWriter w2 = using$230.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "arcType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.arcType.getValue(date)).toEqual(constant.polyline.arcType.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$231 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$231.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "width")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(date)).toEqual(constant.polyline.width.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$232 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$232.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "granularity")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(date)).toEqual(constant.polyline.granularity.getValue(date));");
                }
                try (Using<PolylineMaterialCesiumWriter> using$233 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$233.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$234 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$234.resource;
                        try (Using<ColorCesiumWriter> using$235 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$235.resource;
                            m2.writeReference(new Reference("Constant", createList("polyline", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(date)).toEqual(constant.polyline.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<ShadowModeCesiumWriter> using$236 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$236.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.shadows.getValue(date)).toEqual(constant.polyline.shadows.getValue(date));");
                }
                try (Using<PolylineMaterialCesiumWriter> using$237 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$237.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$238 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$238.resource;
                        try (Using<ColorCesiumWriter> using$239 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$239.resource;
                            m2.writeReference(new Reference("Constant", createList("polyline", "depthFailMaterial", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(constant.polyline.depthFailMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$240 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$240.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polyline.distanceDisplayCondition.getValue(date)).toEqual(constant.polyline.distanceDisplayCondition.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$241 = new Using<BooleanCesiumWriter>(w.openClampToGroundProperty())) {
                    final BooleanCesiumWriter w2 = using$241.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "clampToGround")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.clampToGround.getValue(date)).toEqual(constant.polyline.clampToGround.getValue(date));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$242 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$242.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "classificationType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.classificationType.getValue(date)).toEqual(constant.polyline.classificationType.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$243 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$243.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polyline", "zIndex")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.zIndex.getValue(date)).toEqual(constant.polyline.zIndex.getValue(date));");
                }
            }
            try (Using<PolylineVolumeCesiumWriter> using$244 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$244.resource;
                try (Using<BooleanCesiumWriter> using$245 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$245.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.show.getValue(date)).toEqual(constant.polylineVolume.show.getValue(date));");
                }
                try (Using<PositionListCesiumWriter> using$246 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$246.resource;
                    w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")),
                            new Reference("ConstantPosition2", createList("position"))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                }
                try (Using<CornerTypeCesiumWriter> using$247 = new Using<CornerTypeCesiumWriter>(w.openCornerTypeProperty())) {
                    final CornerTypeCesiumWriter w2 = using$247.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "cornerType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.cornerType.getValue(date)).toEqual(constant.polylineVolume.cornerType.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$248 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$248.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "granularity")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.granularity.getValue(date)).toEqual(constant.polylineVolume.granularity.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$249 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$249.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.fill.getValue(date)).toEqual(constant.polylineVolume.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$250 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$250.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$251 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$251.resource;
                        try (Using<ColorCesiumWriter> using$252 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$252.resource;
                            m2.writeReference(new Reference("Constant", createList("polylineVolume", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(date)).toEqual(constant.polylineVolume.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$253 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$253.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outline.getValue(date)).toEqual(constant.polylineVolume.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$254 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$254.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineColor.getValue(date)).toEqual(constant.polylineVolume.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$255 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$255.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineWidth.getValue(date)).toEqual(constant.polylineVolume.outlineWidth.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$256 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$256.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.shadows.getValue(date)).toEqual(constant.polylineVolume.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$257 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$257.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("polylineVolume", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.distanceDisplayCondition.getValue(date)).toEqual(constant.polylineVolume.distanceDisplayCondition.getValue(date));");
                }
            }
            try (Using<RectangleCesiumWriter> using$258 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$258.resource;
                try (Using<BooleanCesiumWriter> using$259 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$259.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.show.getValue(date)).toEqual(constant.rectangle.show.getValue(date));");
                }
                try (Using<RectangleCoordinatesCesiumWriter> using$260 = new Using<RectangleCoordinatesCesiumWriter>(w.openCoordinatesProperty())) {
                    final RectangleCoordinatesCesiumWriter w2 = using$260.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "coordinates")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(date)).toEqual(constant.rectangle.coordinates.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$261 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$261.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "height")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(date)).toEqual(constant.rectangle.height.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$262 = new Using<HeightReferenceCesiumWriter>(w.openHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$262.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "heightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.heightReference.getValue(date)).toEqual(constant.rectangle.heightReference.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$263 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$263.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "extrudedHeight")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(date)).toEqual(constant.rectangle.extrudedHeight.getValue(date));");
                }
                try (Using<HeightReferenceCesiumWriter> using$264 = new Using<HeightReferenceCesiumWriter>(w.openExtrudedHeightReferenceProperty())) {
                    final HeightReferenceCesiumWriter w2 = using$264.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "extrudedHeightReference")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.extrudedHeightReference.getValue(date)).toEqual(constant.rectangle.extrudedHeightReference.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$265 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$265.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "rotation")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(date)).toEqual(constant.rectangle.rotation.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$266 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$266.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "stRotation")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(date)).toEqual(constant.rectangle.stRotation.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$267 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$267.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "granularity")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(date)).toEqual(constant.rectangle.granularity.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$268 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$268.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.fill.getValue(date)).toEqual(constant.rectangle.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$269 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$269.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$270 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$270.resource;
                        try (Using<ColorCesiumWriter> using$271 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$271.resource;
                            m2.writeReference(new Reference("Constant", createList("rectangle", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(date)).toEqual(constant.rectangle.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$272 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$272.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outline.getValue(date)).toEqual(constant.rectangle.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$273 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$273.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(date)).toEqual(constant.rectangle.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$274 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$274.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(date)).toEqual(constant.rectangle.outlineWidth.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$275 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$275.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.shadows.getValue(date)).toEqual(constant.rectangle.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$276 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$276.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.distanceDisplayCondition.getValue(date)).toEqual(constant.rectangle.distanceDisplayCondition.getValue(date));");
                }
                try (Using<ClassificationTypeCesiumWriter> using$277 = new Using<ClassificationTypeCesiumWriter>(w.openClassificationTypeProperty())) {
                    final ClassificationTypeCesiumWriter w2 = using$277.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "classificationType")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.classificationType.getValue(date)).toEqual(constant.rectangle.classificationType.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$278 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$278.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangle", "zIndex")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.zIndex.getValue(date)).toEqual(constant.rectangle.zIndex.getValue(date));");
                }
            }
            try (Using<TilesetCesiumWriter> using$279 = new Using<TilesetCesiumWriter>(packet.openTilesetProperty())) {
                final TilesetCesiumWriter w = using$279.resource;
                try (Using<BooleanCesiumWriter> using$280 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$280.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("tileset", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.show.getValue(date)).toEqual(constant.tileset.show.getValue(date));");
                }
                try (Using<UriCesiumWriter> using$281 = new Using<UriCesiumWriter>(w.openUriProperty())) {
                    final UriCesiumWriter w2 = using$281.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("tileset", "uri")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.uri.getValue(date)).toEqual(constant.tileset.uri.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$282 = new Using<DoubleCesiumWriter>(w.openMaximumScreenSpaceErrorProperty())) {
                    final DoubleCesiumWriter w2 = using$282.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("tileset", "maximumScreenSpaceError")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.maximumScreenSpaceError.getValue(date)).toEqual(constant.tileset.maximumScreenSpaceError.getValue(date));");
                }
            }
            try (Using<WallCesiumWriter> using$283 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$283.resource;
                try (Using<BooleanCesiumWriter> using$284 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$284.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "show")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.show.getValue(date)).toEqual(constant.wall.show.getValue(date));");
                }
                try (Using<PositionListCesiumWriter> using$285 = new Using<PositionListCesiumWriter>(w.openPositionsProperty())) {
                    final PositionListCesiumWriter w2 = using$285.resource;
                    w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantPosition1", createList("position")),
                            new Reference("ConstantPosition2", createList("position"))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.positions.getValue(date)).toEqual([dataSource.entities.getById('ConstantPosition1').position.getValue(date), dataSource.entities.getById('ConstantPosition2').position.getValue(date)]);");
                }
                try (Using<DoubleListCesiumWriter> using$286 = new Using<DoubleListCesiumWriter>(w.openMinimumHeightsProperty())) {
                    final DoubleListCesiumWriter w2 = using$286.resource;
                    w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantDouble1", TestGenerateValidationDocument.<String> createList("billboard", "scale")),
                            new Reference("ConstantDouble2", TestGenerateValidationDocument.<String> createList("billboard", "scale"))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.minimumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
                }
                try (Using<DoubleListCesiumWriter> using$287 = new Using<DoubleListCesiumWriter>(w.openMaximumHeightsProperty())) {
                    final DoubleListCesiumWriter w2 = using$287.resource;
                    w2.writeReferences(TestGenerateValidationDocument.<Reference> createList(new Reference("ConstantDouble1", TestGenerateValidationDocument.<String> createList("billboard", "scale")),
                            new Reference("ConstantDouble2", TestGenerateValidationDocument.<String> createList("billboard", "scale"))));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.maximumHeights.getValue(date)).toEqual([dataSource.entities.getById('ConstantDouble1').billboard.scale.getValue(date), dataSource.entities.getById('ConstantDouble2').billboard.scale.getValue(date)]);");
                }
                try (Using<DoubleCesiumWriter> using$288 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$288.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "granularity")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(date)).toEqual(constant.wall.granularity.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$289 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$289.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "fill")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.fill.getValue(date)).toEqual(constant.wall.fill.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$290 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$290.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$291 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$291.resource;
                        try (Using<ColorCesiumWriter> using$292 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$292.resource;
                            m2.writeReference(new Reference("Constant", createList("wall", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(date)).toEqual(constant.wall.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$293 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$293.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outline")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outline.getValue(date)).toEqual(constant.wall.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$294 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$294.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outlineColor")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(date)).toEqual(constant.wall.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$295 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$295.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "outlineWidth")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(date)).toEqual(constant.wall.outlineWidth.getValue(date));");
                }
                try (Using<ShadowModeCesiumWriter> using$296 = new Using<ShadowModeCesiumWriter>(w.openShadowsProperty())) {
                    final ShadowModeCesiumWriter w2 = using$296.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "shadows")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.shadows.getValue(date)).toEqual(constant.wall.shadows.getValue(date));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$297 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$297.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("wall", "distanceDisplayCondition")));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.distanceDisplayCondition.getValue(date)).toEqual(constant.wall.distanceDisplayCondition.getValue(date));");
                }
            }
            try (Using<ConicSensorCesiumWriter> using$298 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$298.resource;
                try (Using<BooleanCesiumWriter> using$299 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$299.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "show")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.show.getValue(date)).toEqual(constant.conicSensor.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$300 = new Using<DoubleCesiumWriter>(w.openInnerHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$300.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "innerHalfAngle")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(date)).toEqual(constant.conicSensor.innerHalfAngle.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$301 = new Using<DoubleCesiumWriter>(w.openOuterHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$301.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "outerHalfAngle")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(date)).toEqual(constant.conicSensor.outerHalfAngle.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$302 = new Using<DoubleCesiumWriter>(w.openMinimumClockAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$302.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "minimumClockAngle")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.minimumClockAngle.getValue(date)).toEqual(constant.conicSensor.minimumClockAngle.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$303 = new Using<DoubleCesiumWriter>(w.openMaximumClockAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$303.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "maximumClockAngle")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.maximumClockAngle.getValue(date)).toEqual(constant.conicSensor.maximumClockAngle.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$304 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$304.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "radius")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(date)).toEqual(constant.conicSensor.radius.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$305 = new Using<BooleanCesiumWriter>(w.openShowIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$305.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showIntersection")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showIntersection.getValue(date)).toEqual(constant.conicSensor.showIntersection.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$306 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$306.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "intersectionColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.intersectionColor.getValue(date)).toEqual(constant.conicSensor.intersectionColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$307 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$307.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "intersectionWidth")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.intersectionWidth.getValue(date)).toEqual(constant.conicSensor.intersectionWidth.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$308 = new Using<BooleanCesiumWriter>(w.openShowLateralSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$308.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showLateralSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showLateralSurfaces.getValue(date)).toEqual(constant.conicSensor.showLateralSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$309 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$309.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$310 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$310.resource;
                        try (Using<ColorCesiumWriter> using$311 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$311.resource;
                            m2.writeReference(new Reference("Constant", createList("conicSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$312 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$312.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEllipsoidSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$313 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$313.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$314 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$314.resource;
                        try (Using<ColorCesiumWriter> using$315 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$315.resource;
                            m2.writeReference(new Reference("Constant", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$316 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidHorizonSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$316.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEllipsoidHorizonSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.conicSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$317 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$317.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$318 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$318.resource;
                        try (Using<ColorCesiumWriter> using$319 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$319.resource;
                            m2.writeReference(new Reference("Constant", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$320 = new Using<BooleanCesiumWriter>(w.openShowDomeSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$320.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showDomeSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showDomeSurfaces.getValue(date)).toEqual(constant.conicSensor.showDomeSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$321 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$321.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$322 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$322.resource;
                        try (Using<ColorCesiumWriter> using$323 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$323.resource;
                            m2.writeReference(new Reference("Constant", createList("conicSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<SensorVolumePortionToDisplayCesiumWriter> using$324 = new Using<SensorVolumePortionToDisplayCesiumWriter>(w.openPortionToDisplayProperty())) {
                    final SensorVolumePortionToDisplayCesiumWriter w2 = using$324.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "portionToDisplay")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.portionToDisplay.getValue(date)).toEqual(constant.conicSensor.portionToDisplay.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$325 = new Using<BooleanCesiumWriter>(w.openEnvironmentConstraintProperty())) {
                    final BooleanCesiumWriter w2 = using$325.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentConstraint")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentConstraint.getValue(date)).toEqual(constant.conicSensor.environmentConstraint.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$326 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentOcclusionProperty())) {
                    final BooleanCesiumWriter w2 = using$326.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEnvironmentOcclusion")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.conicSensor.showEnvironmentOcclusion.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$327 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$327.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$328 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$328.resource;
                        try (Using<ColorCesiumWriter> using$329 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$329.resource;
                            m2.writeReference(new Reference("Constant", createList("conicSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$330 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$330.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showEnvironmentIntersection")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.conicSensor.showEnvironmentIntersection.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$331 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$331.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentIntersectionColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$332 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$332.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "environmentIntersectionWidth")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.conicSensor.environmentIntersectionWidth.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$333 = new Using<BooleanCesiumWriter>(w.openShowThroughEllipsoidProperty())) {
                    final BooleanCesiumWriter w2 = using$333.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showThroughEllipsoid")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.showThroughEllipsoid.getValue(date)).toEqual(constant.conicSensor.showThroughEllipsoid.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$334 = new Using<BooleanCesiumWriter>(w.openShowViewshedProperty())) {
                    final BooleanCesiumWriter w2 = using$334.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "showViewshed")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.showViewshed.getValue(date)).toEqual(constant.conicSensor.showViewshed.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$335 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$335.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "viewshedVisibleColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedVisibleColor.getValue(date)).toEqual(constant.conicSensor.viewshedVisibleColor.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$336 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$336.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "viewshedOccludedColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedOccludedColor.getValue(date)).toEqual(constant.conicSensor.viewshedOccludedColor.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$337 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$337.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("conicSensor", "viewshedResolution")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedResolution.getValue(date)).toEqual(constant.conicSensor.viewshedResolution.getValue(date));");
                }
            }
            try (Using<CustomPatternSensorCesiumWriter> using$338 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$338.resource;
                try (Using<BooleanCesiumWriter> using$339 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$339.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "show")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.show.getValue(date)).toEqual(constant.customPatternSensor.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$340 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$340.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "radius")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(date)).toEqual(constant.customPatternSensor.radius.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$341 = new Using<BooleanCesiumWriter>(w.openShowIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$341.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showIntersection")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showIntersection.getValue(date)).toEqual(constant.customPatternSensor.showIntersection.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$342 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$342.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "intersectionColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.intersectionColor.getValue(date)).toEqual(constant.customPatternSensor.intersectionColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$343 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$343.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "intersectionWidth")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.intersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.intersectionWidth.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$344 = new Using<BooleanCesiumWriter>(w.openShowLateralSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$344.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showLateralSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showLateralSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showLateralSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$345 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$345.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$346 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$346.resource;
                        try (Using<ColorCesiumWriter> using$347 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$347.resource;
                            m2.writeReference(new Reference("Constant", createList("customPatternSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$348 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$348.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEllipsoidSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$349 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$349.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$350 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$350.resource;
                        try (Using<ColorCesiumWriter> using$351 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$351.resource;
                            m2.writeReference(new Reference("Constant", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$352 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidHorizonSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$352.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEllipsoidHorizonSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$353 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$353.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$354 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$354.resource;
                        try (Using<ColorCesiumWriter> using$355 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$355.resource;
                            m2.writeReference(new Reference("Constant", createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$356 = new Using<BooleanCesiumWriter>(w.openShowDomeSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$356.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showDomeSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showDomeSurfaces.getValue(date)).toEqual(constant.customPatternSensor.showDomeSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$357 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$357.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$358 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$358.resource;
                        try (Using<ColorCesiumWriter> using$359 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$359.resource;
                            m2.writeReference(new Reference("Constant", createList("customPatternSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<SensorVolumePortionToDisplayCesiumWriter> using$360 = new Using<SensorVolumePortionToDisplayCesiumWriter>(w.openPortionToDisplayProperty())) {
                    final SensorVolumePortionToDisplayCesiumWriter w2 = using$360.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "portionToDisplay")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.portionToDisplay.getValue(date)).toEqual(constant.customPatternSensor.portionToDisplay.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$361 = new Using<BooleanCesiumWriter>(w.openEnvironmentConstraintProperty())) {
                    final BooleanCesiumWriter w2 = using$361.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentConstraint")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentConstraint.getValue(date)).toEqual(constant.customPatternSensor.environmentConstraint.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$362 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentOcclusionProperty())) {
                    final BooleanCesiumWriter w2 = using$362.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEnvironmentOcclusion")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentOcclusion.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$363 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$363.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$364 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$364.resource;
                        try (Using<ColorCesiumWriter> using$365 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$365.resource;
                            m2.writeReference(new Reference("Constant", createList("customPatternSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$366 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$366.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showEnvironmentIntersection")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.customPatternSensor.showEnvironmentIntersection.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$367 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$367.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentIntersectionColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$368 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$368.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "environmentIntersectionWidth")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.customPatternSensor.environmentIntersectionWidth.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$369 = new Using<BooleanCesiumWriter>(w.openShowThroughEllipsoidProperty())) {
                    final BooleanCesiumWriter w2 = using$369.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showThroughEllipsoid")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showThroughEllipsoid.getValue(date)).toEqual(constant.customPatternSensor.showThroughEllipsoid.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$370 = new Using<BooleanCesiumWriter>(w.openShowViewshedProperty())) {
                    final BooleanCesiumWriter w2 = using$370.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "showViewshed")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.showViewshed.getValue(date)).toEqual(constant.customPatternSensor.showViewshed.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$371 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$371.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "viewshedVisibleColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedVisibleColor.getValue(date)).toEqual(constant.customPatternSensor.viewshedVisibleColor.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$372 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$372.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "viewshedOccludedColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedOccludedColor.getValue(date)).toEqual(constant.customPatternSensor.viewshedOccludedColor.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$373 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$373.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("customPatternSensor", "viewshedResolution")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedResolution.getValue(date)).toEqual(constant.customPatternSensor.viewshedResolution.getValue(date));");
                }
            }
            try (Using<RectangularSensorCesiumWriter> using$374 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$374.resource;
                try (Using<BooleanCesiumWriter> using$375 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$375.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "show")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.show.getValue(date)).toEqual(constant.rectangularSensor.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$376 = new Using<DoubleCesiumWriter>(w.openXHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$376.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "xHalfAngle")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.xHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.xHalfAngle.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$377 = new Using<DoubleCesiumWriter>(w.openYHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$377.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "yHalfAngle")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.yHalfAngle.getValue(date)).toEqual(constant.rectangularSensor.yHalfAngle.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$378 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$378.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "radius")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(date)).toEqual(constant.rectangularSensor.radius.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$379 = new Using<BooleanCesiumWriter>(w.openShowIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$379.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showIntersection")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showIntersection.getValue(date)).toEqual(constant.rectangularSensor.showIntersection.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$380 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$380.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "intersectionColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.intersectionColor.getValue(date)).toEqual(constant.rectangularSensor.intersectionColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$381 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$381.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "intersectionWidth")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.intersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.intersectionWidth.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$382 = new Using<BooleanCesiumWriter>(w.openShowLateralSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$382.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showLateralSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showLateralSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showLateralSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$383 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$383.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$384 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$384.resource;
                        try (Using<ColorCesiumWriter> using$385 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$385.resource;
                            m2.writeReference(new Reference("Constant", createList("rectangularSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$386 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$386.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEllipsoidSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showEllipsoidSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$387 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$387.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$388 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$388.resource;
                        try (Using<ColorCesiumWriter> using$389 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$389.resource;
                            m2.writeReference(new Reference("Constant", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$390 = new Using<BooleanCesiumWriter>(w.openShowEllipsoidHorizonSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$390.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEllipsoidHorizonSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showEllipsoidHorizonSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$391 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$391.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$392 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$392.resource;
                        try (Using<ColorCesiumWriter> using$393 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$393.resource;
                            m2.writeReference(new Reference("Constant", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$394 = new Using<BooleanCesiumWriter>(w.openShowDomeSurfacesProperty())) {
                    final BooleanCesiumWriter w2 = using$394.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showDomeSurfaces")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showDomeSurfaces.getValue(date)).toEqual(constant.rectangularSensor.showDomeSurfaces.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$395 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$395.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$396 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$396.resource;
                        try (Using<ColorCesiumWriter> using$397 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$397.resource;
                            m2.writeReference(new Reference("Constant", createList("rectangularSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<SensorVolumePortionToDisplayCesiumWriter> using$398 = new Using<SensorVolumePortionToDisplayCesiumWriter>(w.openPortionToDisplayProperty())) {
                    final SensorVolumePortionToDisplayCesiumWriter w2 = using$398.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "portionToDisplay")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.portionToDisplay.getValue(date)).toEqual(constant.rectangularSensor.portionToDisplay.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$399 = new Using<BooleanCesiumWriter>(w.openEnvironmentConstraintProperty())) {
                    final BooleanCesiumWriter w2 = using$399.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentConstraint")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentConstraint.getValue(date)).toEqual(constant.rectangularSensor.environmentConstraint.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$400 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentOcclusionProperty())) {
                    final BooleanCesiumWriter w2 = using$400.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEnvironmentOcclusion")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showEnvironmentOcclusion.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentOcclusion.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$401 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$401.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$402 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$402.resource;
                        try (Using<ColorCesiumWriter> using$403 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$403.resource;
                            m2.writeReference(new Reference("Constant", createList("rectangularSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(constant.rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$404 = new Using<BooleanCesiumWriter>(w.openShowEnvironmentIntersectionProperty())) {
                    final BooleanCesiumWriter w2 = using$404.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showEnvironmentIntersection")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showEnvironmentIntersection.getValue(date)).toEqual(constant.rectangularSensor.showEnvironmentIntersection.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$405 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$405.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentIntersectionColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentIntersectionColor.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$406 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$406.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "environmentIntersectionWidth")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(date)).toEqual(constant.rectangularSensor.environmentIntersectionWidth.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$407 = new Using<BooleanCesiumWriter>(w.openShowThroughEllipsoidProperty())) {
                    final BooleanCesiumWriter w2 = using$407.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showThroughEllipsoid")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showThroughEllipsoid.getValue(date)).toEqual(constant.rectangularSensor.showThroughEllipsoid.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$408 = new Using<BooleanCesiumWriter>(w.openShowViewshedProperty())) {
                    final BooleanCesiumWriter w2 = using$408.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "showViewshed")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.showViewshed.getValue(date)).toEqual(constant.rectangularSensor.showViewshed.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$409 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$409.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "viewshedVisibleColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedVisibleColor.getValue(date)).toEqual(constant.rectangularSensor.viewshedVisibleColor.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$410 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$410.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "viewshedOccludedColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedOccludedColor.getValue(date)).toEqual(constant.rectangularSensor.viewshedOccludedColor.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$411 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$411.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("rectangularSensor", "viewshedResolution")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedResolution.getValue(date)).toEqual(constant.rectangularSensor.viewshedResolution.getValue(date));");
                }
            }
            try (Using<FanCesiumWriter> using$412 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$412.resource;
                try (Using<BooleanCesiumWriter> using$413 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$413.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "show")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.show.getValue(date)).toEqual(constant.fan.show.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$414 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$414.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "radius")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(date)).toEqual(constant.fan.radius.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$415 = new Using<BooleanCesiumWriter>(w.openPerDirectionRadiusProperty())) {
                    final BooleanCesiumWriter w2 = using$415.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "perDirectionRadius")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.perDirectionRadius.getValue(date)).toEqual(constant.fan.perDirectionRadius.getValue(date));");
                }
                try (Using<MaterialCesiumWriter> using$416 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$416.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$417 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$417.resource;
                        try (Using<ColorCesiumWriter> using$418 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$418.resource;
                            m2.writeReference(new Reference("Constant", createList("fan", "material", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(date)).toEqual(constant.fan.material.color.getValue(date));");
                        }
                    }
                }
                try (Using<BooleanCesiumWriter> using$419 = new Using<BooleanCesiumWriter>(w.openFillProperty())) {
                    final BooleanCesiumWriter w2 = using$419.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "fill")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.fill.getValue(date)).toEqual(constant.fan.fill.getValue(date));");
                }
                try (Using<BooleanCesiumWriter> using$420 = new Using<BooleanCesiumWriter>(w.openOutlineProperty())) {
                    final BooleanCesiumWriter w2 = using$420.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outline")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outline.getValue(date)).toEqual(constant.fan.outline.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$421 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$421.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outlineColor")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(date)).toEqual(constant.fan.outlineColor.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$422 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$422.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "outlineWidth")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(date)).toEqual(constant.fan.outlineWidth.getValue(date));");
                }
                try (Using<IntegerCesiumWriter> using$423 = new Using<IntegerCesiumWriter>(w.openNumberOfRingsProperty())) {
                    final IntegerCesiumWriter w2 = using$423.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("fan", "numberOfRings")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(date)).toEqual(constant.fan.numberOfRings.getValue(date));");
                }
            }
            try (Using<VectorCesiumWriter> using$424 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$424.resource;
                try (Using<BooleanCesiumWriter> using$425 = new Using<BooleanCesiumWriter>(w.openShowProperty())) {
                    final BooleanCesiumWriter w2 = using$425.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "show")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.show.getValue(date)).toEqual(constant.vector.show.getValue(date));");
                }
                try (Using<ColorCesiumWriter> using$426 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$426.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "color")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(date)).toEqual(constant.vector.color.getValue(date));");
                }
                try (Using<DirectionCesiumWriter> using$427 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$427.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "direction")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(date)).toEqual(constant.vector.direction.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$428 = new Using<DoubleCesiumWriter>(w.openLengthProperty())) {
                    final DoubleCesiumWriter w2 = using$428.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "length")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(date)).toEqual(constant.vector.length.getValue(date));");
                }
                try (Using<DoubleCesiumWriter> using$429 = new Using<DoubleCesiumWriter>(w.openMinimumLengthInPixelsProperty())) {
                    final DoubleCesiumWriter w2 = using$429.resource;
                    w2.writeReference(new Reference("Constant", TestGenerateValidationDocument.<String> createList("vector", "minimumLengthInPixels")));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.minimumLengthInPixels.getValue(date)).toEqual(constant.vector.minimumLengthInPixels.getValue(date));");
                }
            }
        }
        writeReferenceValuesIndividual();
    }

    private final void writeReferenceValuesIndividual() {
        writeReferenceValuesIndividualDescription();
        writeReferenceValuesIndividualPosition();
        writeReferenceValuesIndividualOrientation();
        writeReferenceValuesIndividualViewFrom();
        writeReferenceValuesIndividualBillboard();
        writeReferenceValuesIndividualBox();
        writeReferenceValuesIndividualCorridor();
        writeReferenceValuesIndividualCylinder();
        writeReferenceValuesIndividualEllipse();
        writeReferenceValuesIndividualEllipsoid();
        writeReferenceValuesIndividualLabel();
        writeReferenceValuesIndividualModel();
        writeReferenceValuesIndividualPath();
        writeReferenceValuesIndividualPoint();
        writeReferenceValuesIndividualPolygon();
        writeReferenceValuesIndividualPolyline();
        writeReferenceValuesIndividualPolylineVolume();
        writeReferenceValuesIndividualRectangle();
        writeReferenceValuesIndividualTileset();
        writeReferenceValuesIndividualWall();
        writeReferenceValuesIndividualConicSensor();
        writeReferenceValuesIndividualCustomPatternSensor();
        writeReferenceValuesIndividualRectangularSensor();
        writeReferenceValuesIndividualFan();
        writeReferenceValuesIndividualVector();
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("VelocityPosition");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('VelocityPosition')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$1 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$1.resource;
                w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStartDate.addSeconds(60.0)),
                        TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(1.0, 2.0, 3.0), new Cartesian(61.0, 122.0, 183.0)));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(1, 2, 3));");
                TextWriterHelper.writeLine(m_assertionsWriter,
                        "    expect(e.position.getValue(JulianDate.addSeconds(documentStartDate, 60, new JulianDate()))).toEqual(new Cartesian3(61, 122, 183));");
            }
        }
        try (Using<PacketCesiumWriter> using$2 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$2.resource;
            packet.writeId("velocityReference_billboard_alignedAxis");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('velocityReference_billboard_alignedAxis')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$3 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$3.resource;
                try (Using<AlignedAxisCesiumWriter> using$4 = new Using<AlignedAxisCesiumWriter>(w.openAlignedAxisProperty())) {
                    final AlignedAxisCesiumWriter w2 = using$4.resource;
                    w2.writeVelocityReference(new Reference("VelocityPosition", "position"));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.alignedAxis.getValue(JulianDate.addSeconds(documentStartDate, 50, new JulianDate()))).toEqualEpsilon(new Cartesian3(0.267261241912424, 0.534522483824849, 0.801783725737273), 1e-13);");
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualDescription() {}

    private final void writeReferenceValuesIndividualPosition() {}

    private final void writeReferenceValuesIndividualOrientation() {}

    private final void writeReferenceValuesIndividualViewFrom() {}

    private final void writeReferenceValuesIndividualBillboard() {}

    private final void writeReferenceValuesIndividualBox() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_box_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_box_material_image')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$1 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_box_material_image", createList("box", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_image').box.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_box_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_box_material_grid')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$9 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_box_material_grid", createList("box", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_grid').box.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_box_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_box_material_stripe')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$18 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_box_material_stripe", createList("box", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_stripe').box.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_box_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_box_material_checkerboard')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$27 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_box_material_checkerboard", createList("box", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_checkerboard').box.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_box_material_checkerboard", createList("box", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_checkerboard').box.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_box_material_checkerboard", createList("box", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_box_material_checkerboard').box.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualCorridor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_corridor_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_corridor_material_image')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$1 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_corridor_material_image", createList("corridor", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_image').corridor.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_corridor_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_corridor_material_grid')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$9 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_corridor_material_grid", createList("corridor", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_grid').corridor.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_corridor_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_corridor_material_stripe')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$18 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_corridor_material_stripe", createList("corridor", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_stripe').corridor.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_corridor_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_corridor_material_checkerboard')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$27 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_corridor_material_checkerboard", createList("corridor", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_checkerboard').corridor.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_corridor_material_checkerboard", createList("corridor", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_checkerboard').corridor.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_corridor_material_checkerboard", createList("corridor", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_corridor_material_checkerboard').corridor.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualCylinder() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_cylinder_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_cylinder_material_image')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$1 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_cylinder_material_image", createList("cylinder", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_image').cylinder.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_cylinder_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_cylinder_material_grid')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$9 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_cylinder_material_grid", createList("cylinder", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_grid').cylinder.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_cylinder_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_cylinder_material_stripe')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$18 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_cylinder_material_stripe", createList("cylinder", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_stripe').cylinder.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_cylinder_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_cylinder_material_checkerboard')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$27 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_cylinder_material_checkerboard", createList("cylinder", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_checkerboard').cylinder.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_cylinder_material_checkerboard", createList("cylinder", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_checkerboard').cylinder.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_cylinder_material_checkerboard", createList("cylinder", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_cylinder_material_checkerboard').cylinder.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualEllipse() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_ellipse_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipse_material_image')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$1 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_ellipse_material_image", createList("ellipse", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_image').ellipse.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_ellipse_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipse_material_grid')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$9 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_ellipse_material_grid", createList("ellipse", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_grid').ellipse.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_ellipse_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipse_material_stripe')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$18 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_ellipse_material_stripe", createList("ellipse", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_stripe').ellipse.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_ellipse_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipse_material_checkerboard')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$27 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_ellipse_material_checkerboard", createList("ellipse", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_checkerboard').ellipse.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_ellipse_material_checkerboard", createList("ellipse", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_checkerboard').ellipse.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_ellipse_material_checkerboard", createList("ellipse", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipse_material_checkerboard').ellipse.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualEllipsoid() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_ellipsoid_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipsoid_material_image')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$1 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_image", createList("ellipsoid", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_image').ellipsoid.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_ellipsoid_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipsoid_material_grid')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$9 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_grid", createList("ellipsoid", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_grid').ellipsoid.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_ellipsoid_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipsoid_material_stripe')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$18 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_stripe", createList("ellipsoid", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_stripe').ellipsoid.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_ellipsoid_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_ellipsoid_material_checkerboard')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$27 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_checkerboard", createList("ellipsoid", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_checkerboard').ellipsoid.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_checkerboard", createList("ellipsoid", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_checkerboard').ellipsoid.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_ellipsoid_material_checkerboard", createList("ellipsoid", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_ellipsoid_material_checkerboard').ellipsoid.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualLabel() {}

    private final void writeReferenceValuesIndividualModel() {}

    private final void writeReferenceValuesIndividualPath() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_path_material_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_polylineOutline')).toBeDefined();");
            try (Using<PathCesiumWriter> using$1 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$1.resource;
                try (Using<PolylineMaterialCesiumWriter> using$2 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$2.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$3 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.color.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "outlineColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$6 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_path_material_polylineOutline", createList("path", "material", "outlineWidth")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineOutline').path.material.outlineWidth.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$7 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$7.resource;
            packet.writeId("reference_path_material_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_polylineArrow')).toBeDefined();");
            try (Using<PathCesiumWriter> using$8 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$8.resource;
                try (Using<PolylineMaterialCesiumWriter> using$9 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$9.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$10 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$10.resource;
                        try (Using<ColorCesiumWriter> using$11 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$11.resource;
                            m2.writeReference(new Reference("material_path_material_polylineArrow", createList("path", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineArrow').path.material.color.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("reference_path_material_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_polylineDash')).toBeDefined();");
            try (Using<PathCesiumWriter> using$13 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$13.resource;
                try (Using<PolylineMaterialCesiumWriter> using$14 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$14.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$15 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$15.resource;
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_path_material_polylineDash", createList("path", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineDash').path.material.color.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeReference(new Reference("material_path_material_polylineDash", createList("path", "material", "gapColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.gapColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineDash').path.material.gapColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$18.resource;
                            m2.writeReference(new Reference("material_path_material_polylineDash", createList("path", "material", "dashLength")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.dashLength.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineDash').path.material.dashLength.getValue(date));");
                        }
                        try (Using<IntegerCesiumWriter> using$19 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$19.resource;
                            m2.writeReference(new Reference("material_path_material_polylineDash", createList("path", "material", "dashPattern")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.dashPattern.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineDash').path.material.dashPattern.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("reference_path_material_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_polylineGlow')).toBeDefined();");
            try (Using<PathCesiumWriter> using$21 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$21.resource;
                try (Using<PolylineMaterialCesiumWriter> using$22 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$22.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$23 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_path_material_polylineGlow", createList("path", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_path_material_polylineGlow", createList("path", "material", "glowPower")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.glowPower.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeReference(new Reference("material_path_material_polylineGlow", createList("path", "material", "taperPower")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.taperPower.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_polylineGlow').path.material.taperPower.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$27 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$27.resource;
            packet.writeId("reference_path_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_image')).toBeDefined();");
            try (Using<PathCesiumWriter> using$28 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$28.resource;
                try (Using<PolylineMaterialCesiumWriter> using$29 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$29.resource;
                    try (Using<ImageMaterialCesiumWriter> using$30 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$30.resource;
                        try (Using<UriCesiumWriter> using$31 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$34 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$34.resource;
                            m2.writeReference(new Reference("material_path_material_image", createList("path", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_image').path.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("reference_path_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_grid')).toBeDefined();");
            try (Using<PathCesiumWriter> using$36 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$36.resource;
                try (Using<PolylineMaterialCesiumWriter> using$37 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$37.resource;
                    try (Using<GridMaterialCesiumWriter> using$38 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$40 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$40.resource;
                            m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$41 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$41.resource;
                            m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$42 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$42.resource;
                            m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$43 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$43.resource;
                            m2.writeReference(new Reference("material_path_material_grid", createList("path", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_grid').path.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$44 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$44.resource;
            packet.writeId("reference_path_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_stripe')).toBeDefined();");
            try (Using<PathCesiumWriter> using$45 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$45.resource;
                try (Using<PolylineMaterialCesiumWriter> using$46 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$46.resource;
                    try (Using<StripeMaterialCesiumWriter> using$47 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$47.resource;
                        try (Using<StripeOrientationCesiumWriter> using$48 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$48.resource;
                            m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$50 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$50.resource;
                            m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$51 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$51.resource;
                            m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$52 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$52.resource;
                            m2.writeReference(new Reference("material_path_material_stripe", createList("path", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_stripe').path.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("reference_path_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_path_material_checkerboard')).toBeDefined();");
            try (Using<PathCesiumWriter> using$54 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$54.resource;
                try (Using<PolylineMaterialCesiumWriter> using$55 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$55.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$56 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeReference(new Reference("material_path_material_checkerboard", createList("path", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_checkerboard').path.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$58 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$58.resource;
                            m2.writeReference(new Reference("material_path_material_checkerboard", createList("path", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_checkerboard').path.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$59 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$59.resource;
                            m2.writeReference(new Reference("material_path_material_checkerboard", createList("path", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_path_material_checkerboard').path.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualPoint() {}

    private final void writeReferenceValuesIndividualPolygon() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_polygon_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polygon_material_image')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$1 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_polygon_material_image", createList("polygon", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_image').polygon.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_polygon_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polygon_material_grid')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$9 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_polygon_material_grid", createList("polygon", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_grid').polygon.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_polygon_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polygon_material_stripe')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$18 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_polygon_material_stripe", createList("polygon", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_stripe').polygon.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_polygon_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polygon_material_checkerboard')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$27 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_polygon_material_checkerboard", createList("polygon", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_checkerboard').polygon.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_polygon_material_checkerboard", createList("polygon", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_checkerboard').polygon.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_polygon_material_checkerboard", createList("polygon", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polygon_material_checkerboard').polygon.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualPolyline() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_polyline_material_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_polylineOutline')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$1 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$1.resource;
                try (Using<PolylineMaterialCesiumWriter> using$2 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$2.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$3 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.color.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "outlineColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$6 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineOutline", createList("polyline", "material", "outlineWidth")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineOutline').polyline.material.outlineWidth.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$7 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$7.resource;
            packet.writeId("reference_polyline_material_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_polylineArrow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$8 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$8.resource;
                try (Using<PolylineMaterialCesiumWriter> using$9 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$9.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$10 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$10.resource;
                        try (Using<ColorCesiumWriter> using$11 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$11.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineArrow", createList("polyline", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineArrow').polyline.material.color.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("reference_polyline_material_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_polylineDash')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$13 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$13.resource;
                try (Using<PolylineMaterialCesiumWriter> using$14 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$14.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$15 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$15.resource;
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineDash", createList("polyline", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineDash').polyline.material.color.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$17 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$17.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineDash", createList("polyline", "material", "gapColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.gapColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineDash').polyline.material.gapColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$18.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineDash", createList("polyline", "material", "dashLength")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.dashLength.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineDash').polyline.material.dashLength.getValue(date));");
                        }
                        try (Using<IntegerCesiumWriter> using$19 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$19.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineDash", createList("polyline", "material", "dashPattern")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.dashPattern.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineDash').polyline.material.dashPattern.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("reference_polyline_material_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_polylineGlow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$21 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$21.resource;
                try (Using<PolylineMaterialCesiumWriter> using$22 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$22.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$23 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineGlow", createList("polyline", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineGlow", createList("polyline", "material", "glowPower")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.glowPower.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeReference(new Reference("material_polyline_material_polylineGlow", createList("polyline", "material", "taperPower")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.taperPower.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_polylineGlow').polyline.material.taperPower.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$27 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$27.resource;
            packet.writeId("reference_polyline_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_image')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$28 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$28.resource;
                try (Using<PolylineMaterialCesiumWriter> using$29 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$29.resource;
                    try (Using<ImageMaterialCesiumWriter> using$30 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$30.resource;
                        try (Using<UriCesiumWriter> using$31 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$34 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$34.resource;
                            m2.writeReference(new Reference("material_polyline_material_image", createList("polyline", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_image').polyline.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("reference_polyline_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_grid')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$36 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$36.resource;
                try (Using<PolylineMaterialCesiumWriter> using$37 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$37.resource;
                    try (Using<GridMaterialCesiumWriter> using$38 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$40 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$40.resource;
                            m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$41 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$41.resource;
                            m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$42 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$42.resource;
                            m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$43 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$43.resource;
                            m2.writeReference(new Reference("material_polyline_material_grid", createList("polyline", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_grid').polyline.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$44 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$44.resource;
            packet.writeId("reference_polyline_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_stripe')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$45 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$45.resource;
                try (Using<PolylineMaterialCesiumWriter> using$46 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$46.resource;
                    try (Using<StripeMaterialCesiumWriter> using$47 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$47.resource;
                        try (Using<StripeOrientationCesiumWriter> using$48 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$48.resource;
                            m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$50 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$50.resource;
                            m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$51 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$51.resource;
                            m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$52 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$52.resource;
                            m2.writeReference(new Reference("material_polyline_material_stripe", createList("polyline", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_stripe').polyline.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("reference_polyline_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_material_checkerboard')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$54 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$54.resource;
                try (Using<PolylineMaterialCesiumWriter> using$55 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$55.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$56 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeReference(new Reference("material_polyline_material_checkerboard", createList("polyline", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_checkerboard').polyline.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$58 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$58.resource;
                            m2.writeReference(new Reference("material_polyline_material_checkerboard", createList("polyline", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_checkerboard').polyline.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$59 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$59.resource;
                            m2.writeReference(new Reference("material_polyline_material_checkerboard", createList("polyline", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_material_checkerboard').polyline.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("reference_polyline_depthFailMaterial_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_polylineOutline')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$61 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$61.resource;
                try (Using<PolylineMaterialCesiumWriter> using$62 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$62.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$63 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineOutline", createList("polyline", "depthFailMaterial", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineOutline').polyline.depthFailMaterial.color.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$65 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$65.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineOutline", createList("polyline", "depthFailMaterial", "outlineColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.outlineColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineOutline').polyline.depthFailMaterial.outlineColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$66 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$66.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineOutline", createList("polyline", "depthFailMaterial", "outlineWidth")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.outlineWidth.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineOutline').polyline.depthFailMaterial.outlineWidth.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$67 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$67.resource;
            packet.writeId("reference_polyline_depthFailMaterial_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_polylineArrow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$68 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$68.resource;
                try (Using<PolylineMaterialCesiumWriter> using$69 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$69.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$70 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$70.resource;
                        try (Using<ColorCesiumWriter> using$71 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$71.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineArrow", createList("polyline", "depthFailMaterial", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineArrow').polyline.depthFailMaterial.color.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$72 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$72.resource;
            packet.writeId("reference_polyline_depthFailMaterial_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_polylineDash')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$73 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$73.resource;
                try (Using<PolylineMaterialCesiumWriter> using$74 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$74.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$75 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$75.resource;
                        try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$76.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineDash", createList("polyline", "depthFailMaterial", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineDash').polyline.depthFailMaterial.color.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$77 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$77.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineDash", createList("polyline", "depthFailMaterial", "gapColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.gapColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineDash').polyline.depthFailMaterial.gapColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$78 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$78.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineDash", createList("polyline", "depthFailMaterial", "dashLength")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.dashLength.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineDash').polyline.depthFailMaterial.dashLength.getValue(date));");
                        }
                        try (Using<IntegerCesiumWriter> using$79 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$79.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineDash", createList("polyline", "depthFailMaterial", "dashPattern")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.dashPattern.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineDash').polyline.depthFailMaterial.dashPattern.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$80 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$80.resource;
            packet.writeId("reference_polyline_depthFailMaterial_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_polylineGlow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$81 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$81.resource;
                try (Using<PolylineMaterialCesiumWriter> using$82 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$82.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$83 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$83.resource;
                        try (Using<ColorCesiumWriter> using$84 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$84.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineGlow", createList("polyline", "depthFailMaterial", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineGlow').polyline.depthFailMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$85 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$85.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineGlow", createList("polyline", "depthFailMaterial", "glowPower")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.glowPower.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineGlow').polyline.depthFailMaterial.glowPower.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$86 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$86.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_polylineGlow", createList("polyline", "depthFailMaterial", "taperPower")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.taperPower.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_polylineGlow').polyline.depthFailMaterial.taperPower.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$87 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$87.resource;
            packet.writeId("reference_polyline_depthFailMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_image')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$88 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$88.resource;
                try (Using<PolylineMaterialCesiumWriter> using$89 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$89.resource;
                    try (Using<ImageMaterialCesiumWriter> using$90 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$90.resource;
                        try (Using<UriCesiumWriter> using$91 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$91.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_image", createList("polyline", "depthFailMaterial", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_image').polyline.depthFailMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$92 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$92.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_image", createList("polyline", "depthFailMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_image').polyline.depthFailMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$93 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$93.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_image", createList("polyline", "depthFailMaterial", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_image').polyline.depthFailMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$94 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$94.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_image", createList("polyline", "depthFailMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_image').polyline.depthFailMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$95 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$95.resource;
            packet.writeId("reference_polyline_depthFailMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_grid')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$96 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$96.resource;
                try (Using<PolylineMaterialCesiumWriter> using$97 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$97.resource;
                    try (Using<GridMaterialCesiumWriter> using$98 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$98.resource;
                        try (Using<ColorCesiumWriter> using$99 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$99.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_grid", createList("polyline", "depthFailMaterial", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_grid').polyline.depthFailMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$100 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$100.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_grid", createList("polyline", "depthFailMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_grid').polyline.depthFailMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$101 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$101.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_grid", createList("polyline", "depthFailMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_grid').polyline.depthFailMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$102 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$102.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_grid", createList("polyline", "depthFailMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_grid').polyline.depthFailMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$103 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$103.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_grid", createList("polyline", "depthFailMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_grid').polyline.depthFailMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$104 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$104.resource;
            packet.writeId("reference_polyline_depthFailMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_stripe')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$105 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$105.resource;
                try (Using<PolylineMaterialCesiumWriter> using$106 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$106.resource;
                    try (Using<StripeMaterialCesiumWriter> using$107 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$107.resource;
                        try (Using<StripeOrientationCesiumWriter> using$108 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$108.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_stripe", createList("polyline", "depthFailMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_stripe').polyline.depthFailMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$109 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$109.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_stripe", createList("polyline", "depthFailMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_stripe').polyline.depthFailMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$110 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$110.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_stripe", createList("polyline", "depthFailMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_stripe').polyline.depthFailMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$111 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$111.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_stripe", createList("polyline", "depthFailMaterial", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_stripe').polyline.depthFailMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$112 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$112.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_stripe", createList("polyline", "depthFailMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_stripe').polyline.depthFailMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$113 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$113.resource;
            packet.writeId("reference_polyline_depthFailMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polyline_depthFailMaterial_checkerboard')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$114 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$114.resource;
                try (Using<PolylineMaterialCesiumWriter> using$115 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$115.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$116 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$116.resource;
                        try (Using<ColorCesiumWriter> using$117 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$117.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_checkerboard", createList("polyline", "depthFailMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_checkerboard').polyline.depthFailMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$118 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$118.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_checkerboard", createList("polyline", "depthFailMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_checkerboard').polyline.depthFailMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$119 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$119.resource;
                            m2.writeReference(new Reference("material_polyline_depthFailMaterial_checkerboard", createList("polyline", "depthFailMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polyline_depthFailMaterial_checkerboard').polyline.depthFailMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualPolylineVolume() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_polylineVolume_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polylineVolume_material_image')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$1 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_image", createList("polylineVolume", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_image').polylineVolume.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_image", createList("polylineVolume", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_image').polylineVolume.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_image", createList("polylineVolume", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_image').polylineVolume.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_image", createList("polylineVolume", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_image').polylineVolume.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_polylineVolume_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polylineVolume_material_grid')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$9 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_grid", createList("polylineVolume", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_grid').polylineVolume.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_grid", createList("polylineVolume", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_grid').polylineVolume.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_grid", createList("polylineVolume", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_grid').polylineVolume.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_grid", createList("polylineVolume", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_grid').polylineVolume.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_grid", createList("polylineVolume", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_grid').polylineVolume.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_polylineVolume_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polylineVolume_material_stripe')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$18 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_stripe", createList("polylineVolume", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_stripe').polylineVolume.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_stripe", createList("polylineVolume", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_stripe').polylineVolume.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_stripe", createList("polylineVolume", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_stripe').polylineVolume.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_stripe", createList("polylineVolume", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_stripe').polylineVolume.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_stripe", createList("polylineVolume", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_stripe').polylineVolume.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_polylineVolume_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_polylineVolume_material_checkerboard')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$27 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_checkerboard", createList("polylineVolume", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_checkerboard').polylineVolume.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_checkerboard", createList("polylineVolume", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_checkerboard').polylineVolume.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_polylineVolume_material_checkerboard", createList("polylineVolume", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_polylineVolume_material_checkerboard').polylineVolume.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualRectangle() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_rectangle_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangle_material_image')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$1 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_rectangle_material_image", createList("rectangle", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_image').rectangle.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_rectangle_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangle_material_grid')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$9 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_rectangle_material_grid", createList("rectangle", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_grid').rectangle.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_rectangle_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangle_material_stripe')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$18 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_rectangle_material_stripe", createList("rectangle", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_stripe').rectangle.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_rectangle_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangle_material_checkerboard')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$27 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_rectangle_material_checkerboard", createList("rectangle", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_checkerboard').rectangle.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_rectangle_material_checkerboard", createList("rectangle", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_checkerboard').rectangle.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_rectangle_material_checkerboard", createList("rectangle", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangle_material_checkerboard').rectangle.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualTileset() {}

    private final void writeReferenceValuesIndividualWall() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_wall_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_wall_material_image')).toBeDefined();");
            try (Using<WallCesiumWriter> using$1 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "image")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_wall_material_image", createList("wall", "material", "transparent")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_image').wall.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_wall_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_wall_material_grid')).toBeDefined();");
            try (Using<WallCesiumWriter> using$9 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "color")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_wall_material_grid", createList("wall", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_grid').wall.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_wall_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_wall_material_stripe')).toBeDefined();");
            try (Using<WallCesiumWriter> using$18 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "orientation")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "offset")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_wall_material_stripe", createList("wall", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_stripe').wall.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_wall_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_wall_material_checkerboard')).toBeDefined();");
            try (Using<WallCesiumWriter> using$27 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_wall_material_checkerboard", createList("wall", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_checkerboard').wall.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_wall_material_checkerboard", createList("wall", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_checkerboard').wall.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_wall_material_checkerboard", createList("wall", "material", "repeat")));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_wall_material_checkerboard').wall.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualConicSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_conicSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$1 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_image", createList("conicSensor", "lateralSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_image').conicSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_conicSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$9 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_grid", createList("conicSensor", "lateralSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_grid').conicSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_conicSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$18 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_stripe", createList("conicSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_stripe').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_conicSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$27 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_checkerboard", createList("conicSensor", "lateralSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_checkerboard').conicSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_checkerboard", createList("conicSensor", "lateralSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_checkerboard').conicSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_conicSensor_lateralSurfaceMaterial_checkerboard", createList("conicSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_lateralSurfaceMaterial_checkerboard').conicSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$33 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$33.resource;
            packet.writeId("reference_conicSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$34 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$34.resource;
                try (Using<MaterialCesiumWriter> using$35 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$35.resource;
                    try (Using<ImageMaterialCesiumWriter> using$36 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$36.resource;
                        try (Using<UriCesiumWriter> using$37 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$37.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$38 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$38.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$40 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$40.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_image", createList("conicSensor", "ellipsoidSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_image').conicSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$41 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$41.resource;
            packet.writeId("reference_conicSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$42 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$42.resource;
                try (Using<MaterialCesiumWriter> using$43 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$43.resource;
                    try (Using<GridMaterialCesiumWriter> using$44 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$44.resource;
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$46 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$46.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$47 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$47.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$48 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$48.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$49 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$49.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_grid", createList("conicSensor", "ellipsoidSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_grid').conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("reference_conicSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$51 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<StripeOrientationCesiumWriter> using$54 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$54.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$55 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$55.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$56 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$56.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$57 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$57.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$58 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$58.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_stripe').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$59 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$59.resource;
            packet.writeId("reference_conicSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$60 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$60.resource;
                try (Using<MaterialCesiumWriter> using$61 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$61.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$62 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$62.resource;
                        try (Using<ColorCesiumWriter> using$63 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$63.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_checkerboard", createList("conicSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_checkerboard').conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_checkerboard", createList("conicSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_checkerboard').conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$65 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$65.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidSurfaceMaterial_checkerboard", createList("conicSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidSurfaceMaterial_checkerboard').conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$66 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$66.resource;
            packet.writeId("reference_conicSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$67 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$67.resource;
                try (Using<MaterialCesiumWriter> using$68 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$68.resource;
                    try (Using<ImageMaterialCesiumWriter> using$69 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$69.resource;
                        try (Using<UriCesiumWriter> using$70 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$70.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$71 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$71.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$72 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$72.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$73 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$73.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_image", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_image').conicSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$74 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$74.resource;
            packet.writeId("reference_conicSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$75 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$75.resource;
                try (Using<MaterialCesiumWriter> using$76 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$76.resource;
                    try (Using<GridMaterialCesiumWriter> using$77 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$77.resource;
                        try (Using<ColorCesiumWriter> using$78 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$78.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$79 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$79.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$80 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$80.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$81 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$81.resource;
                            m2.writeReference(
                                    new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$82 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$82.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_grid').conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$83 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$83.resource;
            packet.writeId("reference_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$84 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$84.resource;
                try (Using<MaterialCesiumWriter> using$85 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$85.resource;
                    try (Using<StripeMaterialCesiumWriter> using$86 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$86.resource;
                        try (Using<StripeOrientationCesiumWriter> using$87 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$87.resource;
                            m2.writeReference(
                                    new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$88 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$88.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$89 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$89.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$90 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$90.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$91 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$91.resource;
                            m2.writeReference(new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$92 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$92.resource;
            packet.writeId("reference_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$93 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$93.resource;
                try (Using<MaterialCesiumWriter> using$94 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$94.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$95 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$95.resource;
                        try (Using<ColorCesiumWriter> using$96 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$96.resource;
                            m2.writeReference(
                                    new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$97 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$97.resource;
                            m2.writeReference(
                                    new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$98 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$98.resource;
                            m2.writeReference(
                                    new Reference("material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard", createList("conicSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$99 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$99.resource;
            packet.writeId("reference_conicSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$100 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$100.resource;
                try (Using<MaterialCesiumWriter> using$101 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$101.resource;
                    try (Using<ImageMaterialCesiumWriter> using$102 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$102.resource;
                        try (Using<UriCesiumWriter> using$103 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$103.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$104 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$104.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$105 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$105.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$106 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$106.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_image", createList("conicSensor", "domeSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_image').conicSensor.domeSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$107 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$107.resource;
            packet.writeId("reference_conicSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$108 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$108.resource;
                try (Using<MaterialCesiumWriter> using$109 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$109.resource;
                    try (Using<GridMaterialCesiumWriter> using$110 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$110.resource;
                        try (Using<ColorCesiumWriter> using$111 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$111.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$112 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$112.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$113 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$113.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$114 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$114.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$115 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$115.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_grid", createList("conicSensor", "domeSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_grid').conicSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$116 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$116.resource;
            packet.writeId("reference_conicSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$117 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$117.resource;
                try (Using<MaterialCesiumWriter> using$118 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$118.resource;
                    try (Using<StripeMaterialCesiumWriter> using$119 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$119.resource;
                        try (Using<StripeOrientationCesiumWriter> using$120 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$120.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$121 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$121.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$122 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$122.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$123 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$123.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$124 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$124.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_stripe", createList("conicSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_stripe').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$125 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$125.resource;
            packet.writeId("reference_conicSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$126 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$126.resource;
                try (Using<MaterialCesiumWriter> using$127 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$127.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$128 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$128.resource;
                        try (Using<ColorCesiumWriter> using$129 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$129.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_checkerboard", createList("conicSensor", "domeSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_checkerboard').conicSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$130 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$130.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_checkerboard", createList("conicSensor", "domeSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_checkerboard').conicSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$131 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$131.resource;
                            m2.writeReference(new Reference("material_conicSensor_domeSurfaceMaterial_checkerboard", createList("conicSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_domeSurfaceMaterial_checkerboard').conicSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$132 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$132.resource;
            packet.writeId("reference_conicSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$133 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$133.resource;
                try (Using<MaterialCesiumWriter> using$134 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$134.resource;
                    try (Using<ImageMaterialCesiumWriter> using$135 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$135.resource;
                        try (Using<UriCesiumWriter> using$136 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$136.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$137 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$137.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$138 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$138.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$139 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$139.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_image", createList("conicSensor", "environmentOcclusionMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_image').conicSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$140 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$140.resource;
            packet.writeId("reference_conicSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$141 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$141.resource;
                try (Using<MaterialCesiumWriter> using$142 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$142.resource;
                    try (Using<GridMaterialCesiumWriter> using$143 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$143.resource;
                        try (Using<ColorCesiumWriter> using$144 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$144.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$145 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$145.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$146 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$146.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$147 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$147.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$148 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$148.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_grid", createList("conicSensor", "environmentOcclusionMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_grid').conicSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$149 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$149.resource;
            packet.writeId("reference_conicSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$150 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$150.resource;
                try (Using<MaterialCesiumWriter> using$151 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$151.resource;
                    try (Using<StripeMaterialCesiumWriter> using$152 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$152.resource;
                        try (Using<StripeOrientationCesiumWriter> using$153 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$153.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$154 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$154.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$155 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$155.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$156 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$156.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$157.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_stripe", createList("conicSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_stripe').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$158 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$158.resource;
            packet.writeId("reference_conicSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_conicSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$159 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$159.resource;
                try (Using<MaterialCesiumWriter> using$160 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$160.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$161 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$161.resource;
                        try (Using<ColorCesiumWriter> using$162 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$162.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_checkerboard", createList("conicSensor", "environmentOcclusionMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_checkerboard').conicSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$163 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$163.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_checkerboard", createList("conicSensor", "environmentOcclusionMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_checkerboard').conicSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$164 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$164.resource;
                            m2.writeReference(new Reference("material_conicSensor_environmentOcclusionMaterial_checkerboard", createList("conicSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_conicSensor_environmentOcclusionMaterial_checkerboard').conicSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualCustomPatternSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_customPatternSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$1 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor", "lateralSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_image", createList("customPatternSensor", "lateralSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_image').customPatternSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_customPatternSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$9 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_grid", createList("customPatternSensor", "lateralSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_grid').customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_customPatternSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$18 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor", "lateralSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor", "lateralSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor", "lateralSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor", "lateralSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_stripe", createList("customPatternSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_stripe').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_customPatternSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$27 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_lateralSurfaceMaterial_checkerboard", createList("customPatternSensor", "lateralSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_checkerboard').customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_lateralSurfaceMaterial_checkerboard", createList("customPatternSensor", "lateralSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_checkerboard').customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_lateralSurfaceMaterial_checkerboard", createList("customPatternSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_lateralSurfaceMaterial_checkerboard').customPatternSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$33 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$33.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$34 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$34.resource;
                try (Using<MaterialCesiumWriter> using$35 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$35.resource;
                    try (Using<ImageMaterialCesiumWriter> using$36 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$36.resource;
                        try (Using<UriCesiumWriter> using$37 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$37.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$38 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$38.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$40 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$40.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_image", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_image').customPatternSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$41 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$41.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$42 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$42.resource;
                try (Using<MaterialCesiumWriter> using$43 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$43.resource;
                    try (Using<GridMaterialCesiumWriter> using$44 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$44.resource;
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$46 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$46.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$47 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$47.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$48 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$48.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$49 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$49.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_grid", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_grid').customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$51 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<StripeOrientationCesiumWriter> using$54 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$54.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$55 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$55.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$56 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$56.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$57 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$57.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$58 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$58.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_stripe", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_stripe').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$59 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$59.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$60 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$60.resource;
                try (Using<MaterialCesiumWriter> using$61 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$61.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$62 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$62.resource;
                        try (Using<ColorCesiumWriter> using$63 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$63.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard').customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard').customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$65 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$65.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard", createList("customPatternSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard').customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$66 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$66.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$67 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$67.resource;
                try (Using<MaterialCesiumWriter> using$68 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$68.resource;
                    try (Using<ImageMaterialCesiumWriter> using$69 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$69.resource;
                        try (Using<UriCesiumWriter> using$70 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$70.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$71 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$71.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$72 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$72.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image", createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$73 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$73.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image').customPatternSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$74 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$74.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$75 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$75.resource;
                try (Using<MaterialCesiumWriter> using$76 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$76.resource;
                    try (Using<GridMaterialCesiumWriter> using$77 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$77.resource;
                        try (Using<ColorCesiumWriter> using$78 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$78.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$79 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$79.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$80 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$80.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$81 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$81.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$82 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$82.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid').customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$83 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$83.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$84 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$84.resource;
                try (Using<MaterialCesiumWriter> using$85 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$85.resource;
                    try (Using<StripeMaterialCesiumWriter> using$86 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$86.resource;
                        try (Using<StripeOrientationCesiumWriter> using$87 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$87.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$88 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$88.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$89 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$89.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$90 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$90.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$91 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$91.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$92 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$92.resource;
            packet.writeId("reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$93 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$93.resource;
                try (Using<MaterialCesiumWriter> using$94 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$94.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$95 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$95.resource;
                        try (Using<ColorCesiumWriter> using$96 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$96.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$97 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$97.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$98 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$98.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard",
                                    createList("customPatternSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$99 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$99.resource;
            packet.writeId("reference_customPatternSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$100 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$100.resource;
                try (Using<MaterialCesiumWriter> using$101 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$101.resource;
                    try (Using<ImageMaterialCesiumWriter> using$102 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$102.resource;
                        try (Using<UriCesiumWriter> using$103 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$103.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$104 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$104.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$105 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$105.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$106 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$106.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_image", createList("customPatternSensor", "domeSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_image').customPatternSensor.domeSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$107 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$107.resource;
            packet.writeId("reference_customPatternSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$108 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$108.resource;
                try (Using<MaterialCesiumWriter> using$109 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$109.resource;
                    try (Using<GridMaterialCesiumWriter> using$110 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$110.resource;
                        try (Using<ColorCesiumWriter> using$111 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$111.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$112 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$112.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$113 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$113.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$114 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$114.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$115 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$115.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_grid", createList("customPatternSensor", "domeSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_grid').customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$116 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$116.resource;
            packet.writeId("reference_customPatternSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$117 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$117.resource;
                try (Using<MaterialCesiumWriter> using$118 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$118.resource;
                    try (Using<StripeMaterialCesiumWriter> using$119 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$119.resource;
                        try (Using<StripeOrientationCesiumWriter> using$120 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$120.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$121 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$121.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$122 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$122.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$123 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$123.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$124 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$124.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_stripe", createList("customPatternSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_stripe').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$125 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$125.resource;
            packet.writeId("reference_customPatternSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$126 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$126.resource;
                try (Using<MaterialCesiumWriter> using$127 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$127.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$128 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$128.resource;
                        try (Using<ColorCesiumWriter> using$129 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$129.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_checkerboard", createList("customPatternSensor", "domeSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_checkerboard').customPatternSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$130 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$130.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_checkerboard", createList("customPatternSensor", "domeSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_checkerboard').customPatternSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$131 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$131.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_domeSurfaceMaterial_checkerboard", createList("customPatternSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_domeSurfaceMaterial_checkerboard').customPatternSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$132 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$132.resource;
            packet.writeId("reference_customPatternSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$133 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$133.resource;
                try (Using<MaterialCesiumWriter> using$134 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$134.resource;
                    try (Using<ImageMaterialCesiumWriter> using$135 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$135.resource;
                        try (Using<UriCesiumWriter> using$136 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$136.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor", "environmentOcclusionMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$137 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$137.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$138 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$138.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$139 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$139.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_image", createList("customPatternSensor", "environmentOcclusionMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_image').customPatternSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$140 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$140.resource;
            packet.writeId("reference_customPatternSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$141 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$141.resource;
                try (Using<MaterialCesiumWriter> using$142 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$142.resource;
                    try (Using<GridMaterialCesiumWriter> using$143 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$143.resource;
                        try (Using<ColorCesiumWriter> using$144 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$144.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$145 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$145.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor", "environmentOcclusionMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$146 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$146.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor", "environmentOcclusionMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$147 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$147.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid",
                                    createList("customPatternSensor", "environmentOcclusionMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$148 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$148.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_grid", createList("customPatternSensor", "environmentOcclusionMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_grid').customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$149 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$149.resource;
            packet.writeId("reference_customPatternSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$150 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$150.resource;
                try (Using<MaterialCesiumWriter> using$151 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$151.resource;
                    try (Using<StripeMaterialCesiumWriter> using$152 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$152.resource;
                        try (Using<StripeOrientationCesiumWriter> using$153 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$153.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe",
                                    createList("customPatternSensor", "environmentOcclusionMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$154 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$154.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor", "environmentOcclusionMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$155 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$155.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor", "environmentOcclusionMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$156 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$156.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor", "environmentOcclusionMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$157.resource;
                            m2.writeReference(
                                    new Reference("material_customPatternSensor_environmentOcclusionMaterial_stripe", createList("customPatternSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_stripe').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$158 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$158.resource;
            packet.writeId("reference_customPatternSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_customPatternSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$159 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$159.resource;
                try (Using<MaterialCesiumWriter> using$160 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$160.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$161 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$161.resource;
                        try (Using<ColorCesiumWriter> using$162 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$162.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_checkerboard",
                                    createList("customPatternSensor", "environmentOcclusionMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_checkerboard').customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$163 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$163.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_checkerboard",
                                    createList("customPatternSensor", "environmentOcclusionMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_checkerboard').customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$164 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$164.resource;
                            m2.writeReference(new Reference("material_customPatternSensor_environmentOcclusionMaterial_checkerboard",
                                    createList("customPatternSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_customPatternSensor_environmentOcclusionMaterial_checkerboard').customPatternSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualRectangularSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_rectangularSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$1 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_image", createList("rectangularSensor", "lateralSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_image').rectangularSensor.lateralSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_rectangularSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$9 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_grid", createList("rectangularSensor", "lateralSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_grid').rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_rectangularSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$18 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_stripe", createList("rectangularSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_stripe').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_rectangularSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$27 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_checkerboard", createList("rectangularSensor", "lateralSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_checkerboard').rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_checkerboard", createList("rectangularSensor", "lateralSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_checkerboard').rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_lateralSurfaceMaterial_checkerboard", createList("rectangularSensor", "lateralSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_lateralSurfaceMaterial_checkerboard').rectangularSensor.lateralSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$33 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$33.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$34 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$34.resource;
                try (Using<MaterialCesiumWriter> using$35 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$35.resource;
                    try (Using<ImageMaterialCesiumWriter> using$36 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$36.resource;
                        try (Using<UriCesiumWriter> using$37 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$37.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$38 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$38.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$40 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$40.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_image", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_image').rectangularSensor.ellipsoidSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$41 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$41.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$42 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$42.resource;
                try (Using<MaterialCesiumWriter> using$43 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$43.resource;
                    try (Using<GridMaterialCesiumWriter> using$44 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$44.resource;
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$46 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$46.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$47 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$47.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$48 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$48.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$49 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$49.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_grid').rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$51 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<StripeOrientationCesiumWriter> using$54 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$54.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$55 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$55.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$56 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$56.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$57 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$57.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$58 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$58.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_stripe').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$59 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$59.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$60 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$60.resource;
                try (Using<MaterialCesiumWriter> using$61 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$61.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$62 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$62.resource;
                        try (Using<ColorCesiumWriter> using$63 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$63.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard').rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard').rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$65 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$65.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard", createList("rectangularSensor", "ellipsoidSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard').rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$66 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$66.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$67 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$67.resource;
                try (Using<MaterialCesiumWriter> using$68 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$68.resource;
                    try (Using<ImageMaterialCesiumWriter> using$69 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$69.resource;
                        try (Using<UriCesiumWriter> using$70 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$70.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$71 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$71.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$72 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$72.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$73 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$73.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image",
                                    createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image').rectangularSensor.ellipsoidHorizonSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$74 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$74.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$75 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$75.resource;
                try (Using<MaterialCesiumWriter> using$76 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$76.resource;
                    try (Using<GridMaterialCesiumWriter> using$77 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$77.resource;
                        try (Using<ColorCesiumWriter> using$78 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$78.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$79 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$79.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$80 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$80.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$81 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$81.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid",
                                    createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$82 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$82.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid').rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$83 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$83.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$84 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$84.resource;
                try (Using<MaterialCesiumWriter> using$85 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$85.resource;
                    try (Using<StripeMaterialCesiumWriter> using$86 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$86.resource;
                        try (Using<StripeOrientationCesiumWriter> using$87 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$87.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe",
                                    createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$88 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$88.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe",
                                    createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$89 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$89.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$90 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$90.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$91 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$91.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe", createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$92 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$92.resource;
            packet.writeId("reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$93 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$93.resource;
                try (Using<MaterialCesiumWriter> using$94 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$94.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$95 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$95.resource;
                        try (Using<ColorCesiumWriter> using$96 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$96.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard",
                                    createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$97 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$97.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard",
                                    createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$98 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$98.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard",
                                    createList("rectangularSensor", "ellipsoidHorizonSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard').rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$99 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$99.resource;
            packet.writeId("reference_rectangularSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$100 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$100.resource;
                try (Using<MaterialCesiumWriter> using$101 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$101.resource;
                    try (Using<ImageMaterialCesiumWriter> using$102 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$102.resource;
                        try (Using<UriCesiumWriter> using$103 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$103.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$104 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$104.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$105 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$105.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$106 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$106.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_image", createList("rectangularSensor", "domeSurfaceMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_image').rectangularSensor.domeSurfaceMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$107 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$107.resource;
            packet.writeId("reference_rectangularSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$108 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$108.resource;
                try (Using<MaterialCesiumWriter> using$109 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$109.resource;
                    try (Using<GridMaterialCesiumWriter> using$110 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$110.resource;
                        try (Using<ColorCesiumWriter> using$111 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$111.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$112 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$112.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$113 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$113.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$114 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$114.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$115 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$115.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_grid", createList("rectangularSensor", "domeSurfaceMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_grid').rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$116 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$116.resource;
            packet.writeId("reference_rectangularSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$117 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$117.resource;
                try (Using<MaterialCesiumWriter> using$118 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$118.resource;
                    try (Using<StripeMaterialCesiumWriter> using$119 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$119.resource;
                        try (Using<StripeOrientationCesiumWriter> using$120 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$120.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$121 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$121.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$122 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$122.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$123 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$123.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$124 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$124.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_stripe", createList("rectangularSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_stripe').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$125 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$125.resource;
            packet.writeId("reference_rectangularSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$126 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$126.resource;
                try (Using<MaterialCesiumWriter> using$127 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$127.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$128 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$128.resource;
                        try (Using<ColorCesiumWriter> using$129 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$129.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_checkerboard", createList("rectangularSensor", "domeSurfaceMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_checkerboard').rectangularSensor.domeSurfaceMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$130 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$130.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_checkerboard", createList("rectangularSensor", "domeSurfaceMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_checkerboard').rectangularSensor.domeSurfaceMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$131 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$131.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_domeSurfaceMaterial_checkerboard", createList("rectangularSensor", "domeSurfaceMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_domeSurfaceMaterial_checkerboard').rectangularSensor.domeSurfaceMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$132 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$132.resource;
            packet.writeId("reference_rectangularSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$133 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$133.resource;
                try (Using<MaterialCesiumWriter> using$134 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$134.resource;
                    try (Using<ImageMaterialCesiumWriter> using$135 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$135.resource;
                        try (Using<UriCesiumWriter> using$136 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$136.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor", "environmentOcclusionMaterial", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.image.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$137 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$137.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$138 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$138.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$139 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$139.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_image", createList("rectangularSensor", "environmentOcclusionMaterial", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_image').rectangularSensor.environmentOcclusionMaterial.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$140 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$140.resource;
            packet.writeId("reference_rectangularSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$141 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$141.resource;
                try (Using<MaterialCesiumWriter> using$142 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$142.resource;
                    try (Using<GridMaterialCesiumWriter> using$143 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$143.resource;
                        try (Using<ColorCesiumWriter> using$144 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$144.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor", "environmentOcclusionMaterial", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$145 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$145.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor", "environmentOcclusionMaterial", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$146 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$146.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor", "environmentOcclusionMaterial", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$147 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$147.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor", "environmentOcclusionMaterial", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$148 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$148.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_grid", createList("rectangularSensor", "environmentOcclusionMaterial", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_grid').rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$149 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$149.resource;
            packet.writeId("reference_rectangularSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$150 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$150.resource;
                try (Using<MaterialCesiumWriter> using$151 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$151.resource;
                    try (Using<StripeMaterialCesiumWriter> using$152 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$152.resource;
                        try (Using<StripeOrientationCesiumWriter> using$153 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$153.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor", "environmentOcclusionMaterial", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$154 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$154.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor", "environmentOcclusionMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$155 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$155.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor", "environmentOcclusionMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$156 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$156.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor", "environmentOcclusionMaterial", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$157.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_stripe", createList("rectangularSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_stripe').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$158 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$158.resource;
            packet.writeId("reference_rectangularSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_rectangularSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$159 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$159.resource;
                try (Using<MaterialCesiumWriter> using$160 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$160.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$161 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$161.resource;
                        try (Using<ColorCesiumWriter> using$162 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$162.resource;
                            m2.writeReference(new Reference("material_rectangularSensor_environmentOcclusionMaterial_checkerboard",
                                    createList("rectangularSensor", "environmentOcclusionMaterial", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_checkerboard').rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$163 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$163.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_checkerboard", createList("rectangularSensor", "environmentOcclusionMaterial", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_checkerboard').rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$164 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$164.resource;
                            m2.writeReference(
                                    new Reference("material_rectangularSensor_environmentOcclusionMaterial_checkerboard", createList("rectangularSensor", "environmentOcclusionMaterial", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_rectangularSensor_environmentOcclusionMaterial_checkerboard').rectangularSensor.environmentOcclusionMaterial.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualFan() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("reference_fan_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_fan_material_image')).toBeDefined();");
            try (Using<FanCesiumWriter> using$1 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<ImageMaterialCesiumWriter> using$3 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$3.resource;
                        try (Using<UriCesiumWriter> using$4 = new Using<UriCesiumWriter>(m.openImageProperty())) {
                            final UriCesiumWriter m2 = using$4.resource;
                            m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "image")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.image.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.image.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$5 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$5.resource;
                            m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.repeat.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$6 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$6.resource;
                            m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.color.getValue(date));");
                        }
                        try (Using<BooleanCesiumWriter> using$7 = new Using<BooleanCesiumWriter>(m.openTransparentProperty())) {
                            final BooleanCesiumWriter m2 = using$7.resource;
                            m2.writeReference(new Reference("material_fan_material_image", createList("fan", "material", "transparent")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.transparent.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_image').fan.material.transparent.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("reference_fan_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_fan_material_grid')).toBeDefined();");
            try (Using<FanCesiumWriter> using$9 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<GridMaterialCesiumWriter> using$11 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$11.resource;
                        try (Using<ColorCesiumWriter> using$12 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$12.resource;
                            m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "color")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.color.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$13 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$13.resource;
                            m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "cellAlpha")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.cellAlpha.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.cellAlpha.getValue(date));");
                        }
                        try (Using<LineCountCesiumWriter> using$14 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$14.resource;
                            m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineCount")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.lineCount.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineCount.getValue(date));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$15 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$15.resource;
                            m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineThickness")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.lineThickness.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineThickness.getValue(date));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$16 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$16.resource;
                            m2.writeReference(new Reference("material_fan_material_grid", createList("fan", "material", "lineOffset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.lineOffset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_grid').fan.material.lineOffset.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("reference_fan_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_fan_material_stripe')).toBeDefined();");
            try (Using<FanCesiumWriter> using$18 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$18.resource;
                try (Using<MaterialCesiumWriter> using$19 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$19.resource;
                    try (Using<StripeMaterialCesiumWriter> using$20 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$20.resource;
                        try (Using<StripeOrientationCesiumWriter> using$21 = new Using<StripeOrientationCesiumWriter>(m.openOrientationProperty())) {
                            final StripeOrientationCesiumWriter m2 = using$21.resource;
                            m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "orientation")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.orientation.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.orientation.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.oddColor.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$24 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$24.resource;
                            m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "offset")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.offset.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.offset.getValue(date));");
                        }
                        try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$25.resource;
                            m2.writeReference(new Reference("material_fan_material_stripe", createList("fan", "material", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_stripe').fan.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$26 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$26.resource;
            packet.writeId("reference_fan_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('reference_fan_material_checkerboard')).toBeDefined();");
            try (Using<FanCesiumWriter> using$27 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$27.resource;
                try (Using<MaterialCesiumWriter> using$28 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$28.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$29 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$29.resource;
                        try (Using<ColorCesiumWriter> using$30 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$30.resource;
                            m2.writeReference(new Reference("material_fan_material_checkerboard", createList("fan", "material", "evenColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_checkerboard').fan.material.evenColor.getValue(date));");
                        }
                        try (Using<ColorCesiumWriter> using$31 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$31.resource;
                            m2.writeReference(new Reference("material_fan_material_checkerboard", createList("fan", "material", "oddColor")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_checkerboard').fan.material.oddColor.getValue(date));");
                        }
                        try (Using<RepeatCesiumWriter> using$32 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$32.resource;
                            m2.writeReference(new Reference("material_fan_material_checkerboard", createList("fan", "material", "repeat")));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.repeat.getValue(date)).toEqual(dataSource.entities.getById('material_fan_material_checkerboard').fan.material.repeat.getValue(date));");
                        }
                    }
                }
            }
        }
    }

    private final void writeReferenceValuesIndividualVector() {}

    private final void writeSampledValues() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("Sampled");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('Sampled')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$1 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$1.resource;
                w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                        TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(14893.0, 22330.0, 50775.0), new Cartesian(44952.0, 52911.0, 45006.0)));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(14893, 22330, 50775));");
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(44952, 52911, 45006));");
            }
            try (Using<OrientationCesiumWriter> using$2 = new Using<OrientationCesiumWriter>(packet.openOrientationProperty())) {
                final OrientationCesiumWriter w = using$2.resource;
                w.writeUnitQuaternion(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                        TestGenerateValidationDocument.<UnitQuaternion> createList(new UnitQuaternion(0.156518736408648, 0.63382030572505, 0.114406464045845, 0.748788933003267),
                                new UnitQuaternion(0.277526613606122, 0.670778929875422, 0.608790403475694, 0.320013828781515)));
                TextWriterHelper.writeLine(m_assertionsWriter,
                        "    expect(e.orientation.getValue(documentStartDate)).toEqualEpsilon(new Quaternion(0.63382030572505, 0.114406464045845, 0.748788933003267, 0.156518736408648), 1e-14);");
                TextWriterHelper.writeLine(m_assertionsWriter,
                        "    expect(e.orientation.getValue(documentStopDate)).toEqualEpsilon(new Quaternion(0.670778929875422, 0.608790403475694, 0.320013828781515, 0.277526613606122), 1e-14);");
            }
            try (Using<ViewFromCesiumWriter> using$3 = new Using<ViewFromCesiumWriter>(packet.openViewFromProperty())) {
                final ViewFromCesiumWriter w = using$3.resource;
                w.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                        TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(36965.0, 47504.0, 12985.0), new Cartesian(16155.0, 2367.0, 57353.0)));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(documentStartDate)).toEqual(new Cartesian3(36965, 47504, 12985));");
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.viewFrom.getValue(documentStopDate)).toEqual(new Cartesian3(16155, 2367, 57353));");
            }
            try (Using<BillboardCesiumWriter> using$4 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$4.resource;
                try (Using<DoubleCesiumWriter> using$5 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$5.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(5763.0, 31607.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(documentStartDate)).toEqual(5763.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scale.getValue(documentStopDate)).toEqual(31607.0);");
                }
                try (Using<PixelOffsetCesiumWriter> using$6 = new Using<PixelOffsetCesiumWriter>(w.openPixelOffsetProperty())) {
                    final PixelOffsetCesiumWriter w2 = using$6.resource;
                    w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(2029.0, 62215.0), new Rectangular(30658.0, 12919.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2029, 62215));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(30658, 12919));");
                }
                try (Using<EyeOffsetCesiumWriter> using$7 = new Using<EyeOffsetCesiumWriter>(w.openEyeOffsetProperty())) {
                    final EyeOffsetCesiumWriter w2 = using$7.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(3553.0, 23821.0, 42589.0), new Cartesian(3059.0, 48139.0, 28860.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(3553, 23821, 42589));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(3059, 48139, 28860));");
                }
                try (Using<ColorCesiumWriter> using$8 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$8.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(63, 85, 19, 239), ColorHelper.fromArgb(99, 160, 189, 87)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(documentStartDate)).toEqual(Color.fromBytes(85, 19, 239, 63));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.color.getValue(documentStopDate)).toEqual(Color.fromBytes(160, 189, 87, 99));");
                }
                try (Using<DoubleCesiumWriter> using$9 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$9.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(4554.0, 21210.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(documentStartDate)).toEqual(4554.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.rotation.getValue(documentStopDate)).toEqual(21210.0);");
                }
                try (Using<AlignedAxisCesiumWriter> using$10 = new Using<AlignedAxisCesiumWriter>(w.openAlignedAxisProperty())) {
                    final AlignedAxisCesiumWriter w2 = using$10.resource;
                    w2.writeUnitCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<UnitCartesian> createList(
                            new UnitCartesian(0.971559394453729, 0.230094854374832, 0.0559347927405484), new UnitCartesian(0.384810775516236, 0.82287332508932, 0.418091088045462)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.971559394453729, 0.230094854374832, 0.0559347927405484), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.384810775516236, 0.82287332508932, 0.418091088045462), 1e-14);");
                }
                try (Using<DoubleCesiumWriter> using$11 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$11.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(21333.0, 51893.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(documentStartDate)).toEqual(21333.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.width.getValue(documentStopDate)).toEqual(51893.0);");
                }
                try (Using<DoubleCesiumWriter> using$12 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$12.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(48314.0, 61118.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(documentStartDate)).toEqual(48314.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.height.getValue(documentStopDate)).toEqual(61118.0);");
                }
                try (Using<NearFarScalarCesiumWriter> using$13 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$13.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(46842.0, 10678.0, 46377.0, 15029.0), new NearFarScalar(20642.0, 43600.0, 7082.0, 11291.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(46842, 10678, 46377, 15029));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(20642, 43600, 7082, 11291));");
                }
                try (Using<NearFarScalarCesiumWriter> using$14 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$14.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(64366.0, 52219.0, 8139.0, 10015.0), new NearFarScalar(10918.0, 18986.0, 49738.0, 60610.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(64366, 52219, 8139, 10015));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(10918, 18986, 49738, 60610));");
                }
                try (Using<NearFarScalarCesiumWriter> using$15 = new Using<NearFarScalarCesiumWriter>(w.openPixelOffsetScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$15.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(54503.0, 26068.0, 41061.0, 59552.0), new NearFarScalar(37417.0, 4754.0, 19986.0, 15182.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(54503, 26068, 41061, 59552));");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(37417, 4754, 19986, 15182));");
                }
                try (Using<BoundingRectangleCesiumWriter> using$16 = new Using<BoundingRectangleCesiumWriter>(w.openImageSubRegionProperty())) {
                    final BoundingRectangleCesiumWriter w2 = using$16.resource;
                    w2.writeBoundingRectangle(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<BoundingRectangle> createList(BoundingRectangle.fromWidthHeight(26590.0, 12135.0, 16431.0, 56640.0),
                                    BoundingRectangle.fromWidthHeight(43063.0, 42664.0, 60326.0, 52715.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(documentStartDate)).toEqual(new BoundingRectangle(26590, 12135, 16431, 56640));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.imageSubRegion.getValue(documentStopDate)).toEqual(new BoundingRectangle(43063, 42664, 60326, 52715));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$17 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$17.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(952.0, 47317.0), new Bounds(16896.0, 28226.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(952, 47317));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(16896, 28226));");
                }
                try (Using<DoubleCesiumWriter> using$18 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$18.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(18661.0, 61609.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.disableDepthTestDistance.getValue(documentStartDate)).toEqual(18661.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.billboard.disableDepthTestDistance.getValue(documentStopDate)).toEqual(61609.0);");
                }
            }
            try (Using<BoxCesiumWriter> using$19 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$19.resource;
                try (Using<BoxDimensionsCesiumWriter> using$20 = new Using<BoxDimensionsCesiumWriter>(w.openDimensionsProperty())) {
                    final BoxDimensionsCesiumWriter w2 = using$20.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(37525.0, 42898.0, 18087.0), new Cartesian(49399.0, 59584.0, 63976.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(documentStartDate)).toEqual(new Cartesian3(37525, 42898, 18087));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.dimensions.getValue(documentStopDate)).toEqual(new Cartesian3(49399, 59584, 63976));");
                }
                try (Using<MaterialCesiumWriter> using$21 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$21.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$22 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$22.resource;
                        try (Using<ColorCesiumWriter> using$23 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$23.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(165, 172, 28, 222), ColorHelper.fromArgb(150, 16, 192, 121)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 28, 222, 165));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(16, 192, 121, 150));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$24.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(237, 53, 66, 217), ColorHelper.fromArgb(48, 163, 75, 228)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(53, 66, 217, 237));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(163, 75, 228, 48));");
                }
                try (Using<DoubleCesiumWriter> using$25 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$25.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(45211.0, 20490.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(documentStartDate)).toEqual(45211.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.outlineWidth.getValue(documentStopDate)).toEqual(20490.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$26 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$26.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(8940.0, 60664.0), new Bounds(41202.0, 60832.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(8940, 60664));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(41202, 60832));");
                }
            }
            try (Using<CorridorCesiumWriter> using$27 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$27.resource;
                try (Using<DoubleCesiumWriter> using$28 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$28.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(62443.0, 13988.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(documentStartDate)).toEqual(62443.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.width.getValue(documentStopDate)).toEqual(13988.0);");
                }
                try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$29.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(20585.0, 63872.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(documentStartDate)).toEqual(20585.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.height.getValue(documentStopDate)).toEqual(63872.0);");
                }
                try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$30.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(63407.0, 42397.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(documentStartDate)).toEqual(63407.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.extrudedHeight.getValue(documentStopDate)).toEqual(42397.0);");
                }
                try (Using<DoubleCesiumWriter> using$31 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$31.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(43027.0, 55912.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(documentStartDate)).toEqual(43027.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.granularity.getValue(documentStopDate)).toEqual(55912.0);");
                }
                try (Using<MaterialCesiumWriter> using$32 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$32.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$33 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$33.resource;
                        try (Using<ColorCesiumWriter> using$34 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$34.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(79, 35, 213, 31), ColorHelper.fromArgb(40, 87, 126, 23)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(35, 213, 31, 79));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(87, 126, 23, 40));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$35.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(34, 137, 114, 57), ColorHelper.fromArgb(64, 93, 178, 74)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(137, 114, 57, 34));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(93, 178, 74, 64));");
                }
                try (Using<DoubleCesiumWriter> using$36 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$36.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(14678.0, 57820.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(documentStartDate)).toEqual(14678.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.outlineWidth.getValue(documentStopDate)).toEqual(57820.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$37 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$37.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(10884.0, 63530.0), new Bounds(20076.0, 27683.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(10884, 63530));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(20076, 27683));");
                }
                try (Using<IntegerCesiumWriter> using$38 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$38.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(36068, 60697));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.zIndex.getValue(documentStartDate)).toEqual(36068);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.zIndex.getValue(documentStopDate)).toEqual(60697);");
                }
            }
            try (Using<CylinderCesiumWriter> using$39 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$39.resource;
                try (Using<DoubleCesiumWriter> using$40 = new Using<DoubleCesiumWriter>(w.openLengthProperty())) {
                    final DoubleCesiumWriter w2 = using$40.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(30241.0, 48364.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(documentStartDate)).toEqual(30241.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.length.getValue(documentStopDate)).toEqual(48364.0);");
                }
                try (Using<DoubleCesiumWriter> using$41 = new Using<DoubleCesiumWriter>(w.openTopRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$41.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(62881.0, 16270.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(documentStartDate)).toEqual(62881.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.topRadius.getValue(documentStopDate)).toEqual(16270.0);");
                }
                try (Using<DoubleCesiumWriter> using$42 = new Using<DoubleCesiumWriter>(w.openBottomRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$42.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(61925.0, 21514.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(documentStartDate)).toEqual(61925.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.bottomRadius.getValue(documentStopDate)).toEqual(21514.0);");
                }
                try (Using<MaterialCesiumWriter> using$43 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$43.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$44 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$44.resource;
                        try (Using<ColorCesiumWriter> using$45 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$45.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(121, 133, 36, 52), ColorHelper.fromArgb(201, 7, 13, 34)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(133, 36, 52, 121));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(7, 13, 34, 201));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$46 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$46.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(103, 112, 241, 40), ColorHelper.fromArgb(51, 237, 75, 59)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(112, 241, 40, 103));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(237, 75, 59, 51));");
                }
                try (Using<DoubleCesiumWriter> using$47 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$47.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(36483.0, 32586.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(documentStartDate)).toEqual(36483.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.outlineWidth.getValue(documentStopDate)).toEqual(32586.0);");
                }
                try (Using<IntegerCesiumWriter> using$48 = new Using<IntegerCesiumWriter>(w.openNumberOfVerticalLinesProperty())) {
                    final IntegerCesiumWriter w2 = using$48.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(45816, 42247));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(documentStartDate)).toEqual(45816);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.numberOfVerticalLines.getValue(documentStopDate)).toEqual(42247);");
                }
                try (Using<IntegerCesiumWriter> using$49 = new Using<IntegerCesiumWriter>(w.openSlicesProperty())) {
                    final IntegerCesiumWriter w2 = using$49.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(46140, 53530));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(documentStartDate)).toEqual(46140);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.slices.getValue(documentStopDate)).toEqual(53530);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$50 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$50.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(2783.0, 57220.0), new Bounds(13855.0, 50230.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(2783, 57220));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(13855, 50230));");
                }
            }
            try (Using<EllipseCesiumWriter> using$51 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$51.resource;
                try (Using<DoubleCesiumWriter> using$52 = new Using<DoubleCesiumWriter>(w.openSemiMajorAxisProperty())) {
                    final DoubleCesiumWriter w2 = using$52.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(13136.0, 55507.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(documentStartDate)).toEqual(13136.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMajorAxis.getValue(documentStopDate)).toEqual(55507.0);");
                }
                try (Using<DoubleCesiumWriter> using$53 = new Using<DoubleCesiumWriter>(w.openSemiMinorAxisProperty())) {
                    final DoubleCesiumWriter w2 = using$53.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(41580.0, 60905.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(documentStartDate)).toEqual(41580.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.semiMinorAxis.getValue(documentStopDate)).toEqual(60905.0);");
                }
                try (Using<DoubleCesiumWriter> using$54 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$54.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(5567.0, 45588.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(documentStartDate)).toEqual(5567.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.height.getValue(documentStopDate)).toEqual(45588.0);");
                }
                try (Using<DoubleCesiumWriter> using$55 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$55.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(16542.0, 13545.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(documentStartDate)).toEqual(16542.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.extrudedHeight.getValue(documentStopDate)).toEqual(13545.0);");
                }
                try (Using<DoubleCesiumWriter> using$56 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$56.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(5797.0, 24542.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(documentStartDate)).toEqual(5797.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.rotation.getValue(documentStopDate)).toEqual(24542.0);");
                }
                try (Using<DoubleCesiumWriter> using$57 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$57.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(20596.0, 58204.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(documentStartDate)).toEqual(20596.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.stRotation.getValue(documentStopDate)).toEqual(58204.0);");
                }
                try (Using<DoubleCesiumWriter> using$58 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$58.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(2228.0, 43731.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(documentStartDate)).toEqual(2228.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.granularity.getValue(documentStopDate)).toEqual(43731.0);");
                }
                try (Using<MaterialCesiumWriter> using$59 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$59.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$60 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$60.resource;
                        try (Using<ColorCesiumWriter> using$61 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$61.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(96, 174, 250, 78), ColorHelper.fromArgb(174, 63, 102, 221)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(174, 250, 78, 96));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(63, 102, 221, 174));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$62.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(31, 243, 123, 194), ColorHelper.fromArgb(203, 236, 100, 22)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 123, 194, 31));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(236, 100, 22, 203));");
                }
                try (Using<DoubleCesiumWriter> using$63 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$63.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(60636.0, 24194.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(documentStartDate)).toEqual(60636.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.outlineWidth.getValue(documentStopDate)).toEqual(24194.0);");
                }
                try (Using<IntegerCesiumWriter> using$64 = new Using<IntegerCesiumWriter>(w.openNumberOfVerticalLinesProperty())) {
                    final IntegerCesiumWriter w2 = using$64.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(52822, 45768));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(documentStartDate)).toEqual(52822);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.numberOfVerticalLines.getValue(documentStopDate)).toEqual(45768);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$65 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$65.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(38393.0, 63947.0), new Bounds(29119.0, 43121.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(38393, 63947));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(29119, 43121));");
                }
                try (Using<IntegerCesiumWriter> using$66 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$66.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(8989, 52730));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.zIndex.getValue(documentStartDate)).toEqual(8989);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.zIndex.getValue(documentStopDate)).toEqual(52730);");
                }
            }
            try (Using<EllipsoidCesiumWriter> using$67 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$67.resource;
                try (Using<EllipsoidRadiiCesiumWriter> using$68 = new Using<EllipsoidRadiiCesiumWriter>(w.openRadiiProperty())) {
                    final EllipsoidRadiiCesiumWriter w2 = using$68.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(5183.0, 10004.0, 13863.0), new Cartesian(39497.0, 12186.0, 45103.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(documentStartDate)).toEqual(new Cartesian3(5183, 10004, 13863));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.radii.getValue(documentStopDate)).toEqual(new Cartesian3(39497, 12186, 45103));");
                }
                try (Using<EllipsoidRadiiCesiumWriter> using$69 = new Using<EllipsoidRadiiCesiumWriter>(w.openInnerRadiiProperty())) {
                    final EllipsoidRadiiCesiumWriter w2 = using$69.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(40318.0, 27037.0, 59497.0), new Cartesian(57650.0, 53729.0, 12241.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.innerRadii.getValue(documentStartDate)).toEqual(new Cartesian3(40318, 27037, 59497));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.innerRadii.getValue(documentStopDate)).toEqual(new Cartesian3(57650, 53729, 12241));");
                }
                try (Using<DoubleCesiumWriter> using$70 = new Using<DoubleCesiumWriter>(w.openMinimumClockProperty())) {
                    final DoubleCesiumWriter w2 = using$70.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(13484.0, 2170.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumClock.getValue(documentStartDate)).toEqual(13484.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumClock.getValue(documentStopDate)).toEqual(2170.0);");
                }
                try (Using<DoubleCesiumWriter> using$71 = new Using<DoubleCesiumWriter>(w.openMaximumClockProperty())) {
                    final DoubleCesiumWriter w2 = using$71.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(10874.0, 2968.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumClock.getValue(documentStartDate)).toEqual(10874.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumClock.getValue(documentStopDate)).toEqual(2968.0);");
                }
                try (Using<DoubleCesiumWriter> using$72 = new Using<DoubleCesiumWriter>(w.openMinimumConeProperty())) {
                    final DoubleCesiumWriter w2 = using$72.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(54230.0, 59454.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumCone.getValue(documentStartDate)).toEqual(54230.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.minimumCone.getValue(documentStopDate)).toEqual(59454.0);");
                }
                try (Using<DoubleCesiumWriter> using$73 = new Using<DoubleCesiumWriter>(w.openMaximumConeProperty())) {
                    final DoubleCesiumWriter w2 = using$73.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(49077.0, 26303.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumCone.getValue(documentStartDate)).toEqual(49077.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.maximumCone.getValue(documentStopDate)).toEqual(26303.0);");
                }
                try (Using<MaterialCesiumWriter> using$74 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$74.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$75 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$75.resource;
                        try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$76.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(84, 137, 128, 194), ColorHelper.fromArgb(247, 50, 122, 190)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(137, 128, 194, 84));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(50, 122, 190, 247));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$77 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$77.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(171, 247, 210, 180), ColorHelper.fromArgb(247, 239, 35, 237)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(247, 210, 180, 171));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(239, 35, 237, 247));");
                }
                try (Using<DoubleCesiumWriter> using$78 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$78.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(10713.0, 10444.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(documentStartDate)).toEqual(10713.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.outlineWidth.getValue(documentStopDate)).toEqual(10444.0);");
                }
                try (Using<IntegerCesiumWriter> using$79 = new Using<IntegerCesiumWriter>(w.openStackPartitionsProperty())) {
                    final IntegerCesiumWriter w2 = using$79.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(5841, 39170));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(documentStartDate)).toEqual(5841);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.stackPartitions.getValue(documentStopDate)).toEqual(39170);");
                }
                try (Using<IntegerCesiumWriter> using$80 = new Using<IntegerCesiumWriter>(w.openSlicePartitionsProperty())) {
                    final IntegerCesiumWriter w2 = using$80.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(50327, 4672));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(documentStartDate)).toEqual(50327);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.slicePartitions.getValue(documentStopDate)).toEqual(4672);");
                }
                try (Using<IntegerCesiumWriter> using$81 = new Using<IntegerCesiumWriter>(w.openSubdivisionsProperty())) {
                    final IntegerCesiumWriter w2 = using$81.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(10225, 53957));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(documentStartDate)).toEqual(10225);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.subdivisions.getValue(documentStopDate)).toEqual(53957);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$82 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$82.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(11751.0, 59227.0), new Bounds(4769.0, 41441.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(11751, 59227));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(4769, 41441));");
                }
            }
            try (Using<LabelCesiumWriter> using$83 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$83.resource;
                try (Using<DoubleCesiumWriter> using$84 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$84.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(40153.0, 42123.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(documentStartDate)).toEqual(40153.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scale.getValue(documentStopDate)).toEqual(42123.0);");
                }
                try (Using<ColorCesiumWriter> using$85 = new Using<ColorCesiumWriter>(w.openBackgroundColorProperty())) {
                    final ColorCesiumWriter w2 = using$85.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(169, 30, 92, 161), ColorHelper.fromArgb(62, 85, 52, 166)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundColor.getValue(documentStartDate)).toEqual(Color.fromBytes(30, 92, 161, 169));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundColor.getValue(documentStopDate)).toEqual(Color.fromBytes(85, 52, 166, 62));");
                }
                try (Using<BackgroundPaddingCesiumWriter> using$86 = new Using<BackgroundPaddingCesiumWriter>(w.openBackgroundPaddingProperty())) {
                    final BackgroundPaddingCesiumWriter w2 = using$86.resource;
                    w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(32945.0, 5504.0), new Rectangular(35323.0, 6281.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundPadding.getValue(documentStartDate)).toEqual(new Cartesian2(32945, 5504));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.backgroundPadding.getValue(documentStopDate)).toEqual(new Cartesian2(35323, 6281));");
                }
                try (Using<PixelOffsetCesiumWriter> using$87 = new Using<PixelOffsetCesiumWriter>(w.openPixelOffsetProperty())) {
                    final PixelOffsetCesiumWriter w2 = using$87.resource;
                    w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(8539.0, 9761.0), new Rectangular(10537.0, 54569.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(documentStartDate)).toEqual(new Cartesian2(8539, 9761));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffset.getValue(documentStopDate)).toEqual(new Cartesian2(10537, 54569));");
                }
                try (Using<EyeOffsetCesiumWriter> using$88 = new Using<EyeOffsetCesiumWriter>(w.openEyeOffsetProperty())) {
                    final EyeOffsetCesiumWriter w2 = using$88.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(5984.0, 34327.0, 59014.0), new Cartesian(1931.0, 5127.0, 18964.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(documentStartDate)).toEqual(new Cartesian3(5984, 34327, 59014));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.eyeOffset.getValue(documentStopDate)).toEqual(new Cartesian3(1931, 5127, 18964));");
                }
                try (Using<ColorCesiumWriter> using$89 = new Using<ColorCesiumWriter>(w.openFillColorProperty())) {
                    final ColorCesiumWriter w2 = using$89.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(58, 17, 212, 62), ColorHelper.fromArgb(116, 214, 69, 90)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(documentStartDate)).toEqual(Color.fromBytes(17, 212, 62, 58));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.fillColor.getValue(documentStopDate)).toEqual(Color.fromBytes(214, 69, 90, 116));");
                }
                try (Using<ColorCesiumWriter> using$90 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$90.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(70, 205, 14, 169), ColorHelper.fromArgb(17, 143, 73, 168)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(205, 14, 169, 70));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(143, 73, 168, 17));");
                }
                try (Using<DoubleCesiumWriter> using$91 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$91.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(53305.0, 43838.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(documentStartDate)).toEqual(53305.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.outlineWidth.getValue(documentStopDate)).toEqual(43838.0);");
                }
                try (Using<NearFarScalarCesiumWriter> using$92 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$92.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(25055.0, 32865.0, 32128.0, 29309.0), new NearFarScalar(58875.0, 9189.0, 20515.0, 15696.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(25055, 32865, 32128, 29309));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(58875, 9189, 20515, 15696));");
                }
                try (Using<NearFarScalarCesiumWriter> using$93 = new Using<NearFarScalarCesiumWriter>(w.openPixelOffsetScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$93.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(45296.0, 62896.0, 38133.0, 40084.0), new NearFarScalar(28657.0, 25711.0, 9316.0, 62756.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(45296, 62896, 38133, 40084));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.pixelOffsetScaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(28657, 25711, 9316, 62756));");
                }
                try (Using<NearFarScalarCesiumWriter> using$94 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$94.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(22356.0, 26711.0, 58216.0, 52963.0), new NearFarScalar(26464.0, 26471.0, 23143.0, 37466.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(22356, 26711, 58216, 52963));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(26464, 26471, 23143, 37466));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$95 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$95.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(2314.0, 2614.0), new Bounds(23998.0, 48733.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(2314, 2614));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(23998, 48733));");
                }
                try (Using<DoubleCesiumWriter> using$96 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$96.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(250.0, 40425.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.disableDepthTestDistance.getValue(documentStartDate)).toEqual(250.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.label.disableDepthTestDistance.getValue(documentStopDate)).toEqual(40425.0);");
                }
            }
            try (Using<ModelCesiumWriter> using$97 = new Using<ModelCesiumWriter>(packet.openModelProperty())) {
                final ModelCesiumWriter w = using$97.resource;
                try (Using<DoubleCesiumWriter> using$98 = new Using<DoubleCesiumWriter>(w.openScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$98.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(63647.0, 53878.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(documentStartDate)).toEqual(63647.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.scale.getValue(documentStopDate)).toEqual(53878.0);");
                }
                try (Using<DoubleCesiumWriter> using$99 = new Using<DoubleCesiumWriter>(w.openMinimumPixelSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$99.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(16357.0, 40522.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(documentStartDate)).toEqual(16357.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.minimumPixelSize.getValue(documentStopDate)).toEqual(40522.0);");
                }
                try (Using<DoubleCesiumWriter> using$100 = new Using<DoubleCesiumWriter>(w.openMaximumScaleProperty())) {
                    final DoubleCesiumWriter w2 = using$100.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(8290.0, 25558.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(documentStartDate)).toEqual(8290.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.maximumScale.getValue(documentStopDate)).toEqual(25558.0);");
                }
                try (Using<ColorCesiumWriter> using$101 = new Using<ColorCesiumWriter>(w.openSilhouetteColorProperty())) {
                    final ColorCesiumWriter w2 = using$101.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(81, 33, 239, 70), ColorHelper.fromArgb(123, 60, 48, 26)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteColor.getValue(documentStartDate)).toEqual(Color.fromBytes(33, 239, 70, 81));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteColor.getValue(documentStopDate)).toEqual(Color.fromBytes(60, 48, 26, 123));");
                }
                try (Using<DoubleCesiumWriter> using$102 = new Using<DoubleCesiumWriter>(w.openSilhouetteSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$102.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(65103.0, 29065.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteSize.getValue(documentStartDate)).toEqual(65103.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.silhouetteSize.getValue(documentStopDate)).toEqual(29065.0);");
                }
                try (Using<ColorCesiumWriter> using$103 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$103.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(116, 74, 69, 164), ColorHelper.fromArgb(170, 127, 30, 46)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.color.getValue(documentStartDate)).toEqual(Color.fromBytes(74, 69, 164, 116));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.color.getValue(documentStopDate)).toEqual(Color.fromBytes(127, 30, 46, 170));");
                }
                try (Using<DoubleCesiumWriter> using$104 = new Using<DoubleCesiumWriter>(w.openColorBlendAmountProperty())) {
                    final DoubleCesiumWriter w2 = using$104.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(64130.0, 21967.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.colorBlendAmount.getValue(documentStartDate)).toEqual(64130.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.colorBlendAmount.getValue(documentStopDate)).toEqual(21967.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$105 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$105.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(33246.0, 36993.0), new Bounds(5814.0, 10006.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(33246, 36993));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.model.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(5814, 10006));");
                }
            }
            try (Using<PathCesiumWriter> using$106 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$106.resource;
                try (Using<DoubleCesiumWriter> using$107 = new Using<DoubleCesiumWriter>(w.openLeadTimeProperty())) {
                    final DoubleCesiumWriter w2 = using$107.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(40222.0, 33294.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(documentStartDate)).toEqual(40222.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.leadTime.getValue(documentStopDate)).toEqual(33294.0);");
                }
                try (Using<DoubleCesiumWriter> using$108 = new Using<DoubleCesiumWriter>(w.openTrailTimeProperty())) {
                    final DoubleCesiumWriter w2 = using$108.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(34052.0, 57713.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(documentStartDate)).toEqual(34052.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.trailTime.getValue(documentStopDate)).toEqual(57713.0);");
                }
                try (Using<DoubleCesiumWriter> using$109 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$109.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(32449.0, 33819.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(documentStartDate)).toEqual(32449.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.width.getValue(documentStopDate)).toEqual(33819.0);");
                }
                try (Using<DoubleCesiumWriter> using$110 = new Using<DoubleCesiumWriter>(w.openResolutionProperty())) {
                    final DoubleCesiumWriter w2 = using$110.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(8399.0, 19400.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(documentStartDate)).toEqual(8399.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.resolution.getValue(documentStopDate)).toEqual(19400.0);");
                }
                try (Using<PolylineMaterialCesiumWriter> using$111 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$111.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$112 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$112.resource;
                        try (Using<ColorCesiumWriter> using$113 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$113.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(105, 97, 239, 22), ColorHelper.fromArgb(125, 242, 157, 215)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(97, 239, 22, 105));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(242, 157, 215, 125));");
                        }
                    }
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$114 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$114.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(42994.0, 62047.0), new Bounds(52406.0, 59340.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(42994, 62047));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(52406, 59340));");
                }
            }
            try (Using<PointCesiumWriter> using$115 = new Using<PointCesiumWriter>(packet.openPointProperty())) {
                final PointCesiumWriter w = using$115.resource;
                try (Using<DoubleCesiumWriter> using$116 = new Using<DoubleCesiumWriter>(w.openPixelSizeProperty())) {
                    final DoubleCesiumWriter w2 = using$116.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(39714.0, 3313.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(documentStartDate)).toEqual(39714.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.pixelSize.getValue(documentStopDate)).toEqual(3313.0);");
                }
                try (Using<ColorCesiumWriter> using$117 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$117.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(95, 137, 151, 128), ColorHelper.fromArgb(108, 99, 157, 124)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(documentStartDate)).toEqual(Color.fromBytes(137, 151, 128, 95));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.color.getValue(documentStopDate)).toEqual(Color.fromBytes(99, 157, 124, 108));");
                }
                try (Using<ColorCesiumWriter> using$118 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$118.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(195, 225, 246, 102), ColorHelper.fromArgb(222, 248, 38, 75)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 246, 102, 195));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(248, 38, 75, 222));");
                }
                try (Using<DoubleCesiumWriter> using$119 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$119.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(48323.0, 50914.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(documentStartDate)).toEqual(48323.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.outlineWidth.getValue(documentStopDate)).toEqual(50914.0);");
                }
                try (Using<NearFarScalarCesiumWriter> using$120 = new Using<NearFarScalarCesiumWriter>(w.openScaleByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$120.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(39727.0, 50843.0, 56262.0, 15579.0), new NearFarScalar(60522.0, 63980.0, 30201.0, 25205.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(39727, 50843, 56262, 15579));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.scaleByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(60522, 63980, 30201, 25205));");
                }
                try (Using<NearFarScalarCesiumWriter> using$121 = new Using<NearFarScalarCesiumWriter>(w.openTranslucencyByDistanceProperty())) {
                    final NearFarScalarCesiumWriter w2 = using$121.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(61190.0, 16879.0, 16449.0, 10048.0), new NearFarScalar(46491.0, 47541.0, 35769.0, 13707.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(documentStartDate)).toEqual(new NearFarScalar(61190, 16879, 16449, 10048));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.translucencyByDistance.getValue(documentStopDate)).toEqual(new NearFarScalar(46491, 47541, 35769, 13707));");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$122 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$122.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(7642.0, 55841.0), new Bounds(24270.0, 29534.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(7642, 55841));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(24270, 29534));");
                }
                try (Using<DoubleCesiumWriter> using$123 = new Using<DoubleCesiumWriter>(w.openDisableDepthTestDistanceProperty())) {
                    final DoubleCesiumWriter w2 = using$123.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(30881.0, 6667.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.disableDepthTestDistance.getValue(documentStartDate)).toEqual(30881.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.point.disableDepthTestDistance.getValue(documentStopDate)).toEqual(6667.0);");
                }
            }
            try (Using<PolygonCesiumWriter> using$124 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$124.resource;
                try (Using<DoubleCesiumWriter> using$125 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$125.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(64265.0, 19257.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(documentStartDate)).toEqual(64265.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.height.getValue(documentStopDate)).toEqual(19257.0);");
                }
                try (Using<DoubleCesiumWriter> using$126 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$126.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(12315.0, 4797.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(documentStartDate)).toEqual(12315.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.extrudedHeight.getValue(documentStopDate)).toEqual(4797.0);");
                }
                try (Using<DoubleCesiumWriter> using$127 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$127.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(24959.0, 32341.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(documentStartDate)).toEqual(24959.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.stRotation.getValue(documentStopDate)).toEqual(32341.0);");
                }
                try (Using<DoubleCesiumWriter> using$128 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$128.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(51922.0, 9185.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(documentStartDate)).toEqual(51922.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.granularity.getValue(documentStopDate)).toEqual(9185.0);");
                }
                try (Using<MaterialCesiumWriter> using$129 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$129.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$130 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$130.resource;
                        try (Using<ColorCesiumWriter> using$131 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$131.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(31, 19, 40, 12), ColorHelper.fromArgb(194, 179, 204, 8)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(19, 40, 12, 31));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(179, 204, 8, 194));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$132 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$132.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(26, 187, 223, 120), ColorHelper.fromArgb(81, 20, 135, 105)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(187, 223, 120, 26));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 135, 105, 81));");
                }
                try (Using<DoubleCesiumWriter> using$133 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$133.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(48428.0, 41508.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(documentStartDate)).toEqual(48428.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.outlineWidth.getValue(documentStopDate)).toEqual(41508.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$134 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$134.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(22140.0, 31962.0), new Bounds(3927.0, 22422.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(22140, 31962));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(3927, 22422));");
                }
                try (Using<IntegerCesiumWriter> using$135 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$135.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(37357, 64769));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.zIndex.getValue(documentStartDate)).toEqual(37357);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.zIndex.getValue(documentStopDate)).toEqual(64769);");
                }
            }
            try (Using<PolylineCesiumWriter> using$136 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$136.resource;
                try (Using<DoubleCesiumWriter> using$137 = new Using<DoubleCesiumWriter>(w.openWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$137.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(60367.0, 31077.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(documentStartDate)).toEqual(60367.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.width.getValue(documentStopDate)).toEqual(31077.0);");
                }
                try (Using<DoubleCesiumWriter> using$138 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$138.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(62537.0, 14676.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(documentStartDate)).toEqual(62537.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.granularity.getValue(documentStopDate)).toEqual(14676.0);");
                }
                try (Using<PolylineMaterialCesiumWriter> using$139 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$139.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$140 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$140.resource;
                        try (Using<ColorCesiumWriter> using$141 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$141.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(220, 90, 30, 195), ColorHelper.fromArgb(74, 39, 17, 221)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(90, 30, 195, 220));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(39, 17, 221, 74));");
                        }
                    }
                }
                try (Using<PolylineMaterialCesiumWriter> using$142 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$142.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$143 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$143.resource;
                        try (Using<ColorCesiumWriter> using$144 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$144.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(152, 217, 122, 10), ColorHelper.fromArgb(67, 76, 105, 5)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(217, 122, 10, 152));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(76, 105, 5, 67));");
                        }
                    }
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$145 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$145.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(4857.0, 10258.0), new Bounds(36588.0, 47246.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(4857, 10258));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(36588, 47246));");
                }
                try (Using<IntegerCesiumWriter> using$146 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$146.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(55130, 15491));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.zIndex.getValue(documentStartDate)).toEqual(55130);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.zIndex.getValue(documentStopDate)).toEqual(15491);");
                }
            }
            try (Using<PolylineVolumeCesiumWriter> using$147 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$147.resource;
                try (Using<DoubleCesiumWriter> using$148 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$148.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(9144.0, 5282.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.granularity.getValue(documentStartDate)).toEqual(9144.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.granularity.getValue(documentStopDate)).toEqual(5282.0);");
                }
                try (Using<MaterialCesiumWriter> using$149 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$149.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$150 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$150.resource;
                        try (Using<ColorCesiumWriter> using$151 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$151.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(193, 3, 0, 198), ColorHelper.fromArgb(16, 210, 44, 29)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(3, 0, 198, 193));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(210, 44, 29, 16));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$152 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$152.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(115, 248, 163, 212), ColorHelper.fromArgb(98, 22, 27, 199)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(248, 163, 212, 115));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(22, 27, 199, 98));");
                }
                try (Using<DoubleCesiumWriter> using$153 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$153.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(17507.0, 55396.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineWidth.getValue(documentStartDate)).toEqual(17507.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.outlineWidth.getValue(documentStopDate)).toEqual(55396.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$154 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$154.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(20986.0, 34897.0), new Bounds(14877.0, 46650.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(20986, 34897));");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(14877, 46650));");
                }
            }
            try (Using<RectangleCesiumWriter> using$155 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$155.resource;
                try (Using<RectangleCoordinatesCesiumWriter> using$156 = new Using<RectangleCoordinatesCesiumWriter>(w.openCoordinatesProperty())) {
                    final RectangleCoordinatesCesiumWriter w2 = using$156.resource;
                    w2.writeWsen(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<CartographicExtent> createList(new CartographicExtent(0.392205830501108, 1.04907471338688, 0.00211010473645246, 0.064281089310235),
                                    new CartographicExtent(0.523469985903937, 0.229690388867811, 0.399550037703662, 0.48478405941078)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(new Rectangle(0.392205830501108, 1.04907471338688, 0.00211010473645246, 0.064281089310235));");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(new Rectangle(0.523469985903937, 0.229690388867811, 0.399550037703662, 0.48478405941078));");
                }
                try (Using<DoubleCesiumWriter> using$157 = new Using<DoubleCesiumWriter>(w.openHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$157.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(56388.0, 59991.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(documentStartDate)).toEqual(56388.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.height.getValue(documentStopDate)).toEqual(59991.0);");
                }
                try (Using<DoubleCesiumWriter> using$158 = new Using<DoubleCesiumWriter>(w.openExtrudedHeightProperty())) {
                    final DoubleCesiumWriter w2 = using$158.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(39796.0, 33335.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(documentStartDate)).toEqual(39796.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.extrudedHeight.getValue(documentStopDate)).toEqual(33335.0);");
                }
                try (Using<DoubleCesiumWriter> using$159 = new Using<DoubleCesiumWriter>(w.openRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$159.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(26921.0, 46937.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(documentStartDate)).toEqual(26921.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.rotation.getValue(documentStopDate)).toEqual(46937.0);");
                }
                try (Using<DoubleCesiumWriter> using$160 = new Using<DoubleCesiumWriter>(w.openStRotationProperty())) {
                    final DoubleCesiumWriter w2 = using$160.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(65255.0, 12220.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(documentStartDate)).toEqual(65255.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.stRotation.getValue(documentStopDate)).toEqual(12220.0);");
                }
                try (Using<DoubleCesiumWriter> using$161 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$161.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(6948.0, 2204.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(documentStartDate)).toEqual(6948.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.granularity.getValue(documentStopDate)).toEqual(2204.0);");
                }
                try (Using<MaterialCesiumWriter> using$162 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$162.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$163 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$163.resource;
                        try (Using<ColorCesiumWriter> using$164 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$164.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(152, 106, 81, 64), ColorHelper.fromArgb(154, 94, 108, 96)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(106, 81, 64, 152));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(94, 108, 96, 154));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$165 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$165.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(131, 6, 244, 49), ColorHelper.fromArgb(55, 87, 190, 148)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(6, 244, 49, 131));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(87, 190, 148, 55));");
                }
                try (Using<DoubleCesiumWriter> using$166 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$166.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(41576.0, 33933.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(documentStartDate)).toEqual(41576.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.outlineWidth.getValue(documentStopDate)).toEqual(33933.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$167 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$167.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(24813.0, 30560.0), new Bounds(34617.0, 40071.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(24813, 30560));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(34617, 40071));");
                }
                try (Using<IntegerCesiumWriter> using$168 = new Using<IntegerCesiumWriter>(w.openZIndexProperty())) {
                    final IntegerCesiumWriter w2 = using$168.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(27256, 53581));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.zIndex.getValue(documentStartDate)).toEqual(27256);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.zIndex.getValue(documentStopDate)).toEqual(53581);");
                }
            }
            try (Using<TilesetCesiumWriter> using$169 = new Using<TilesetCesiumWriter>(packet.openTilesetProperty())) {
                final TilesetCesiumWriter w = using$169.resource;
                try (Using<DoubleCesiumWriter> using$170 = new Using<DoubleCesiumWriter>(w.openMaximumScreenSpaceErrorProperty())) {
                    final DoubleCesiumWriter w2 = using$170.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(17401.0, 7930.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.maximumScreenSpaceError.getValue(documentStartDate)).toEqual(17401.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.tileset.maximumScreenSpaceError.getValue(documentStopDate)).toEqual(7930.0);");
                }
            }
            try (Using<WallCesiumWriter> using$171 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$171.resource;
                try (Using<DoubleCesiumWriter> using$172 = new Using<DoubleCesiumWriter>(w.openGranularityProperty())) {
                    final DoubleCesiumWriter w2 = using$172.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(64428.0, 25333.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(documentStartDate)).toEqual(64428.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.granularity.getValue(documentStopDate)).toEqual(25333.0);");
                }
                try (Using<MaterialCesiumWriter> using$173 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$173.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$174 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$174.resource;
                        try (Using<ColorCesiumWriter> using$175 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$175.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(46, 31, 188, 250), ColorHelper.fromArgb(227, 78, 91, 199)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(31, 188, 250, 46));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(78, 91, 199, 227));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$176 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$176.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(205, 241, 39, 105), ColorHelper.fromArgb(44, 184, 17, 208)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(241, 39, 105, 205));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 17, 208, 44));");
                }
                try (Using<DoubleCesiumWriter> using$177 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$177.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(62000.0, 40549.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(documentStartDate)).toEqual(62000.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.outlineWidth.getValue(documentStopDate)).toEqual(40549.0);");
                }
                try (Using<DistanceDisplayConditionCesiumWriter> using$178 = new Using<DistanceDisplayConditionCesiumWriter>(w.openDistanceDisplayConditionProperty())) {
                    final DistanceDisplayConditionCesiumWriter w2 = using$178.resource;
                    w2.writeDistanceDisplayCondition(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Bounds> createList(new Bounds(12470.0, 36912.0), new Bounds(35574.0, 63040.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.distanceDisplayCondition.getValue(documentStartDate)).toEqual(new DistanceDisplayCondition(12470, 36912));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.distanceDisplayCondition.getValue(documentStopDate)).toEqual(new DistanceDisplayCondition(35574, 63040));");
                }
            }
            try (Using<ConicSensorCesiumWriter> using$179 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$179.resource;
                try (Using<DoubleCesiumWriter> using$180 = new Using<DoubleCesiumWriter>(w.openInnerHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$180.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(16886.0, 9960.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(documentStartDate)).toEqual(16886.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.innerHalfAngle.getValue(documentStopDate)).toEqual(9960.0);");
                }
                try (Using<DoubleCesiumWriter> using$181 = new Using<DoubleCesiumWriter>(w.openOuterHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$181.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(19166.0, 1511.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(documentStartDate)).toEqual(19166.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.outerHalfAngle.getValue(documentStopDate)).toEqual(1511.0);");
                }
                try (Using<DoubleCesiumWriter> using$182 = new Using<DoubleCesiumWriter>(w.openMinimumClockAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$182.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(47420.0, 40115.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(documentStartDate)).toEqual(47420.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.minimumClockAngle.getValue(documentStopDate)).toEqual(40115.0);");
                }
                try (Using<DoubleCesiumWriter> using$183 = new Using<DoubleCesiumWriter>(w.openMaximumClockAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$183.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(42591.0, 2115.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(documentStartDate)).toEqual(42591.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.maximumClockAngle.getValue(documentStopDate)).toEqual(2115.0);");
                }
                try (Using<DoubleCesiumWriter> using$184 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$184.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(37448.0, 5744.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(documentStartDate)).toEqual(37448.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.radius.getValue(documentStopDate)).toEqual(5744.0);");
                }
                try (Using<ColorCesiumWriter> using$185 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$185.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(86, 32, 200, 181), ColorHelper.fromArgb(176, 212, 15, 7)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(32, 200, 181, 86));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(212, 15, 7, 176));");
                }
                try (Using<DoubleCesiumWriter> using$186 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$186.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(15969.0, 33925.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(documentStartDate)).toEqual(15969.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.intersectionWidth.getValue(documentStopDate)).toEqual(33925.0);");
                }
                try (Using<MaterialCesiumWriter> using$187 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$187.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$188 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$188.resource;
                        try (Using<ColorCesiumWriter> using$189 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$189.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(201, 206, 145, 134), ColorHelper.fromArgb(18, 38, 167, 50)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 145, 134, 201));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(38, 167, 50, 18));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$190 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$190.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$191 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$191.resource;
                        try (Using<ColorCesiumWriter> using$192 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$192.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(75, 198, 112, 61), ColorHelper.fromArgb(229, 102, 141, 218)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(198, 112, 61, 75));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(102, 141, 218, 229));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$193 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$193.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$194 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$194.resource;
                        try (Using<ColorCesiumWriter> using$195 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$195.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(20, 18, 35, 91), ColorHelper.fromArgb(214, 162, 212, 131)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(18, 35, 91, 20));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(162, 212, 131, 214));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$196 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$196.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$197 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$197.resource;
                        try (Using<ColorCesiumWriter> using$198 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$198.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(19, 254, 199, 146), ColorHelper.fromArgb(225, 221, 70, 233)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(254, 199, 146, 19));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(221, 70, 233, 225));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$199 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$199.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$200 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$200.resource;
                        try (Using<ColorCesiumWriter> using$201 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$201.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(192, 251, 80, 120), ColorHelper.fromArgb(185, 138, 101, 244)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(251, 80, 120, 192));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(138, 101, 244, 185));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$202 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$202.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(65, 117, 84, 113), ColorHelper.fromArgb(132, 24, 241, 104)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(117, 84, 113, 65));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(24, 241, 104, 132));");
                }
                try (Using<DoubleCesiumWriter> using$203 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$203.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(54383.0, 48814.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(54383.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(48814.0);");
                }
                try (Using<ColorCesiumWriter> using$204 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$204.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(208, 219, 102, 126), ColorHelper.fromArgb(3, 165, 12, 88)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedVisibleColor.getValue(documentStartDate)).toEqual(Color.fromBytes(219, 102, 126, 208));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedVisibleColor.getValue(documentStopDate)).toEqual(Color.fromBytes(165, 12, 88, 3));");
                }
                try (Using<ColorCesiumWriter> using$205 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$205.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(105, 47, 229, 96), ColorHelper.fromArgb(64, 65, 153, 9)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedOccludedColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 229, 96, 105));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedOccludedColor.getValue(documentStopDate)).toEqual(Color.fromBytes(65, 153, 9, 64));");
                }
                try (Using<IntegerCesiumWriter> using$206 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$206.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(38357, 30316));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedResolution.getValue(documentStartDate)).toEqual(38357);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.viewshedResolution.getValue(documentStopDate)).toEqual(30316);");
                }
            }
            try (Using<CustomPatternSensorCesiumWriter> using$207 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$207.resource;
                try (Using<DoubleCesiumWriter> using$208 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$208.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(51649.0, 47224.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(documentStartDate)).toEqual(51649.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.radius.getValue(documentStopDate)).toEqual(47224.0);");
                }
                try (Using<ColorCesiumWriter> using$209 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$209.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(180, 234, 156, 105), ColorHelper.fromArgb(62, 181, 97, 242)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(234, 156, 105, 180));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(181, 97, 242, 62));");
                }
                try (Using<DoubleCesiumWriter> using$210 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$210.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(54947.0, 32744.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(documentStartDate)).toEqual(54947.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.intersectionWidth.getValue(documentStopDate)).toEqual(32744.0);");
                }
                try (Using<MaterialCesiumWriter> using$211 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$211.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$212 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$212.resource;
                        try (Using<ColorCesiumWriter> using$213 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$213.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(9, 23, 46, 232), ColorHelper.fromArgb(121, 119, 104, 98)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(23, 46, 232, 9));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(119, 104, 98, 121));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$214 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$214.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$215 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$215.resource;
                        try (Using<ColorCesiumWriter> using$216 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$216.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(85, 3, 198, 203), ColorHelper.fromArgb(28, 16, 212, 3)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(3, 198, 203, 85));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(16, 212, 3, 28));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$217 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$217.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$218 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$218.resource;
                        try (Using<ColorCesiumWriter> using$219 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$219.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(216, 152, 99, 18), ColorHelper.fromArgb(251, 89, 151, 205)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(152, 99, 18, 216));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(89, 151, 205, 251));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$220 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$220.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$221 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$221.resource;
                        try (Using<ColorCesiumWriter> using$222 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$222.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(228, 231, 234, 144), ColorHelper.fromArgb(169, 185, 26, 16)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(231, 234, 144, 228));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(185, 26, 16, 169));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$223 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$223.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$224 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$224.resource;
                        try (Using<ColorCesiumWriter> using$225 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$225.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(37, 214, 222, 56), ColorHelper.fromArgb(73, 132, 87, 218)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(214, 222, 56, 37));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(132, 87, 218, 73));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$226 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$226.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(67, 182, 99, 116), ColorHelper.fromArgb(220, 101, 186, 29)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(182, 99, 116, 67));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(101, 186, 29, 220));");
                }
                try (Using<DoubleCesiumWriter> using$227 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$227.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(15461.0, 8000.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(15461.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(8000.0);");
                }
                try (Using<ColorCesiumWriter> using$228 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$228.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(117, 221, 155, 36), ColorHelper.fromArgb(129, 249, 126, 78)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedVisibleColor.getValue(documentStartDate)).toEqual(Color.fromBytes(221, 155, 36, 117));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedVisibleColor.getValue(documentStopDate)).toEqual(Color.fromBytes(249, 126, 78, 129));");
                }
                try (Using<ColorCesiumWriter> using$229 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$229.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(134, 228, 27, 237), ColorHelper.fromArgb(84, 254, 162, 80)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedOccludedColor.getValue(documentStartDate)).toEqual(Color.fromBytes(228, 27, 237, 134));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedOccludedColor.getValue(documentStopDate)).toEqual(Color.fromBytes(254, 162, 80, 84));");
                }
                try (Using<IntegerCesiumWriter> using$230 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$230.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(44590, 31959));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.viewshedResolution.getValue(documentStartDate)).toEqual(44590);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.viewshedResolution.getValue(documentStopDate)).toEqual(31959);");
                }
            }
            try (Using<RectangularSensorCesiumWriter> using$231 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$231.resource;
                try (Using<DoubleCesiumWriter> using$232 = new Using<DoubleCesiumWriter>(w.openXHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$232.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(58366.0, 22538.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(documentStartDate)).toEqual(58366.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.xHalfAngle.getValue(documentStopDate)).toEqual(22538.0);");
                }
                try (Using<DoubleCesiumWriter> using$233 = new Using<DoubleCesiumWriter>(w.openYHalfAngleProperty())) {
                    final DoubleCesiumWriter w2 = using$233.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(50294.0, 14328.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(documentStartDate)).toEqual(50294.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.yHalfAngle.getValue(documentStopDate)).toEqual(14328.0);");
                }
                try (Using<DoubleCesiumWriter> using$234 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$234.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(35659.0, 22080.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(documentStartDate)).toEqual(35659.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.radius.getValue(documentStopDate)).toEqual(22080.0);");
                }
                try (Using<ColorCesiumWriter> using$235 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$235.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(208, 115, 140, 110), ColorHelper.fromArgb(68, 107, 143, 73)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(115, 140, 110, 208));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(107, 143, 73, 68));");
                }
                try (Using<DoubleCesiumWriter> using$236 = new Using<DoubleCesiumWriter>(w.openIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$236.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(28687.0, 9820.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(documentStartDate)).toEqual(28687.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.intersectionWidth.getValue(documentStopDate)).toEqual(9820.0);");
                }
                try (Using<MaterialCesiumWriter> using$237 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$237.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$238 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$238.resource;
                        try (Using<ColorCesiumWriter> using$239 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$239.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(229, 78, 198, 201), ColorHelper.fromArgb(91, 66, 187, 189)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(78, 198, 201, 229));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(66, 187, 189, 91));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$240 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$240.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$241 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$241.resource;
                        try (Using<ColorCesiumWriter> using$242 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$242.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(40, 110, 214, 130), ColorHelper.fromArgb(170, 57, 28, 75)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(110, 214, 130, 40));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(57, 28, 75, 170));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$243 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$243.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$244 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$244.resource;
                        try (Using<ColorCesiumWriter> using$245 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$245.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(191, 250, 52, 250), ColorHelper.fromArgb(69, 26, 38, 17)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(250, 52, 250, 191));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(26, 38, 17, 69));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$246 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$246.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$247 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$247.resource;
                        try (Using<ColorCesiumWriter> using$248 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$248.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(121, 90, 167, 164), ColorHelper.fromArgb(18, 179, 244, 230)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(90, 167, 164, 121));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(179, 244, 230, 18));");
                        }
                    }
                }
                try (Using<MaterialCesiumWriter> using$249 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$249.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$250 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$250.resource;
                        try (Using<ColorCesiumWriter> using$251 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$251.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(20, 38, 90, 83), ColorHelper.fromArgb(55, 53, 203, 240)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(38, 90, 83, 20));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 203, 240, 55));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$252 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$252.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(199, 247, 228, 88), ColorHelper.fromArgb(250, 34, 163, 220)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqual(Color.fromBytes(247, 228, 88, 199));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqual(Color.fromBytes(34, 163, 220, 250));");
                }
                try (Using<DoubleCesiumWriter> using$253 = new Using<DoubleCesiumWriter>(w.openEnvironmentIntersectionWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$253.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(637.0, 10677.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStartDate)).toEqual(637.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.environmentIntersectionWidth.getValue(documentStopDate)).toEqual(10677.0);");
                }
                try (Using<ColorCesiumWriter> using$254 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$254.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(92, 220, 157, 178), ColorHelper.fromArgb(26, 213, 65, 75)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedVisibleColor.getValue(documentStartDate)).toEqual(Color.fromBytes(220, 157, 178, 92));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedVisibleColor.getValue(documentStopDate)).toEqual(Color.fromBytes(213, 65, 75, 26));");
                }
                try (Using<ColorCesiumWriter> using$255 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$255.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(10, 202, 44, 192), ColorHelper.fromArgb(207, 107, 226, 246)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedOccludedColor.getValue(documentStartDate)).toEqual(Color.fromBytes(202, 44, 192, 10));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedOccludedColor.getValue(documentStopDate)).toEqual(Color.fromBytes(107, 226, 246, 207));");
                }
                try (Using<IntegerCesiumWriter> using$256 = new Using<IntegerCesiumWriter>(w.openViewshedResolutionProperty())) {
                    final IntegerCesiumWriter w2 = using$256.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(24619, 54818));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.viewshedResolution.getValue(documentStartDate)).toEqual(24619);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.viewshedResolution.getValue(documentStopDate)).toEqual(54818);");
                }
            }
            try (Using<FanCesiumWriter> using$257 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$257.resource;
                try (Using<DoubleCesiumWriter> using$258 = new Using<DoubleCesiumWriter>(w.openRadiusProperty())) {
                    final DoubleCesiumWriter w2 = using$258.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(48400.0, 13510.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(documentStartDate)).toEqual(48400.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.radius.getValue(documentStopDate)).toEqual(13510.0);");
                }
                try (Using<MaterialCesiumWriter> using$259 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$259.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$260 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$260.resource;
                        try (Using<ColorCesiumWriter> using$261 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$261.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(136, 169, 16, 250), ColorHelper.fromArgb(139, 211, 131, 53)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(169, 16, 250, 136));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(211, 131, 53, 139));");
                        }
                    }
                }
                try (Using<ColorCesiumWriter> using$262 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$262.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(88, 112, 11, 118), ColorHelper.fromArgb(4, 31, 167, 62)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(112, 11, 118, 88));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(31, 167, 62, 4));");
                }
                try (Using<DoubleCesiumWriter> using$263 = new Using<DoubleCesiumWriter>(w.openOutlineWidthProperty())) {
                    final DoubleCesiumWriter w2 = using$263.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(42860.0, 62479.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(documentStartDate)).toEqual(42860.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.outlineWidth.getValue(documentStopDate)).toEqual(62479.0);");
                }
                try (Using<IntegerCesiumWriter> using$264 = new Using<IntegerCesiumWriter>(w.openNumberOfRingsProperty())) {
                    final IntegerCesiumWriter w2 = using$264.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Integer> createList(30719, 44188));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(documentStartDate)).toEqual(30719);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.numberOfRings.getValue(documentStopDate)).toEqual(44188);");
                }
            }
            try (Using<VectorCesiumWriter> using$265 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$265.resource;
                try (Using<ColorCesiumWriter> using$266 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$266.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(98, 150, 8, 197), ColorHelper.fromArgb(207, 71, 74, 62)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(documentStartDate)).toEqual(Color.fromBytes(150, 8, 197, 98));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.color.getValue(documentStopDate)).toEqual(Color.fromBytes(71, 74, 62, 207));");
                }
                try (Using<DirectionCesiumWriter> using$267 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$267.resource;
                    w2.writeSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Spherical> createList(new Spherical(31576.0, 24187.0, 52062.0), new Spherical(31098.0, 2937.0, 4107.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(31576, 24187, 52062)));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(31098, 2937, 4107)));");
                }
                try (Using<DoubleCesiumWriter> using$268 = new Using<DoubleCesiumWriter>(w.openLengthProperty())) {
                    final DoubleCesiumWriter w2 = using$268.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(37352.0, 28352.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(documentStartDate)).toEqual(37352.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.length.getValue(documentStopDate)).toEqual(28352.0);");
                }
                try (Using<DoubleCesiumWriter> using$269 = new Using<DoubleCesiumWriter>(w.openMinimumLengthInPixelsProperty())) {
                    final DoubleCesiumWriter w2 = using$269.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<Double> createList(194.0, 54242.0));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(documentStartDate)).toEqual(194.0);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.minimumLengthInPixels.getValue(documentStopDate)).toEqual(54242.0);");
                }
            }
        }
        writeSampledValuesIndividual();
        writeSampledValuesCustomProperties();
    }

    private final void writeSampledValuesIndividual() {
        writeSampledValuesIndividualDescription();
        writeSampledValuesIndividualPosition();
        writeSampledValuesIndividualOrientation();
        writeSampledValuesIndividualViewFrom();
        writeSampledValuesIndividualBillboard();
        writeSampledValuesIndividualBox();
        writeSampledValuesIndividualCorridor();
        writeSampledValuesIndividualCylinder();
        writeSampledValuesIndividualEllipse();
        writeSampledValuesIndividualEllipsoid();
        writeSampledValuesIndividualLabel();
        writeSampledValuesIndividualModel();
        writeSampledValuesIndividualPath();
        writeSampledValuesIndividualPoint();
        writeSampledValuesIndividualPolygon();
        writeSampledValuesIndividualPolyline();
        writeSampledValuesIndividualPolylineVolume();
        writeSampledValuesIndividualRectangle();
        writeSampledValuesIndividualTileset();
        writeSampledValuesIndividualWall();
        writeSampledValuesIndividualConicSensor();
        writeSampledValuesIndividualCustomPatternSensor();
        writeSampledValuesIndividualRectangularSensor();
        writeSampledValuesIndividualFan();
        writeSampledValuesIndividualVector();
    }

    private final void writeSampledValuesIndividualDescription() {}

    private final void writeSampledValuesIndividualPosition() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_position_cartographicRadians");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_position_cartographicRadians')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$1 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$1.resource;
                w.writeCartographicRadians(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
                        .<Cartographic> createList(new Cartographic(1.00319530145806, 0.889718921347432, 16911.0), new Cartographic(0.828301545608097, 0.517994728610812, 62937.0)));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromRadians(1.00319530145806, 0.889718921347432, 16911));");
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromRadians(0.828301545608097, 0.517994728610812, 62937));");
            }
        }
        try (Using<PacketCesiumWriter> using$2 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$2.resource;
            packet.writeId("sampled_position_cartographicDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_position_cartographicDegrees')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$3 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$3.resource;
                w.writeCartographicDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                        TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(43.0, 23.0, 63733.0), new Cartographic(28.0, 12.0, 9806.0)));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(Cartesian3.fromDegrees(43, 23, 63733));");
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(Cartesian3.fromDegrees(28, 12, 9806));");
            }
        }
        try (Using<PacketCesiumWriter> using$4 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$4.resource;
            packet.writeId("sampled_position_cartesianVelocity");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_position_cartesianVelocity')).toBeDefined();");
            try (Using<PositionCesiumWriter> using$5 = new Using<PositionCesiumWriter>(packet.openPositionProperty())) {
                final PositionCesiumWriter w = using$5.resource;
                w.writeCartesianVelocity(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                        TestGenerateValidationDocument.<Motion1<Cartesian>> createList(new Motion1<Cartesian>(new Cartesian(40342.0, 23709.0, 14940.0), new Cartesian(12602.0, 34609.0, 44423.0)),
                                new Motion1<Cartesian>(new Cartesian(25648.0, 55396.0, 53208.0), new Cartesian(60367.0, 62699.0, 54004.0))));
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStartDate)).toEqual(new Cartesian3(40342, 23709, 14940));");
                TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.position.getValue(documentStopDate)).toEqual(new Cartesian3(25648, 55396, 53208));");
            }
        }
    }

    private final void writeSampledValuesIndividualOrientation() {}

    private final void writeSampledValuesIndividualViewFrom() {}

    private final void writeSampledValuesIndividualBillboard() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_billboard_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_billboard_color_rgbaf')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$1 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(25, 6, 109, 168), ColorHelper.fromArgb(42, 247, 192, 215)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.427450980392157, 0.658823529411765, 0.0980392156862745), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.752941176470588, 0.843137254901961, 0.164705882352941), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_billboard_alignedAxis_unitSpherical");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_billboard_alignedAxis_unitSpherical')).toBeDefined();");
            try (Using<BillboardCesiumWriter> using$4 = new Using<BillboardCesiumWriter>(packet.openBillboardProperty())) {
                final BillboardCesiumWriter w = using$4.resource;
                try (Using<AlignedAxisCesiumWriter> using$5 = new Using<AlignedAxisCesiumWriter>(w.openAlignedAxisProperty())) {
                    final AlignedAxisCesiumWriter w2 = using$5.resource;
                    w2.writeUnitSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(57328.0, 53471.0), new UnitSpherical(51360.0, 27848.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.alignedAxis.getValue(documentStartDate)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(57328, 53471)), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.billboard.alignedAxis.getValue(documentStopDate)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(51360, 27848)), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualBox() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_box_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_solidColor_color')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$1 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(81, 142, 138, 244), ColorHelper.fromArgb(200, 202, 235, 32)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.556862745098039, 0.541176470588235, 0.956862745098039, 0.317647058823529), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.92156862745098, 0.125490196078431, 0.784313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_box_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_image')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$6 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(21562.0, 11604.0), new Rectangular(56719.0, 11741.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(21562, 11604));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(56719, 11741));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(53, 146, 124, 215), ColorHelper.fromArgb(100, 229, 219, 61)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(146, 124, 215, 53));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(229, 219, 61, 100));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_box_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_grid')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$12 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(118, 111, 151, 56), ColorHelper.fromArgb(86, 178, 77, 41)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(111, 151, 56, 118));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(178, 77, 41, 86));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(10400.0, 10941.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(documentStartDate)).toEqual(10400.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.cellAlpha.getValue(documentStopDate)).toEqual(10941.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(3433.0, 28173.0), new Rectangular(53350.0, 6864.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3433, 28173));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(53350, 6864));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(36990.0, 37264.0), new Rectangular(38412.0, 45974.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(36990, 37264));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(38412, 45974));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(38761.0, 46487.0), new Rectangular(62553.0, 37876.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(38761, 46487));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(62553, 37876));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_box_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_stripe')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$21 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(41, 251, 59, 84), ColorHelper.fromArgb(152, 20, 214, 81)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(251, 59, 84, 41));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 214, 81, 152));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(115, 233, 71, 17), ColorHelper.fromArgb(30, 20, 178, 40)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(233, 71, 17, 115));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 178, 40, 30));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(46979.0, 1457.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(documentStartDate)).toEqual(46979.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.offset.getValue(documentStopDate)).toEqual(1457.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(10283.0, 63419.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(10283.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(63419.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_box_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_checkerboard')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$29 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(218, 2, 215, 87), ColorHelper.fromArgb(227, 164, 235, 142)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(2, 215, 87, 218));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(164, 235, 142, 227));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(243, 117, 88, 89), ColorHelper.fromArgb(49, 104, 182, 78)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(117, 88, 89, 243));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(104, 182, 78, 49));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(6238.0, 42520.0), new Rectangular(34685.0, 17543.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(6238, 42520));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.box.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(34685, 17543));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_box_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_image_color')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$36 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(195, 38, 237, 118), ColorHelper.fromArgb(202, 227, 67, 221)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.149019607843137, 0.929411764705882, 0.462745098039216, 0.764705882352941), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.890196078431372, 0.262745098039216, 0.866666666666667, 0.792156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_box_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_grid_color')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$41 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(100, 128, 114, 184), ColorHelper.fromArgb(172, 227, 129, 143)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.501960784313725, 0.447058823529412, 0.72156862745098, 0.392156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.890196078431372, 0.505882352941176, 0.56078431372549, 0.674509803921569), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_box_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_stripe_evenColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$46 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(136, 250, 88, 237), ColorHelper.fromArgb(119, 252, 95, 182)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.980392156862745, 0.345098039215686, 0.929411764705882, 0.533333333333333), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.988235294117647, 0.372549019607843, 0.713725490196078, 0.466666666666667), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_box_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_stripe_oddColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$51 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(50, 139, 43, 167), ColorHelper.fromArgb(154, 104, 115, 223)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.545098039215686, 0.168627450980392, 0.654901960784314, 0.196078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.407843137254902, 0.450980392156863, 0.874509803921569, 0.603921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_box_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$56 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(224, 35, 239, 131), ColorHelper.fromArgb(53, 184, 17, 70)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.137254901960784, 0.937254901960784, 0.513725490196078, 0.87843137254902), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.0666666666666667, 0.274509803921569, 0.207843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_box_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$61 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(2, 90, 70, 217), ColorHelper.fromArgb(98, 214, 199, 203)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.352941176470588, 0.274509803921569, 0.850980392156863, 0.00784313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.box.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.83921568627451, 0.780392156862745, 0.796078431372549, 0.384313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_box_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_box_outlineColor_rgbaf')).toBeDefined();");
            try (Using<BoxCesiumWriter> using$66 = new Using<BoxCesiumWriter>(packet.openBoxProperty())) {
                final BoxCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(33, 55, 127, 70), ColorHelper.fromArgb(244, 218, 186, 44)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.box.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.215686274509804, 0.498039215686275, 0.274509803921569, 0.129411764705882), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.box.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.854901960784314, 0.729411764705882, 0.172549019607843, 0.956862745098039), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualCorridor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_corridor_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_solidColor_color')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$1 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(176, 219, 252, 187), ColorHelper.fromArgb(34, 140, 94, 246)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.858823529411765, 0.988235294117647, 0.733333333333333, 0.690196078431373), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.549019607843137, 0.368627450980392, 0.964705882352941, 0.133333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_corridor_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_image')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$6 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(14885.0, 62522.0), new Rectangular(45129.0, 25776.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(14885, 62522));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(45129, 25776));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(54, 57, 37, 208), ColorHelper.fromArgb(151, 24, 80, 140)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(57, 37, 208, 54));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(24, 80, 140, 151));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_corridor_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_grid')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$12 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(168, 130, 99, 15), ColorHelper.fromArgb(5, 246, 60, 236)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(130, 99, 15, 168));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(246, 60, 236, 5));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(22161.0, 55997.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(documentStartDate)).toEqual(22161.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.cellAlpha.getValue(documentStopDate)).toEqual(55997.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(7285.0, 25116.0), new Rectangular(18095.0, 8262.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(7285, 25116));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(18095, 8262));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(31150.0, 55929.0), new Rectangular(40043.0, 22428.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(31150, 55929));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(40043, 22428));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(41105.0, 52128.0), new Rectangular(2387.0, 32009.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(41105, 52128));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(2387, 32009));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_corridor_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_stripe')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$21 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(66, 8, 64, 254), ColorHelper.fromArgb(168, 47, 28, 112)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(8, 64, 254, 66));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(47, 28, 112, 168));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(181, 17, 233, 150), ColorHelper.fromArgb(68, 171, 148, 181)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(17, 233, 150, 181));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(171, 148, 181, 68));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(21351.0, 20709.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(documentStartDate)).toEqual(21351.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.offset.getValue(documentStopDate)).toEqual(20709.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(25188.0, 19705.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(25188.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(19705.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_corridor_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_checkerboard')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$29 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(110, 135, 211, 180), ColorHelper.fromArgb(155, 44, 134, 8)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(135, 211, 180, 110));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(44, 134, 8, 155));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(47, 212, 71, 156), ColorHelper.fromArgb(104, 34, 36, 157)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(212, 71, 156, 47));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(34, 36, 157, 104));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(62107.0, 62450.0), new Rectangular(51782.0, 25290.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(62107, 62450));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.corridor.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(51782, 25290));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_corridor_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_image_color')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$36 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(200, 242, 170, 15), ColorHelper.fromArgb(225, 99, 67, 195)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.949019607843137, 0.666666666666667, 0.0588235294117647, 0.784313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.388235294117647, 0.262745098039216, 0.764705882352941, 0.882352941176471), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_corridor_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_grid_color')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$41 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(134, 74, 214, 150), ColorHelper.fromArgb(179, 68, 1, 46)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.290196078431373, 0.83921568627451, 0.588235294117647, 0.525490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.266666666666667, 0.00392156862745098, 0.180392156862745, 0.701960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_corridor_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_stripe_evenColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$46 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(188, 132, 72, 181), ColorHelper.fromArgb(170, 144, 104, 241)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.517647058823529, 0.282352941176471, 0.709803921568627, 0.737254901960784), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.564705882352941, 0.407843137254902, 0.945098039215686, 0.666666666666667), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_corridor_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_stripe_oddColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$51 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(128, 35, 102, 91), ColorHelper.fromArgb(65, 253, 110, 77)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.137254901960784, 0.4, 0.356862745098039, 0.501960784313725), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.431372549019608, 0.301960784313725, 0.254901960784314), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_corridor_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$56 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(193, 75, 15, 38), ColorHelper.fromArgb(214, 62, 143, 65)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.294117647058824, 0.0588235294117647, 0.149019607843137, 0.756862745098039), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.243137254901961, 0.56078431372549, 0.254901960784314, 0.83921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_corridor_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$61 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(95, 196, 166, 135), ColorHelper.fromArgb(185, 31, 199, 190)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.768627450980392, 0.650980392156863, 0.529411764705882, 0.372549019607843), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.corridor.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.12156862745098, 0.780392156862745, 0.745098039215686, 0.725490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_corridor_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_corridor_outlineColor_rgbaf')).toBeDefined();");
            try (Using<CorridorCesiumWriter> using$66 = new Using<CorridorCesiumWriter>(packet.openCorridorProperty())) {
                final CorridorCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(239, 225, 67, 63), ColorHelper.fromArgb(160, 179, 67, 16)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.882352941176471, 0.262745098039216, 0.247058823529412, 0.937254901960784), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.corridor.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.701960784313725, 0.262745098039216, 0.0627450980392157, 0.627450980392157), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualCylinder() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_cylinder_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_solidColor_color')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$1 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(27, 30, 89, 105), ColorHelper.fromArgb(152, 131, 131, 170)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.117647058823529, 0.349019607843137, 0.411764705882353, 0.105882352941176), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.513725490196078, 0.513725490196078, 0.666666666666667, 0.596078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_cylinder_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_image')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$6 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(42846.0, 26023.0), new Rectangular(19184.0, 35658.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(42846, 26023));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(19184, 35658));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(44, 59, 239, 245), ColorHelper.fromArgb(39, 77, 93, 176)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(59, 239, 245, 44));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(77, 93, 176, 39));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_cylinder_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_grid')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$12 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(148, 211, 199, 71), ColorHelper.fromArgb(247, 142, 126, 167)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(211, 199, 71, 148));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(142, 126, 167, 247));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(12751.0, 16373.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(documentStartDate)).toEqual(12751.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.cellAlpha.getValue(documentStopDate)).toEqual(16373.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(11469.0, 5164.0), new Rectangular(8167.0, 36383.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(11469, 5164));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(8167, 36383));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(22021.0, 38742.0), new Rectangular(45350.0, 43441.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(22021, 38742));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(45350, 43441));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(23237.0, 58970.0), new Rectangular(62223.0, 62963.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(23237, 58970));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(62223, 62963));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_cylinder_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_stripe')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$21 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(18, 131, 133, 216), ColorHelper.fromArgb(231, 78, 238, 32)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 133, 216, 18));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(78, 238, 32, 231));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(207, 209, 149, 133), ColorHelper.fromArgb(210, 53, 207, 16)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(209, 149, 133, 207));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 207, 16, 210));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(49593.0, 25216.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(documentStartDate)).toEqual(49593.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.offset.getValue(documentStopDate)).toEqual(25216.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(16819.0, 12539.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(16819.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(12539.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_cylinder_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_checkerboard')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$29 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(158, 199, 80, 86), ColorHelper.fromArgb(187, 207, 161, 23)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(199, 80, 86, 158));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(207, 161, 23, 187));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(198, 175, 210, 242), ColorHelper.fromArgb(24, 116, 91, 127)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(175, 210, 242, 198));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(116, 91, 127, 24));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(27893.0, 32108.0), new Rectangular(57420.0, 52960.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(27893, 32108));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.cylinder.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(57420, 52960));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_cylinder_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_image_color')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$36 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(161, 194, 34, 59), ColorHelper.fromArgb(21, 225, 21, 204)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.76078431372549, 0.133333333333333, 0.231372549019608, 0.631372549019608), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.882352941176471, 0.0823529411764706, 0.8, 0.0823529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_cylinder_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_grid_color')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$41 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(186, 45, 104, 159), ColorHelper.fromArgb(182, 112, 19, 154)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.407843137254902, 0.623529411764706, 0.729411764705882), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.43921568627451, 0.0745098039215686, 0.603921568627451, 0.713725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_cylinder_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_stripe_evenColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$46 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(168, 97, 38, 204), ColorHelper.fromArgb(218, 118, 44, 83)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.380392156862745, 0.149019607843137, 0.8, 0.658823529411765), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.462745098039216, 0.172549019607843, 0.325490196078431, 0.854901960784314), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_cylinder_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_stripe_oddColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$51 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(28, 53, 119, 109), ColorHelper.fromArgb(108, 80, 127, 51)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.207843137254902, 0.466666666666667, 0.427450980392157, 0.109803921568627), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.313725490196078, 0.498039215686275, 0.2, 0.423529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_cylinder_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$56 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(131, 133, 184, 75), ColorHelper.fromArgb(10, 246, 105, 14)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.52156862745098, 0.72156862745098, 0.294117647058824, 0.513725490196078), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.964705882352941, 0.411764705882353, 0.0549019607843137, 0.0392156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_cylinder_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$61 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(103, 200, 79, 17), ColorHelper.fromArgb(236, 164, 188, 86)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.784313725490196, 0.309803921568627, 0.0666666666666667, 0.403921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.cylinder.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.643137254901961, 0.737254901960784, 0.337254901960784, 0.925490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_cylinder_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_cylinder_outlineColor_rgbaf')).toBeDefined();");
            try (Using<CylinderCesiumWriter> using$66 = new Using<CylinderCesiumWriter>(packet.openCylinderProperty())) {
                final CylinderCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(18, 199, 168, 60), ColorHelper.fromArgb(150, 164, 95, 41)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.cylinder.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.780392156862745, 0.658823529411765, 0.235294117647059, 0.0705882352941176), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.cylinder.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.643137254901961, 0.372549019607843, 0.16078431372549, 0.588235294117647), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualEllipse() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_ellipse_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_solidColor_color')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$1 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(74, 173, 206, 138), ColorHelper.fromArgb(63, 191, 66, 187)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.67843137254902, 0.807843137254902, 0.541176470588235, 0.290196078431373), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.749019607843137, 0.258823529411765, 0.733333333333333, 0.247058823529412), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_ellipse_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_image')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$6 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(41027.0, 32928.0), new Rectangular(30513.0, 54647.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(41027, 32928));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(30513, 54647));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(224, 243, 25, 233), ColorHelper.fromArgb(20, 230, 62, 9)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 25, 233, 224));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(230, 62, 9, 20));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_ellipse_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_grid')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$12 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(233, 103, 140, 88), ColorHelper.fromArgb(4, 224, 133, 210)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(103, 140, 88, 233));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(224, 133, 210, 4));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(39159.0, 47494.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(documentStartDate)).toEqual(39159.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.cellAlpha.getValue(documentStopDate)).toEqual(47494.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(40987.0, 3488.0), new Rectangular(5066.0, 58131.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(40987, 3488));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5066, 58131));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(11466.0, 25388.0), new Rectangular(17761.0, 21317.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(11466, 25388));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(17761, 21317));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(478.0, 18945.0), new Rectangular(25914.0, 29541.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(478, 18945));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(25914, 29541));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_ellipse_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_stripe')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$21 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(34, 218, 225, 186), ColorHelper.fromArgb(44, 109, 193, 18)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(218, 225, 186, 34));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(109, 193, 18, 44));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(58, 119, 198, 180), ColorHelper.fromArgb(31, 79, 137, 65)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(119, 198, 180, 58));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(79, 137, 65, 31));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(16964.0, 16523.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(documentStartDate)).toEqual(16964.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.offset.getValue(documentStopDate)).toEqual(16523.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(50015.0, 64942.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(50015.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(64942.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_ellipse_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_checkerboard')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$29 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(200, 65, 135, 226), ColorHelper.fromArgb(112, 70, 33, 98)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(65, 135, 226, 200));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(70, 33, 98, 112));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(224, 246, 224, 230), ColorHelper.fromArgb(204, 110, 127, 138)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(246, 224, 230, 224));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(110, 127, 138, 204));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(24670.0, 352.0), new Rectangular(16830.0, 33857.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(24670, 352));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipse.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(16830, 33857));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_ellipse_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_image_color')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$36 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(156, 53, 10, 31), ColorHelper.fromArgb(147, 156, 3, 177)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.207843137254902, 0.0392156862745098, 0.12156862745098, 0.611764705882353), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.611764705882353, 0.0117647058823529, 0.694117647058824, 0.576470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_ellipse_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_grid_color')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$41 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(52, 148, 8, 71), ColorHelper.fromArgb(150, 13, 222, 30)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.580392156862745, 0.0313725490196078, 0.27843137254902, 0.203921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.870588235294118, 0.117647058823529, 0.588235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_ellipse_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_stripe_evenColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$46 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(237, 14, 30, 159), ColorHelper.fromArgb(43, 68, 29, 239)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0549019607843137, 0.117647058823529, 0.623529411764706, 0.929411764705882), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.266666666666667, 0.113725490196078, 0.937254901960784, 0.168627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_ellipse_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_stripe_oddColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$51 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(33, 67, 44, 72), ColorHelper.fromArgb(212, 247, 162, 134)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.262745098039216, 0.172549019607843, 0.282352941176471, 0.129411764705882), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.635294117647059, 0.525490196078431, 0.831372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_ellipse_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$56 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(183, 53, 40, 243), ColorHelper.fromArgb(60, 162, 213, 194)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.207843137254902, 0.156862745098039, 0.952941176470588, 0.717647058823529), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.635294117647059, 0.835294117647059, 0.76078431372549, 0.235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_ellipse_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$61 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(159, 227, 36, 59), ColorHelper.fromArgb(7, 49, 75, 189)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.890196078431372, 0.141176470588235, 0.231372549019608, 0.623529411764706), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipse.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.294117647058824, 0.741176470588235, 0.0274509803921569), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_ellipse_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipse_outlineColor_rgbaf')).toBeDefined();");
            try (Using<EllipseCesiumWriter> using$66 = new Using<EllipseCesiumWriter>(packet.openEllipseProperty())) {
                final EllipseCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(156, 194, 92, 57), ColorHelper.fromArgb(165, 41, 214, 192)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.ellipse.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.76078431372549, 0.36078431372549, 0.223529411764706, 0.611764705882353), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.ellipse.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.16078431372549, 0.83921568627451, 0.752941176470588, 0.647058823529412), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualEllipsoid() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_ellipsoid_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_solidColor_color')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$1 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(128, 151, 249, 53), ColorHelper.fromArgb(60, 23, 169, 209)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.592156862745098, 0.976470588235294, 0.207843137254902, 0.501960784313725), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0901960784313725, 0.662745098039216, 0.819607843137255, 0.235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_ellipsoid_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_image')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$6 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(63583.0, 15096.0), new Rectangular(48977.0, 60351.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(63583, 15096));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(48977, 60351));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(104, 49, 50, 177), ColorHelper.fromArgb(157, 131, 27, 208)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(49, 50, 177, 104));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(131, 27, 208, 157));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_ellipsoid_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_grid')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$12 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(72, 121, 105, 70), ColorHelper.fromArgb(57, 204, 122, 157)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(121, 105, 70, 72));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(204, 122, 157, 57));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(39442.0, 463.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(documentStartDate)).toEqual(39442.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.cellAlpha.getValue(documentStopDate)).toEqual(463.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(33778.0, 30083.0), new Rectangular(5202.0, 18708.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(33778, 30083));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(5202, 18708));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(44058.0, 37804.0), new Rectangular(34449.0, 3718.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(44058, 37804));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(34449, 3718));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(33149.0, 21889.0), new Rectangular(35482.0, 10122.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(33149, 21889));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(35482, 10122));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_ellipsoid_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_stripe')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$21 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(196, 153, 245, 201), ColorHelper.fromArgb(131, 245, 113, 5)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(153, 245, 201, 196));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(245, 113, 5, 131));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(111, 99, 151, 174), ColorHelper.fromArgb(1, 188, 89, 18)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(99, 151, 174, 111));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(188, 89, 18, 1));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(44961.0, 5690.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(documentStartDate)).toEqual(44961.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.offset.getValue(documentStopDate)).toEqual(5690.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(3351.0, 44332.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(3351.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(44332.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_ellipsoid_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_checkerboard')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$29 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(56, 147, 239, 19), ColorHelper.fromArgb(178, 5, 32, 143)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(147, 239, 19, 56));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(5, 32, 143, 178));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(186, 131, 51, 246), ColorHelper.fromArgb(89, 214, 117, 149)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 51, 246, 186));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(214, 117, 149, 89));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(28116.0, 51821.0), new Rectangular(60296.0, 50923.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(28116, 51821));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.ellipsoid.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(60296, 50923));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_ellipsoid_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_image_color')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$36 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(124, 167, 132, 219), ColorHelper.fromArgb(23, 220, 182, 144)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.654901960784314, 0.517647058823529, 0.858823529411765, 0.486274509803922), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.862745098039216, 0.713725490196078, 0.564705882352941, 0.0901960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_ellipsoid_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_grid_color')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$41 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(57, 153, 109, 52), ColorHelper.fromArgb(209, 134, 78, 41)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.6, 0.427450980392157, 0.203921568627451, 0.223529411764706), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.525490196078431, 0.305882352941176, 0.16078431372549, 0.819607843137255), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_ellipsoid_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_stripe_evenColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$46 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(56, 77, 146, 224), ColorHelper.fromArgb(232, 86, 213, 246)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.301960784313725, 0.572549019607843, 0.87843137254902, 0.219607843137255), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.337254901960784, 0.835294117647059, 0.964705882352941, 0.909803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_ellipsoid_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_stripe_oddColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$51 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(64, 165, 162, 66), ColorHelper.fromArgb(250, 234, 67, 170)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.647058823529412, 0.635294117647059, 0.258823529411765, 0.250980392156863), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.917647058823529, 0.262745098039216, 0.666666666666667, 0.980392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_ellipsoid_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$56 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(128, 209, 72, 237), ColorHelper.fromArgb(244, 217, 75, 127)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.819607843137255, 0.282352941176471, 0.929411764705882, 0.501960784313725), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.850980392156863, 0.294117647058824, 0.498039215686275, 0.956862745098039), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_ellipsoid_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$61 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(53, 58, 220, 227), ColorHelper.fromArgb(99, 203, 12, 215)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.227450980392157, 0.862745098039216, 0.890196078431372, 0.207843137254902), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.ellipsoid.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.796078431372549, 0.0470588235294118, 0.843137254901961, 0.388235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_ellipsoid_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_ellipsoid_outlineColor_rgbaf')).toBeDefined();");
            try (Using<EllipsoidCesiumWriter> using$66 = new Using<EllipsoidCesiumWriter>(packet.openEllipsoidProperty())) {
                final EllipsoidCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(145, 141, 140, 110), ColorHelper.fromArgb(197, 111, 178, 101)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.ellipsoid.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.552941176470588, 0.549019607843137, 0.431372549019608, 0.568627450980392), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.ellipsoid.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.435294117647059, 0.698039215686274, 0.396078431372549, 0.772549019607843), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualLabel() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_label_backgroundColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_label_backgroundColor_rgbaf')).toBeDefined();");
            try (Using<LabelCesiumWriter> using$1 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openBackgroundColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(69, 245, 48, 222), ColorHelper.fromArgb(210, 225, 203, 154)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.backgroundColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.96078431372549, 0.188235294117647, 0.870588235294118, 0.270588235294118), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.backgroundColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.882352941176471, 0.796078431372549, 0.603921568627451, 0.823529411764706), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_label_fillColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_label_fillColor_rgbaf')).toBeDefined();");
            try (Using<LabelCesiumWriter> using$4 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$4.resource;
                try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(w.openFillColorProperty())) {
                    final ColorCesiumWriter w2 = using$5.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(63, 181, 142, 86), ColorHelper.fromArgb(21, 112, 177, 230)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.fillColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.709803921568627, 0.556862745098039, 0.337254901960784, 0.247058823529412), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.fillColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.43921568627451, 0.694117647058824, 0.901960784313726, 0.0823529411764706), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("sampled_label_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_label_outlineColor_rgbaf')).toBeDefined();");
            try (Using<LabelCesiumWriter> using$7 = new Using<LabelCesiumWriter>(packet.openLabelProperty())) {
                final LabelCesiumWriter w = using$7.resource;
                try (Using<ColorCesiumWriter> using$8 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$8.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(202, 161, 181, 69), ColorHelper.fromArgb(161, 111, 45, 60)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.631372549019608, 0.709803921568627, 0.270588235294118, 0.792156862745098), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.label.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.435294117647059, 0.176470588235294, 0.235294117647059, 0.631372549019608), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualModel() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_model_silhouetteColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_model_silhouetteColor_rgbaf')).toBeDefined();");
            try (Using<ModelCesiumWriter> using$1 = new Using<ModelCesiumWriter>(packet.openModelProperty())) {
                final ModelCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openSilhouetteColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(162, 59, 221, 68), ColorHelper.fromArgb(21, 191, 58, 206)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.model.silhouetteColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.231372549019608, 0.866666666666667, 0.266666666666667, 0.635294117647059), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.model.silhouetteColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.749019607843137, 0.227450980392157, 0.807843137254902, 0.0823529411764706), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_model_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_model_color_rgbaf')).toBeDefined();");
            try (Using<ModelCesiumWriter> using$4 = new Using<ModelCesiumWriter>(packet.openModelProperty())) {
                final ModelCesiumWriter w = using$4.resource;
                try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$5.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(244, 13, 214, 120), ColorHelper.fromArgb(158, 111, 241, 110)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.model.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0509803921568627, 0.83921568627451, 0.470588235294118, 0.956862745098039), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.model.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.435294117647059, 0.945098039215686, 0.431372549019608, 0.619607843137255), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualPath() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_path_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_solidColor_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$1 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$1.resource;
                try (Using<PolylineMaterialCesiumWriter> using$2 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(126, 132, 143, 65), ColorHelper.fromArgb(227, 231, 39, 218)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.517647058823529, 0.56078431372549, 0.254901960784314, 0.494117647058824), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.905882352941176, 0.152941176470588, 0.854901960784314, 0.890196078431372), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_path_material_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineOutline')).toBeDefined();");
            try (Using<PathCesiumWriter> using$6 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$6.resource;
                try (Using<PolylineMaterialCesiumWriter> using$7 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$7.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$8 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$8.resource;
                        try (Using<ColorCesiumWriter> using$9 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$9.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(76, 209, 154, 35), ColorHelper.fromArgb(140, 186, 25, 242)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(209, 154, 35, 76));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(186, 25, 242, 140));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(157, 218, 241, 216), ColorHelper.fromArgb(199, 70, 200, 183)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(218, 241, 216, 157));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(70, 200, 183, 199));");
                        }
                        try (Using<DoubleCesiumWriter> using$11 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$11.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(2699.0, 1320.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(documentStartDate)).toEqual(2699.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.outlineWidth.getValue(documentStopDate)).toEqual(1320.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("sampled_path_material_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineArrow')).toBeDefined();");
            try (Using<PathCesiumWriter> using$13 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$13.resource;
                try (Using<PolylineMaterialCesiumWriter> using$14 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$14.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$15 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$15.resource;
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(136, 150, 221, 161), ColorHelper.fromArgb(117, 19, 231, 68)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(150, 221, 161, 136));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(19, 231, 68, 117));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("sampled_path_material_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineDash')).toBeDefined();");
            try (Using<PathCesiumWriter> using$18 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$18.resource;
                try (Using<PolylineMaterialCesiumWriter> using$19 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$19.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$20 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$20.resource;
                        try (Using<ColorCesiumWriter> using$21 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$21.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(119, 140, 167, 151), ColorHelper.fromArgb(104, 65, 100, 228)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(140, 167, 151, 119));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(65, 100, 228, 104));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(151, 154, 198, 168), ColorHelper.fromArgb(42, 16, 23, 0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.gapColor.getValue(documentStartDate)).toEqual(Color.fromBytes(154, 198, 168, 151));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.gapColor.getValue(documentStopDate)).toEqual(Color.fromBytes(16, 23, 0, 42));");
                        }
                        try (Using<DoubleCesiumWriter> using$23 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$23.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(38294.0, 33057.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.dashLength.getValue(documentStartDate)).toEqual(38294.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.dashLength.getValue(documentStopDate)).toEqual(33057.0);");
                        }
                        try (Using<IntegerCesiumWriter> using$24 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$24.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Integer> createList(58660, 3340));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.dashPattern.getValue(documentStartDate)).toEqual(58660);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.dashPattern.getValue(documentStopDate)).toEqual(3340);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("sampled_path_material_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineGlow')).toBeDefined();");
            try (Using<PathCesiumWriter> using$26 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$26.resource;
                try (Using<PolylineMaterialCesiumWriter> using$27 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$27.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$28 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$28.resource;
                        try (Using<ColorCesiumWriter> using$29 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$29.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(254, 197, 117, 196), ColorHelper.fromArgb(230, 18, 17, 195)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(197, 117, 196, 254));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(18, 17, 195, 230));");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(5579.0, 59951.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(documentStartDate)).toEqual(5579.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.glowPower.getValue(documentStopDate)).toEqual(59951.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$31 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$31.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(30159.0, 35636.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.taperPower.getValue(documentStartDate)).toEqual(30159.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.taperPower.getValue(documentStopDate)).toEqual(35636.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$32 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$32.resource;
            packet.writeId("sampled_path_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_image')).toBeDefined();");
            try (Using<PathCesiumWriter> using$33 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$33.resource;
                try (Using<PolylineMaterialCesiumWriter> using$34 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$34.resource;
                    try (Using<ImageMaterialCesiumWriter> using$35 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$35.resource;
                        try (Using<RepeatCesiumWriter> using$36 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$36.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(25033.0, 47457.0), new Rectangular(30413.0, 15734.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(25033, 47457));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(30413, 15734));");
                        }
                        try (Using<ColorCesiumWriter> using$37 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$37.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(92, 225, 149, 237), ColorHelper.fromArgb(9, 234, 146, 229)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(225, 149, 237, 92));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(234, 146, 229, 9));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("sampled_path_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_grid')).toBeDefined();");
            try (Using<PathCesiumWriter> using$39 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$39.resource;
                try (Using<PolylineMaterialCesiumWriter> using$40 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$40.resource;
                    try (Using<GridMaterialCesiumWriter> using$41 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(203, 99, 177, 19), ColorHelper.fromArgb(127, 231, 169, 202)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(99, 177, 19, 203));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(231, 169, 202, 127));");
                        }
                        try (Using<DoubleCesiumWriter> using$43 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$43.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(63572.0, 26232.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(documentStartDate)).toEqual(63572.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.cellAlpha.getValue(documentStopDate)).toEqual(26232.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$44 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$44.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(34101.0, 5509.0), new Rectangular(11991.0, 23086.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(34101, 5509));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(11991, 23086));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$45 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$45.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(39225.0, 58265.0), new Rectangular(60443.0, 36332.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(39225, 58265));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(60443, 36332));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$46 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$46.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(25536.0, 59747.0), new Rectangular(43164.0, 57256.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(25536, 59747));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(43164, 57256));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$47 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$47.resource;
            packet.writeId("sampled_path_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_stripe')).toBeDefined();");
            try (Using<PathCesiumWriter> using$48 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$48.resource;
                try (Using<PolylineMaterialCesiumWriter> using$49 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$49.resource;
                    try (Using<StripeMaterialCesiumWriter> using$50 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$50.resource;
                        try (Using<ColorCesiumWriter> using$51 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$51.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(123, 252, 51, 215), ColorHelper.fromArgb(80, 164, 66, 75)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(252, 51, 215, 123));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(164, 66, 75, 80));");
                        }
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(99, 192, 190, 37), ColorHelper.fromArgb(248, 196, 81, 62)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(192, 190, 37, 99));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(196, 81, 62, 248));");
                        }
                        try (Using<DoubleCesiumWriter> using$53 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$53.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(45320.0, 41173.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(documentStartDate)).toEqual(45320.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.offset.getValue(documentStopDate)).toEqual(41173.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$54 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$54.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(42078.0, 11633.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(42078.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(11633.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_path_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_checkerboard')).toBeDefined();");
            try (Using<PathCesiumWriter> using$56 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$56.resource;
                try (Using<PolylineMaterialCesiumWriter> using$57 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(174, 29, 130, 90), ColorHelper.fromArgb(181, 42, 131, 191)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(29, 130, 90, 174));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(42, 131, 191, 181));");
                        }
                        try (Using<ColorCesiumWriter> using$60 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$60.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(56, 32, 82, 30), ColorHelper.fromArgb(118, 161, 13, 144)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(32, 82, 30, 56));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(161, 13, 144, 118));");
                        }
                        try (Using<RepeatCesiumWriter> using$61 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$61.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(14368.0, 54840.0), new Rectangular(58386.0, 2276.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(14368, 54840));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.path.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(58386, 2276));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$62 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$62.resource;
            packet.writeId("sampled_path_material_polylineOutline_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineOutline_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$63 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$63.resource;
                try (Using<PolylineMaterialCesiumWriter> using$64 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$64.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$65 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$65.resource;
                        try (Using<ColorCesiumWriter> using$66 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$66.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(184, 125, 127, 209), ColorHelper.fromArgb(94, 79, 84, 206)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.490196078431373, 0.498039215686275, 0.819607843137255, 0.72156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.309803921568627, 0.329411764705882, 0.807843137254902, 0.368627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$67 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$67.resource;
            packet.writeId("sampled_path_material_polylineOutline_outlineColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineOutline_outlineColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$68 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$68.resource;
                try (Using<PolylineMaterialCesiumWriter> using$69 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$69.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$70 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$70.resource;
                        try (Using<ColorCesiumWriter> using$71 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$71.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(169, 109, 245, 254), ColorHelper.fromArgb(76, 234, 162, 172)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.96078431372549, 0.996078431372549, 0.662745098039216), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.917647058823529, 0.635294117647059, 0.674509803921569, 0.298039215686275), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$72 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$72.resource;
            packet.writeId("sampled_path_material_polylineArrow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineArrow_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$73 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$73.resource;
                try (Using<PolylineMaterialCesiumWriter> using$74 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$74.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$75 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$75.resource;
                        try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$76.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(83, 17, 248, 175), ColorHelper.fromArgb(56, 51, 123, 127)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.972549019607843, 0.686274509803922, 0.325490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.2, 0.482352941176471, 0.498039215686275, 0.219607843137255), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$77 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$77.resource;
            packet.writeId("sampled_path_material_polylineDash_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineDash_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$78 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$78.resource;
                try (Using<PolylineMaterialCesiumWriter> using$79 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$79.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$80 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$80.resource;
                        try (Using<ColorCesiumWriter> using$81 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$81.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(181, 205, 173, 45), ColorHelper.fromArgb(205, 172, 25, 114)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.803921568627451, 0.67843137254902, 0.176470588235294, 0.709803921568627), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.0980392156862745, 0.447058823529412, 0.803921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$82 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$82.resource;
            packet.writeId("sampled_path_material_polylineDash_gapColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineDash_gapColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$83 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$83.resource;
                try (Using<PolylineMaterialCesiumWriter> using$84 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$84.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$85 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$85.resource;
                        try (Using<ColorCesiumWriter> using$86 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$86.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(230, 59, 190, 197), ColorHelper.fromArgb(79, 182, 46, 81)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.gapColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.231372549019608, 0.745098039215686, 0.772549019607843, 0.901960784313726), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.gapColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.713725490196078, 0.180392156862745, 0.317647058823529, 0.309803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$87 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$87.resource;
            packet.writeId("sampled_path_material_polylineGlow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_polylineGlow_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$88 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$88.resource;
                try (Using<PolylineMaterialCesiumWriter> using$89 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$89.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$90 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$90.resource;
                        try (Using<ColorCesiumWriter> using$91 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$91.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(251, 163, 51, 5), ColorHelper.fromArgb(6, 96, 208, 238)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.63921568627451, 0.2, 0.0196078431372549, 0.984313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.376470588235294, 0.815686274509804, 0.933333333333333, 0.0235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$92 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$92.resource;
            packet.writeId("sampled_path_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_image_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$93 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$93.resource;
                try (Using<PolylineMaterialCesiumWriter> using$94 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$94.resource;
                    try (Using<ImageMaterialCesiumWriter> using$95 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$95.resource;
                        try (Using<ColorCesiumWriter> using$96 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$96.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(11, 229, 197, 75), ColorHelper.fromArgb(79, 208, 23, 229)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.898039215686275, 0.772549019607843, 0.294117647058824, 0.0431372549019608), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.0901960784313725, 0.898039215686275, 0.309803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$97 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$97.resource;
            packet.writeId("sampled_path_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_grid_color')).toBeDefined();");
            try (Using<PathCesiumWriter> using$98 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$98.resource;
                try (Using<PolylineMaterialCesiumWriter> using$99 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$99.resource;
                    try (Using<GridMaterialCesiumWriter> using$100 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$100.resource;
                        try (Using<ColorCesiumWriter> using$101 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$101.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(84, 227, 0, 183), ColorHelper.fromArgb(66, 121, 176, 11)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.890196078431372, 0, 0.717647058823529, 0.329411764705882), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.474509803921569, 0.690196078431373, 0.0431372549019608, 0.258823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$102 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$102.resource;
            packet.writeId("sampled_path_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_stripe_evenColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$103 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$103.resource;
                try (Using<PolylineMaterialCesiumWriter> using$104 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$104.resource;
                    try (Using<StripeMaterialCesiumWriter> using$105 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$105.resource;
                        try (Using<ColorCesiumWriter> using$106 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$106.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(138, 94, 149, 212), ColorHelper.fromArgb(137, 81, 102, 214)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.368627450980392, 0.584313725490196, 0.831372549019608, 0.541176470588235), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.317647058823529, 0.4, 0.83921568627451, 0.537254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$107 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$107.resource;
            packet.writeId("sampled_path_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_stripe_oddColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$108 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$108.resource;
                try (Using<PolylineMaterialCesiumWriter> using$109 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$109.resource;
                    try (Using<StripeMaterialCesiumWriter> using$110 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$110.resource;
                        try (Using<ColorCesiumWriter> using$111 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$111.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(155, 37, 150, 234), ColorHelper.fromArgb(134, 30, 18, 230)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.145098039215686, 0.588235294117647, 0.917647058823529, 0.607843137254902), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.117647058823529, 0.0705882352941176, 0.901960784313726, 0.525490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$112 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$112.resource;
            packet.writeId("sampled_path_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$113 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$113.resource;
                try (Using<PolylineMaterialCesiumWriter> using$114 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$114.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$115 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$115.resource;
                        try (Using<ColorCesiumWriter> using$116 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$116.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(50, 161, 189, 72), ColorHelper.fromArgb(203, 64, 28, 48)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.631372549019608, 0.741176470588235, 0.282352941176471, 0.196078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.250980392156863, 0.109803921568627, 0.188235294117647, 0.796078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$117 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$117.resource;
            packet.writeId("sampled_path_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_path_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PathCesiumWriter> using$118 = new Using<PathCesiumWriter>(packet.openPathProperty())) {
                final PathCesiumWriter w = using$118.resource;
                try (Using<PolylineMaterialCesiumWriter> using$119 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$119.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$120 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$120.resource;
                        try (Using<ColorCesiumWriter> using$121 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$121.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(168, 99, 33, 85), ColorHelper.fromArgb(182, 40, 161, 74)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.388235294117647, 0.129411764705882, 0.333333333333333, 0.658823529411765), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.path.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.156862745098039, 0.631372549019608, 0.290196078431373, 0.713725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
    }

    private final void writeSampledValuesIndividualPoint() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_point_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_point_color_rgbaf')).toBeDefined();");
            try (Using<PointCesiumWriter> using$1 = new Using<PointCesiumWriter>(packet.openPointProperty())) {
                final PointCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(203, 173, 91, 150), ColorHelper.fromArgb(161, 247, 76, 131)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.point.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.67843137254902, 0.356862745098039, 0.588235294117647, 0.796078431372549), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.point.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.968627450980392, 0.298039215686275, 0.513725490196078, 0.631372549019608), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_point_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_point_outlineColor_rgbaf')).toBeDefined();");
            try (Using<PointCesiumWriter> using$4 = new Using<PointCesiumWriter>(packet.openPointProperty())) {
                final PointCesiumWriter w = using$4.resource;
                try (Using<ColorCesiumWriter> using$5 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$5.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(196, 109, 228, 43), ColorHelper.fromArgb(202, 117, 119, 99)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.point.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.894117647058824, 0.168627450980392, 0.768627450980392), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.point.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.466666666666667, 0.388235294117647, 0.792156862745098), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualPolygon() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_polygon_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_solidColor_color')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$1 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(228, 78, 157, 86), ColorHelper.fromArgb(8, 47, 158, 90)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.615686274509804, 0.337254901960784, 0.894117647058824), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.184313725490196, 0.619607843137255, 0.352941176470588, 0.0313725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_polygon_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_image')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$6 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(19536.0, 17484.0), new Rectangular(46291.0, 28852.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(19536, 17484));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(46291, 28852));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(29, 157, 5, 231), ColorHelper.fromArgb(36, 53, 2, 148)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(157, 5, 231, 29));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 2, 148, 36));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_polygon_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_grid')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$12 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(124, 179, 243, 247), ColorHelper.fromArgb(42, 15, 128, 159)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(179, 243, 247, 124));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(15, 128, 159, 42));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(11565.0, 42611.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(documentStartDate)).toEqual(11565.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.cellAlpha.getValue(documentStopDate)).toEqual(42611.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(47065.0, 65463.0), new Rectangular(29170.0, 16497.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(47065, 65463));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(29170, 16497));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(62674.0, 26868.0), new Rectangular(22008.0, 39509.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(62674, 26868));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(22008, 39509));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(28793.0, 1648.0), new Rectangular(44991.0, 42159.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(28793, 1648));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(44991, 42159));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_polygon_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_stripe')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$21 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(146, 113, 233, 143), ColorHelper.fromArgb(44, 106, 138, 115)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(113, 233, 143, 146));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(106, 138, 115, 44));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(244, 104, 146, 138), ColorHelper.fromArgb(36, 161, 95, 25)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(104, 146, 138, 244));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(161, 95, 25, 36));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(4711.0, 65087.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(documentStartDate)).toEqual(4711.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.offset.getValue(documentStopDate)).toEqual(65087.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(44013.0, 7595.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(44013.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(7595.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_polygon_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_checkerboard')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$29 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(219, 167, 56, 202), ColorHelper.fromArgb(125, 231, 169, 74)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(167, 56, 202, 219));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(231, 169, 74, 125));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(35, 88, 174, 167), ColorHelper.fromArgb(23, 12, 69, 69)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(88, 174, 167, 35));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(12, 69, 69, 23));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(32132.0, 20093.0), new Rectangular(31300.0, 27514.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(32132, 20093));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polygon.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(31300, 27514));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_polygon_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_image_color')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$36 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(78, 128, 21, 72), ColorHelper.fromArgb(226, 19, 167, 153)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.501960784313725, 0.0823529411764706, 0.282352941176471, 0.305882352941176), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.654901960784314, 0.6, 0.886274509803922), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_polygon_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_grid_color')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$41 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(188, 49, 181, 206), ColorHelper.fromArgb(249, 172, 6, 195)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.192156862745098, 0.709803921568627, 0.807843137254902, 0.737254901960784), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.674509803921569, 0.0235294117647059, 0.764705882352941, 0.976470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_polygon_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_stripe_evenColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$46 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(111, 145, 90, 101), ColorHelper.fromArgb(107, 70, 112, 175)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.568627450980392, 0.352941176470588, 0.396078431372549, 0.435294117647059), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.274509803921569, 0.43921568627451, 0.686274509803922, 0.419607843137255), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_polygon_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_stripe_oddColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$51 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(185, 83, 89, 148), ColorHelper.fromArgb(219, 145, 176, 1)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.325490196078431, 0.349019607843137, 0.580392156862745, 0.725490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.568627450980392, 0.690196078431373, 0.00392156862745098, 0.858823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_polygon_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$56 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(69, 212, 116, 225), ColorHelper.fromArgb(41, 126, 98, 88)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.831372549019608, 0.454901960784314, 0.882352941176471, 0.270588235294118), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.494117647058824, 0.384313725490196, 0.345098039215686, 0.16078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_polygon_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$61 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(200, 3, 231, 151), ColorHelper.fromArgb(164, 109, 179, 23)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0117647058823529, 0.905882352941176, 0.592156862745098, 0.784313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polygon.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.701960784313725, 0.0901960784313725, 0.643137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_polygon_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polygon_outlineColor_rgbaf')).toBeDefined();");
            try (Using<PolygonCesiumWriter> using$66 = new Using<PolygonCesiumWriter>(packet.openPolygonProperty())) {
                final PolygonCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(153, 172, 142, 29), ColorHelper.fromArgb(182, 166, 211, 137)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.674509803921569, 0.556862745098039, 0.113725490196078, 0.6), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polygon.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.650980392156863, 0.827450980392157, 0.537254901960784, 0.713725490196078), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualPolyline() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_polyline_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_solidColor_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$1 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$1.resource;
                try (Using<PolylineMaterialCesiumWriter> using$2 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(119, 249, 242, 115), ColorHelper.fromArgb(217, 67, 130, 137)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.976470588235294, 0.949019607843137, 0.450980392156863, 0.466666666666667), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.262745098039216, 0.509803921568627, 0.537254901960784, 0.850980392156863), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_polyline_material_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineOutline')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$6 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$6.resource;
                try (Using<PolylineMaterialCesiumWriter> using$7 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$7.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$8 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$8.resource;
                        try (Using<ColorCesiumWriter> using$9 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$9.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(218, 245, 92, 109), ColorHelper.fromArgb(167, 241, 96, 196)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(245, 92, 109, 218));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(241, 96, 196, 167));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(244, 174, 2, 11), ColorHelper.fromArgb(138, 31, 126, 140)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(174, 2, 11, 244));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(31, 126, 140, 138));");
                        }
                        try (Using<DoubleCesiumWriter> using$11 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$11.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(33279.0, 26855.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(documentStartDate)).toEqual(33279.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.outlineWidth.getValue(documentStopDate)).toEqual(26855.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$12 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$12.resource;
            packet.writeId("sampled_polyline_material_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineArrow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$13 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$13.resource;
                try (Using<PolylineMaterialCesiumWriter> using$14 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$14.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$15 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$15.resource;
                        try (Using<ColorCesiumWriter> using$16 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$16.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(157, 141, 137, 252), ColorHelper.fromArgb(57, 8, 236, 198)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(141, 137, 252, 157));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(8, 236, 198, 57));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$17 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$17.resource;
            packet.writeId("sampled_polyline_material_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineDash')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$18 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$18.resource;
                try (Using<PolylineMaterialCesiumWriter> using$19 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$19.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$20 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$20.resource;
                        try (Using<ColorCesiumWriter> using$21 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$21.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(158, 77, 159, 238), ColorHelper.fromArgb(158, 206, 194, 234)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(77, 159, 238, 158));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(206, 194, 234, 158));");
                        }
                        try (Using<ColorCesiumWriter> using$22 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$22.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(164, 232, 145, 15), ColorHelper.fromArgb(138, 173, 151, 118)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.gapColor.getValue(documentStartDate)).toEqual(Color.fromBytes(232, 145, 15, 164));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.gapColor.getValue(documentStopDate)).toEqual(Color.fromBytes(173, 151, 118, 138));");
                        }
                        try (Using<DoubleCesiumWriter> using$23 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$23.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(41757.0, 10126.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.dashLength.getValue(documentStartDate)).toEqual(41757.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.dashLength.getValue(documentStopDate)).toEqual(10126.0);");
                        }
                        try (Using<IntegerCesiumWriter> using$24 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$24.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Integer> createList(33948, 16892));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.dashPattern.getValue(documentStartDate)).toEqual(33948);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.dashPattern.getValue(documentStopDate)).toEqual(16892);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$25 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$25.resource;
            packet.writeId("sampled_polyline_material_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineGlow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$26 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$26.resource;
                try (Using<PolylineMaterialCesiumWriter> using$27 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$27.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$28 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$28.resource;
                        try (Using<ColorCesiumWriter> using$29 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$29.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(176, 174, 178, 78), ColorHelper.fromArgb(195, 79, 191, 38)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(174, 178, 78, 176));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(79, 191, 38, 195));");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(55378.0, 60643.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(documentStartDate)).toEqual(55378.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.glowPower.getValue(documentStopDate)).toEqual(60643.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$31 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$31.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(50068.0, 2516.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.taperPower.getValue(documentStartDate)).toEqual(50068.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.taperPower.getValue(documentStopDate)).toEqual(2516.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$32 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$32.resource;
            packet.writeId("sampled_polyline_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_image')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$33 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$33.resource;
                try (Using<PolylineMaterialCesiumWriter> using$34 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$34.resource;
                    try (Using<ImageMaterialCesiumWriter> using$35 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$35.resource;
                        try (Using<RepeatCesiumWriter> using$36 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$36.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(50957.0, 35783.0), new Rectangular(59533.0, 65000.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(50957, 35783));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(59533, 65000));");
                        }
                        try (Using<ColorCesiumWriter> using$37 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$37.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(185, 174, 154, 113), ColorHelper.fromArgb(155, 123, 236, 118)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(174, 154, 113, 185));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(123, 236, 118, 155));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("sampled_polyline_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_grid')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$39 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$39.resource;
                try (Using<PolylineMaterialCesiumWriter> using$40 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$40.resource;
                    try (Using<GridMaterialCesiumWriter> using$41 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(224, 26, 89, 33), ColorHelper.fromArgb(1, 215, 131, 203)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(26, 89, 33, 224));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(215, 131, 203, 1));");
                        }
                        try (Using<DoubleCesiumWriter> using$43 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$43.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(34343.0, 63863.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(documentStartDate)).toEqual(34343.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.cellAlpha.getValue(documentStopDate)).toEqual(63863.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$44 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$44.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(52308.0, 51660.0), new Rectangular(45338.0, 51633.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(52308, 51660));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(45338, 51633));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$45 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$45.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(47738.0, 52154.0), new Rectangular(42674.0, 38822.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(47738, 52154));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(42674, 38822));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$46 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$46.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(29194.0, 52338.0), new Rectangular(25319.0, 28514.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(29194, 52338));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(25319, 28514));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$47 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$47.resource;
            packet.writeId("sampled_polyline_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_stripe')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$48 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$48.resource;
                try (Using<PolylineMaterialCesiumWriter> using$49 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$49.resource;
                    try (Using<StripeMaterialCesiumWriter> using$50 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$50.resource;
                        try (Using<ColorCesiumWriter> using$51 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$51.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(73, 141, 205, 78), ColorHelper.fromArgb(34, 107, 159, 97)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(141, 205, 78, 73));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(107, 159, 97, 34));");
                        }
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(197, 19, 76, 127), ColorHelper.fromArgb(168, 214, 222, 19)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(19, 76, 127, 197));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(214, 222, 19, 168));");
                        }
                        try (Using<DoubleCesiumWriter> using$53 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$53.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(51126.0, 10891.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(documentStartDate)).toEqual(51126.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.offset.getValue(documentStopDate)).toEqual(10891.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$54 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$54.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(25313.0, 22020.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(25313.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(22020.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_polyline_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_checkerboard')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$56 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$56.resource;
                try (Using<PolylineMaterialCesiumWriter> using$57 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(31, 94, 152, 152), ColorHelper.fromArgb(102, 76, 129, 223)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(94, 152, 152, 31));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(76, 129, 223, 102));");
                        }
                        try (Using<ColorCesiumWriter> using$60 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$60.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(172, 71, 237, 5), ColorHelper.fromArgb(160, 209, 132, 204)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(71, 237, 5, 172));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(209, 132, 204, 160));");
                        }
                        try (Using<RepeatCesiumWriter> using$61 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$61.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(19943.0, 17997.0), new Rectangular(55528.0, 16856.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(19943, 17997));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(55528, 16856));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$62 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$62.resource;
            packet.writeId("sampled_polyline_material_polylineOutline_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineOutline_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$63 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$63.resource;
                try (Using<PolylineMaterialCesiumWriter> using$64 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$64.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$65 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$65.resource;
                        try (Using<ColorCesiumWriter> using$66 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$66.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(168, 98, 43, 113), ColorHelper.fromArgb(27, 7, 165, 101)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.384313725490196, 0.168627450980392, 0.443137254901961, 0.658823529411765), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0274509803921569, 0.647058823529412, 0.396078431372549, 0.105882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$67 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$67.resource;
            packet.writeId("sampled_polyline_material_polylineOutline_outlineColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineOutline_outlineColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$68 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$68.resource;
                try (Using<PolylineMaterialCesiumWriter> using$69 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$69.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$70 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$70.resource;
                        try (Using<ColorCesiumWriter> using$71 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$71.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(148, 21, 14, 38), ColorHelper.fromArgb(144, 187, 202, 163)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.0549019607843137, 0.149019607843137, 0.580392156862745), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.733333333333333, 0.792156862745098, 0.63921568627451, 0.564705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$72 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$72.resource;
            packet.writeId("sampled_polyline_material_polylineArrow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineArrow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$73 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$73.resource;
                try (Using<PolylineMaterialCesiumWriter> using$74 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$74.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$75 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$75.resource;
                        try (Using<ColorCesiumWriter> using$76 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$76.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(210, 133, 185, 224), ColorHelper.fromArgb(0, 197, 220, 83)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.52156862745098, 0.725490196078431, 0.87843137254902, 0.823529411764706), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.772549019607843, 0.862745098039216, 0.325490196078431, 0), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$77 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$77.resource;
            packet.writeId("sampled_polyline_material_polylineDash_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineDash_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$78 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$78.resource;
                try (Using<PolylineMaterialCesiumWriter> using$79 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$79.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$80 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$80.resource;
                        try (Using<ColorCesiumWriter> using$81 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$81.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(93, 134, 253, 246), ColorHelper.fromArgb(49, 71, 34, 114)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.525490196078431, 0.992156862745098, 0.964705882352941, 0.364705882352941), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.27843137254902, 0.133333333333333, 0.447058823529412, 0.192156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$82 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$82.resource;
            packet.writeId("sampled_polyline_material_polylineDash_gapColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineDash_gapColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$83 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$83.resource;
                try (Using<PolylineMaterialCesiumWriter> using$84 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$84.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$85 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$85.resource;
                        try (Using<ColorCesiumWriter> using$86 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$86.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(176, 127, 198, 205), ColorHelper.fromArgb(229, 96, 229, 43)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.gapColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.498039215686275, 0.776470588235294, 0.803921568627451, 0.690196078431373), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.gapColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.376470588235294, 0.898039215686275, 0.168627450980392, 0.898039215686275), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$87 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$87.resource;
            packet.writeId("sampled_polyline_material_polylineGlow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_polylineGlow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$88 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$88.resource;
                try (Using<PolylineMaterialCesiumWriter> using$89 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$89.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$90 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$90.resource;
                        try (Using<ColorCesiumWriter> using$91 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$91.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(91, 180, 230, 20), ColorHelper.fromArgb(27, 132, 53, 179)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.705882352941177, 0.901960784313726, 0.0784313725490196, 0.356862745098039), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.517647058823529, 0.207843137254902, 0.701960784313725, 0.105882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$92 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$92.resource;
            packet.writeId("sampled_polyline_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_image_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$93 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$93.resource;
                try (Using<PolylineMaterialCesiumWriter> using$94 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$94.resource;
                    try (Using<ImageMaterialCesiumWriter> using$95 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$95.resource;
                        try (Using<ColorCesiumWriter> using$96 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$96.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(89, 203, 189, 189), ColorHelper.fromArgb(142, 236, 68, 24)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.796078431372549, 0.741176470588235, 0.741176470588235, 0.349019607843137), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.925490196078431, 0.266666666666667, 0.0941176470588235, 0.556862745098039), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$97 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$97.resource;
            packet.writeId("sampled_polyline_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_grid_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$98 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$98.resource;
                try (Using<PolylineMaterialCesiumWriter> using$99 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$99.resource;
                    try (Using<GridMaterialCesiumWriter> using$100 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$100.resource;
                        try (Using<ColorCesiumWriter> using$101 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$101.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(26, 139, 216, 87), ColorHelper.fromArgb(47, 110, 243, 47)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.545098039215686, 0.847058823529412, 0.341176470588235, 0.101960784313725), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.431372549019608, 0.952941176470588, 0.184313725490196, 0.184313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$102 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$102.resource;
            packet.writeId("sampled_polyline_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_stripe_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$103 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$103.resource;
                try (Using<PolylineMaterialCesiumWriter> using$104 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$104.resource;
                    try (Using<StripeMaterialCesiumWriter> using$105 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$105.resource;
                        try (Using<ColorCesiumWriter> using$106 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$106.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(207, 206, 67, 229), ColorHelper.fromArgb(108, 106, 247, 25)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.807843137254902, 0.262745098039216, 0.898039215686275, 0.811764705882353), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.415686274509804, 0.968627450980392, 0.0980392156862745, 0.423529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$107 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$107.resource;
            packet.writeId("sampled_polyline_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_stripe_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$108 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$108.resource;
                try (Using<PolylineMaterialCesiumWriter> using$109 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$109.resource;
                    try (Using<StripeMaterialCesiumWriter> using$110 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$110.resource;
                        try (Using<ColorCesiumWriter> using$111 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$111.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(223, 109, 104, 120), ColorHelper.fromArgb(0, 130, 109, 249)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.407843137254902, 0.470588235294118, 0.874509803921569), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.427450980392157, 0.976470588235294, 0), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$112 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$112.resource;
            packet.writeId("sampled_polyline_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$113 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$113.resource;
                try (Using<PolylineMaterialCesiumWriter> using$114 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$114.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$115 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$115.resource;
                        try (Using<ColorCesiumWriter> using$116 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$116.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(147, 80, 106, 21), ColorHelper.fromArgb(238, 5, 79, 61)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.313725490196078, 0.415686274509804, 0.0823529411764706, 0.576470588235294), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0196078431372549, 0.309803921568627, 0.23921568627451, 0.933333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$117 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$117.resource;
            packet.writeId("sampled_polyline_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$118 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$118.resource;
                try (Using<PolylineMaterialCesiumWriter> using$119 = new Using<PolylineMaterialCesiumWriter>(w.openMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$119.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$120 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$120.resource;
                        try (Using<ColorCesiumWriter> using$121 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$121.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(46, 200, 60, 134), ColorHelper.fromArgb(201, 91, 32, 62)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.784313725490196, 0.235294117647059, 0.525490196078431, 0.180392156862745), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.356862745098039, 0.125490196078431, 0.243137254901961, 0.788235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$122 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$122.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_solidColor_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$123 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$123.resource;
                try (Using<PolylineMaterialCesiumWriter> using$124 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$124.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$125 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$125.resource;
                        try (Using<ColorCesiumWriter> using$126 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$126.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(138, 145, 62, 112), ColorHelper.fromArgb(7, 186, 129, 72)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.568627450980392, 0.243137254901961, 0.43921568627451, 0.541176470588235), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.729411764705882, 0.505882352941176, 0.282352941176471, 0.0274509803921569), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$127 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$127.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineOutline");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineOutline')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$128 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$128.resource;
                try (Using<PolylineMaterialCesiumWriter> using$129 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$129.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$130 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$130.resource;
                        try (Using<ColorCesiumWriter> using$131 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$131.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(106, 247, 124, 164), ColorHelper.fromArgb(82, 91, 114, 116)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(247, 124, 164, 106));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(91, 114, 116, 82));");
                        }
                        try (Using<ColorCesiumWriter> using$132 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$132.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(243, 35, 216, 157), ColorHelper.fromArgb(175, 111, 11, 143)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.outlineColor.getValue(documentStartDate)).toEqual(Color.fromBytes(35, 216, 157, 243));");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.outlineColor.getValue(documentStopDate)).toEqual(Color.fromBytes(111, 11, 143, 175));");
                        }
                        try (Using<DoubleCesiumWriter> using$133 = new Using<DoubleCesiumWriter>(m.openOutlineWidthProperty())) {
                            final DoubleCesiumWriter m2 = using$133.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(45494.0, 8666.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.outlineWidth.getValue(documentStartDate)).toEqual(45494.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.outlineWidth.getValue(documentStopDate)).toEqual(8666.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$134 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$134.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineArrow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineArrow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$135 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$135.resource;
                try (Using<PolylineMaterialCesiumWriter> using$136 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$136.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$137 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$137.resource;
                        try (Using<ColorCesiumWriter> using$138 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$138.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(146, 143, 46, 33), ColorHelper.fromArgb(93, 1, 147, 34)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(143, 46, 33, 146));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(1, 147, 34, 93));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$139 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$139.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineDash");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineDash')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$140 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$140.resource;
                try (Using<PolylineMaterialCesiumWriter> using$141 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$141.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$142 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$142.resource;
                        try (Using<ColorCesiumWriter> using$143 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$143.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(199, 64, 52, 179), ColorHelper.fromArgb(110, 251, 205, 86)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(64, 52, 179, 199));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(251, 205, 86, 110));");
                        }
                        try (Using<ColorCesiumWriter> using$144 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$144.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(23, 98, 214, 1), ColorHelper.fromArgb(207, 108, 132, 28)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.gapColor.getValue(documentStartDate)).toEqual(Color.fromBytes(98, 214, 1, 23));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.gapColor.getValue(documentStopDate)).toEqual(Color.fromBytes(108, 132, 28, 207));");
                        }
                        try (Using<DoubleCesiumWriter> using$145 = new Using<DoubleCesiumWriter>(m.openDashLengthProperty())) {
                            final DoubleCesiumWriter m2 = using$145.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(59636.0, 9250.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.dashLength.getValue(documentStartDate)).toEqual(59636.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.dashLength.getValue(documentStopDate)).toEqual(9250.0);");
                        }
                        try (Using<IntegerCesiumWriter> using$146 = new Using<IntegerCesiumWriter>(m.openDashPatternProperty())) {
                            final IntegerCesiumWriter m2 = using$146.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Integer> createList(33949, 58673));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.dashPattern.getValue(documentStartDate)).toEqual(33949);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.dashPattern.getValue(documentStopDate)).toEqual(58673);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$147 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$147.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineGlow");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineGlow')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$148 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$148.resource;
                try (Using<PolylineMaterialCesiumWriter> using$149 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$149.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$150 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$150.resource;
                        try (Using<ColorCesiumWriter> using$151 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$151.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(138, 253, 71, 171), ColorHelper.fromArgb(178, 112, 154, 76)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(253, 71, 171, 138));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(112, 154, 76, 178));");
                        }
                        try (Using<DoubleCesiumWriter> using$152 = new Using<DoubleCesiumWriter>(m.openGlowPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$152.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(8542.0, 54440.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.glowPower.getValue(documentStartDate)).toEqual(8542.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.glowPower.getValue(documentStopDate)).toEqual(54440.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$153 = new Using<DoubleCesiumWriter>(m.openTaperPowerProperty())) {
                            final DoubleCesiumWriter m2 = using$153.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(61950.0, 36891.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.taperPower.getValue(documentStartDate)).toEqual(61950.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.taperPower.getValue(documentStopDate)).toEqual(36891.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$154 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$154.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_image')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$155 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$155.resource;
                try (Using<PolylineMaterialCesiumWriter> using$156 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$156.resource;
                    try (Using<ImageMaterialCesiumWriter> using$157 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$157.resource;
                        try (Using<RepeatCesiumWriter> using$158 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$158.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(59796.0, 25065.0), new Rectangular(38054.0, 9108.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(59796, 25065));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(38054, 9108));");
                        }
                        try (Using<ColorCesiumWriter> using$159 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$159.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(151, 32, 24, 155), ColorHelper.fromArgb(92, 9, 142, 253)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(32, 24, 155, 151));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(9, 142, 253, 92));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$160 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$160.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_grid')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$161 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$161.resource;
                try (Using<PolylineMaterialCesiumWriter> using$162 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$162.resource;
                    try (Using<GridMaterialCesiumWriter> using$163 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$163.resource;
                        try (Using<ColorCesiumWriter> using$164 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$164.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(173, 206, 138, 53), ColorHelper.fromArgb(253, 20, 11, 131)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 138, 53, 173));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 11, 131, 253));");
                        }
                        try (Using<DoubleCesiumWriter> using$165 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$165.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(36676.0, 5143.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.cellAlpha.getValue(documentStartDate)).toEqual(36676.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5143.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$166 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$166.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(55344.0, 11736.0), new Rectangular(20410.0, 11343.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(55344, 11736));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(20410, 11343));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$167 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$167.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(22967.0, 31065.0), new Rectangular(59168.0, 51431.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(22967, 31065));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(59168, 51431));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$168 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$168.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(59000.0, 31974.0), new Rectangular(65334.0, 48383.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(59000, 31974));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(65334, 48383));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$169 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$169.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_stripe')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$170 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$170.resource;
                try (Using<PolylineMaterialCesiumWriter> using$171 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$171.resource;
                    try (Using<StripeMaterialCesiumWriter> using$172 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$172.resource;
                        try (Using<ColorCesiumWriter> using$173 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$173.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(230, 166, 16, 249), ColorHelper.fromArgb(216, 250, 177, 111)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(166, 16, 249, 230));");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(250, 177, 111, 216));");
                        }
                        try (Using<ColorCesiumWriter> using$174 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$174.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(206, 210, 161, 181), ColorHelper.fromArgb(224, 194, 73, 70)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(210, 161, 181, 206));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(194, 73, 70, 224));");
                        }
                        try (Using<DoubleCesiumWriter> using$175 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$175.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(43239.0, 47157.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.offset.getValue(documentStartDate)).toEqual(43239.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.offset.getValue(documentStopDate)).toEqual(47157.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$176 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$176.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(58315.0, 45308.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(documentStartDate)).toEqual(58315.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(documentStopDate)).toEqual(45308.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$177 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$177.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_checkerboard')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$178 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$178.resource;
                try (Using<PolylineMaterialCesiumWriter> using$179 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$179.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$180 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$180.resource;
                        try (Using<ColorCesiumWriter> using$181 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$181.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(160, 0, 159, 59), ColorHelper.fromArgb(165, 202, 33, 125)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(0, 159, 59, 160));");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(202, 33, 125, 165));");
                        }
                        try (Using<ColorCesiumWriter> using$182 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$182.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(24, 19, 37, 14), ColorHelper.fromArgb(84, 66, 150, 238)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(19, 37, 14, 24));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(66, 150, 238, 84));");
                        }
                        try (Using<RepeatCesiumWriter> using$183 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$183.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(15034.0, 58938.0), new Rectangular(62661.0, 23796.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(15034, 58938));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polyline.depthFailMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(62661, 23796));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$184 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$184.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineOutline_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineOutline_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$185 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$185.resource;
                try (Using<PolylineMaterialCesiumWriter> using$186 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$186.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$187 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$187.resource;
                        try (Using<ColorCesiumWriter> using$188 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$188.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(97, 156, 104, 206), ColorHelper.fromArgb(94, 133, 167, 193)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.407843137254902, 0.807843137254902, 0.380392156862745), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.52156862745098, 0.654901960784314, 0.756862745098039, 0.368627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$189 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$189.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineOutline_outlineColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineOutline_outlineColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$190 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$190.resource;
                try (Using<PolylineMaterialCesiumWriter> using$191 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$191.resource;
                    try (Using<PolylineOutlineMaterialCesiumWriter> using$192 = new Using<PolylineOutlineMaterialCesiumWriter>(w2.openPolylineOutlineProperty())) {
                        final PolylineOutlineMaterialCesiumWriter m = using$192.resource;
                        try (Using<ColorCesiumWriter> using$193 = new Using<ColorCesiumWriter>(m.openOutlineColorProperty())) {
                            final ColorCesiumWriter m2 = using$193.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(99, 171, 54, 155), ColorHelper.fromArgb(191, 156, 156, 76)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.211764705882353, 0.607843137254902, 0.388235294117647), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.611764705882353, 0.611764705882353, 0.298039215686275, 0.749019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$194 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$194.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineArrow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineArrow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$195 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$195.resource;
                try (Using<PolylineMaterialCesiumWriter> using$196 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$196.resource;
                    try (Using<PolylineArrowMaterialCesiumWriter> using$197 = new Using<PolylineArrowMaterialCesiumWriter>(w2.openPolylineArrowProperty())) {
                        final PolylineArrowMaterialCesiumWriter m = using$197.resource;
                        try (Using<ColorCesiumWriter> using$198 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$198.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(152, 223, 138, 59), ColorHelper.fromArgb(116, 186, 136, 105)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.874509803921569, 0.541176470588235, 0.231372549019608, 0.596078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.729411764705882, 0.533333333333333, 0.411764705882353, 0.454901960784314), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$199 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$199.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineDash_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineDash_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$200 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$200.resource;
                try (Using<PolylineMaterialCesiumWriter> using$201 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$201.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$202 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$202.resource;
                        try (Using<ColorCesiumWriter> using$203 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$203.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(198, 198, 21, 245), ColorHelper.fromArgb(227, 24, 164, 183)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.0823529411764706, 0.96078431372549, 0.776470588235294), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.643137254901961, 0.717647058823529, 0.890196078431372), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$204 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$204.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineDash_gapColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineDash_gapColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$205 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$205.resource;
                try (Using<PolylineMaterialCesiumWriter> using$206 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$206.resource;
                    try (Using<PolylineDashMaterialCesiumWriter> using$207 = new Using<PolylineDashMaterialCesiumWriter>(w2.openPolylineDashProperty())) {
                        final PolylineDashMaterialCesiumWriter m = using$207.resource;
                        try (Using<ColorCesiumWriter> using$208 = new Using<ColorCesiumWriter>(m.openGapColorProperty())) {
                            final ColorCesiumWriter m2 = using$208.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(205, 56, 103, 208), ColorHelper.fromArgb(6, 75, 157, 44)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.gapColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.219607843137255, 0.403921568627451, 0.815686274509804, 0.803921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.gapColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.294117647058824, 0.615686274509804, 0.172549019607843, 0.0235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$209 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$209.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_polylineGlow_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_polylineGlow_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$210 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$210.resource;
                try (Using<PolylineMaterialCesiumWriter> using$211 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$211.resource;
                    try (Using<PolylineGlowMaterialCesiumWriter> using$212 = new Using<PolylineGlowMaterialCesiumWriter>(w2.openPolylineGlowProperty())) {
                        final PolylineGlowMaterialCesiumWriter m = using$212.resource;
                        try (Using<ColorCesiumWriter> using$213 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$213.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(110, 43, 216, 247), ColorHelper.fromArgb(23, 51, 154, 240)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.168627450980392, 0.847058823529412, 0.968627450980392, 0.431372549019608), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.2, 0.603921568627451, 0.941176470588235, 0.0901960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$214 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$214.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_image_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$215 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$215.resource;
                try (Using<PolylineMaterialCesiumWriter> using$216 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$216.resource;
                    try (Using<ImageMaterialCesiumWriter> using$217 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$217.resource;
                        try (Using<ColorCesiumWriter> using$218 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$218.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(171, 250, 115, 84), ColorHelper.fromArgb(180, 142, 163, 40)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.980392156862745, 0.450980392156863, 0.329411764705882, 0.670588235294118), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.556862745098039, 0.63921568627451, 0.156862745098039, 0.705882352941177), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$219 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$219.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_grid_color')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$220 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$220.resource;
                try (Using<PolylineMaterialCesiumWriter> using$221 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$221.resource;
                    try (Using<GridMaterialCesiumWriter> using$222 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$222.resource;
                        try (Using<ColorCesiumWriter> using$223 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$223.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(152, 159, 155, 233), ColorHelper.fromArgb(247, 108, 247, 208)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.623529411764706, 0.607843137254902, 0.913725490196078, 0.596078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.423529411764706, 0.968627450980392, 0.815686274509804, 0.968627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$224 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$224.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$225 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$225.resource;
                try (Using<PolylineMaterialCesiumWriter> using$226 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$226.resource;
                    try (Using<StripeMaterialCesiumWriter> using$227 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$227.resource;
                        try (Using<ColorCesiumWriter> using$228 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$228.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(29, 218, 215, 179), ColorHelper.fromArgb(150, 240, 227, 238)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.854901960784314, 0.843137254901961, 0.701960784313725, 0.113725490196078), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.941176470588235, 0.890196078431372, 0.933333333333333, 0.588235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$229 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$229.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$230 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$230.resource;
                try (Using<PolylineMaterialCesiumWriter> using$231 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$231.resource;
                    try (Using<StripeMaterialCesiumWriter> using$232 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$232.resource;
                        try (Using<ColorCesiumWriter> using$233 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$233.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(56, 109, 222, 245), ColorHelper.fromArgb(44, 56, 216, 192)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.870588235294118, 0.96078431372549, 0.219607843137255), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.219607843137255, 0.847058823529412, 0.752941176470588, 0.172549019607843), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$234 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$234.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$235 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$235.resource;
                try (Using<PolylineMaterialCesiumWriter> using$236 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$236.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$237 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$237.resource;
                        try (Using<ColorCesiumWriter> using$238 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$238.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(209, 245, 24, 185), ColorHelper.fromArgb(14, 15, 114, 146)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.96078431372549, 0.0941176470588235, 0.725490196078431, 0.819607843137255), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.447058823529412, 0.572549019607843, 0.0549019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$239 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$239.resource;
            packet.writeId("sampled_polyline_depthFailMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polyline_depthFailMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolylineCesiumWriter> using$240 = new Using<PolylineCesiumWriter>(packet.openPolylineProperty())) {
                final PolylineCesiumWriter w = using$240.resource;
                try (Using<PolylineMaterialCesiumWriter> using$241 = new Using<PolylineMaterialCesiumWriter>(w.openDepthFailMaterialProperty())) {
                    final PolylineMaterialCesiumWriter w2 = using$241.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$242 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$242.resource;
                        try (Using<ColorCesiumWriter> using$243 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$243.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(98, 85, 11, 226), ColorHelper.fromArgb(137, 60, 187, 192)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.333333333333333, 0.0431372549019608, 0.886274509803922, 0.384313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polyline.depthFailMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.235294117647059, 0.733333333333333, 0.752941176470588, 0.537254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
    }

    private final void writeSampledValuesIndividualPolylineVolume() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_polylineVolume_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_solidColor_color')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$1 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(194, 6, 224, 14), ColorHelper.fromArgb(179, 104, 201, 148)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.87843137254902, 0.0549019607843137, 0.76078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.407843137254902, 0.788235294117647, 0.580392156862745, 0.701960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_polylineVolume_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_image')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$6 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(54883.0, 39382.0), new Rectangular(42188.0, 27300.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(54883, 39382));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(42188, 27300));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(141, 145, 236, 4), ColorHelper.fromArgb(191, 126, 69, 220)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 236, 4, 141));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(126, 69, 220, 191));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_polylineVolume_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_grid')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$12 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(46, 98, 87, 231), ColorHelper.fromArgb(105, 222, 91, 113)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(98, 87, 231, 46));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(222, 91, 113, 105));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(32451.0, 49677.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.cellAlpha.getValue(documentStartDate)).toEqual(32451.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.cellAlpha.getValue(documentStopDate)).toEqual(49677.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(14089.0, 52279.0), new Rectangular(59996.0, 36842.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(14089, 52279));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(59996, 36842));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(49037.0, 8639.0), new Rectangular(59785.0, 47337.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(49037, 8639));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(59785, 47337));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(40768.0, 50335.0), new Rectangular(6098.0, 48919.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(40768, 50335));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(6098, 48919));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_polylineVolume_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_stripe')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$21 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(54, 206, 34, 152), ColorHelper.fromArgb(39, 182, 38, 96)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(206, 34, 152, 54));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(182, 38, 96, 39));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(107, 84, 117, 45), ColorHelper.fromArgb(177, 79, 76, 73)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(84, 117, 45, 107));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(79, 76, 73, 177));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(18479.0, 19855.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.offset.getValue(documentStartDate)).toEqual(18479.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.offset.getValue(documentStopDate)).toEqual(19855.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(36294.0, 34071.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(documentStartDate)).toEqual(36294.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(documentStopDate)).toEqual(34071.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_polylineVolume_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_checkerboard')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$29 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(241, 185, 168, 171), ColorHelper.fromArgb(164, 111, 194, 153)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(185, 168, 171, 241));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(111, 194, 153, 164));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(117, 84, 96, 248), ColorHelper.fromArgb(196, 129, 55, 81)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(84, 96, 248, 117));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(129, 55, 81, 196));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(45209.0, 63152.0), new Rectangular(42552.0, 3238.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(45209, 63152));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.polylineVolume.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(42552, 3238));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_polylineVolume_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_image_color')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$36 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(58, 133, 190, 137), ColorHelper.fromArgb(18, 202, 49, 144)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.52156862745098, 0.745098039215686, 0.537254901960784, 0.227450980392157), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.192156862745098, 0.564705882352941, 0.0705882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_polylineVolume_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_grid_color')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$41 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(166, 70, 139, 52), ColorHelper.fromArgb(92, 98, 98, 171)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.274509803921569, 0.545098039215686, 0.203921568627451, 0.650980392156863), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.384313725490196, 0.384313725490196, 0.670588235294118, 0.36078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_polylineVolume_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_stripe_evenColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$46 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(210, 15, 87, 214), ColorHelper.fromArgb(231, 214, 63, 145)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.341176470588235, 0.83921568627451, 0.823529411764706), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.83921568627451, 0.247058823529412, 0.568627450980392, 0.905882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_polylineVolume_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_stripe_oddColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$51 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(31, 217, 79, 210), ColorHelper.fromArgb(155, 249, 144, 198)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.850980392156863, 0.309803921568627, 0.823529411764706, 0.12156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.976470588235294, 0.564705882352941, 0.776470588235294, 0.607843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_polylineVolume_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$56 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(144, 101, 183, 249), ColorHelper.fromArgb(206, 99, 145, 6)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.396078431372549, 0.717647058823529, 0.976470588235294, 0.564705882352941), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.388235294117647, 0.568627450980392, 0.0235294117647059, 0.807843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_polylineVolume_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$61 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(46, 17, 203, 147), ColorHelper.fromArgb(98, 147, 133, 159)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.796078431372549, 0.576470588235294, 0.180392156862745), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.polylineVolume.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.576470588235294, 0.52156862745098, 0.623529411764706, 0.384313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_polylineVolume_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_polylineVolume_outlineColor_rgbaf')).toBeDefined();");
            try (Using<PolylineVolumeCesiumWriter> using$66 = new Using<PolylineVolumeCesiumWriter>(packet.openPolylineVolumeProperty())) {
                final PolylineVolumeCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(217, 116, 172, 94), ColorHelper.fromArgb(242, 61, 134, 34)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.454901960784314, 0.674509803921569, 0.368627450980392, 0.850980392156863), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.polylineVolume.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.23921568627451, 0.525490196078431, 0.133333333333333, 0.949019607843137), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualRectangle() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_rectangle_coordinates_wsenDegrees");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_coordinates_wsenDegrees')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$1 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$1.resource;
                try (Using<RectangleCoordinatesCesiumWriter> using$2 = new Using<RectangleCoordinatesCesiumWriter>(w.openCoordinatesProperty())) {
                    final RectangleCoordinatesCesiumWriter w2 = using$2.resource;
                    w2.writeWsenDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<CartographicExtent> createList(new CartographicExtent(35.0, 18.0, 38.0, 15.0), new CartographicExtent(38.0, 1.0, 12.0, 30.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(documentStartDate)).toEqual(Rectangle.fromDegrees(35, 18, 38, 15));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.coordinates.getValue(documentStopDate)).toEqual(Rectangle.fromDegrees(38, 1, 12, 30));");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_rectangle_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_solidColor_color')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$4 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$4.resource;
                try (Using<MaterialCesiumWriter> using$5 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$5.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$6 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$6.resource;
                        try (Using<ColorCesiumWriter> using$7 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$7.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(25, 52, 62, 147), ColorHelper.fromArgb(243, 233, 212, 194)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.203921568627451, 0.243137254901961, 0.576470588235294, 0.0980392156862745), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.913725490196078, 0.831372549019608, 0.76078431372549, 0.952941176470588), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("sampled_rectangle_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_image')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$9 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<ImageMaterialCesiumWriter> using$11 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$11.resource;
                        try (Using<RepeatCesiumWriter> using$12 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$12.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(3711.0, 44302.0), new Rectangular(52318.0, 60108.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(3711, 44302));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(52318, 60108));");
                        }
                        try (Using<ColorCesiumWriter> using$13 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$13.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(190, 49, 142, 97), ColorHelper.fromArgb(118, 189, 250, 238)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(49, 142, 97, 190));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(189, 250, 238, 118));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$14 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$14.resource;
            packet.writeId("sampled_rectangle_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_grid')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$15 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$15.resource;
                try (Using<MaterialCesiumWriter> using$16 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$16.resource;
                    try (Using<GridMaterialCesiumWriter> using$17 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$17.resource;
                        try (Using<ColorCesiumWriter> using$18 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$18.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(82, 95, 53, 115), ColorHelper.fromArgb(187, 204, 71, 209)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(95, 53, 115, 82));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(204, 71, 209, 187));");
                        }
                        try (Using<DoubleCesiumWriter> using$19 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$19.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(48813.0, 21269.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(documentStartDate)).toEqual(48813.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.cellAlpha.getValue(documentStopDate)).toEqual(21269.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$20 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(22945.0, 32857.0), new Rectangular(55972.0, 34522.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(22945, 32857));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(55972, 34522));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$21 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(37146.0, 39825.0), new Rectangular(64636.0, 13052.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(37146, 39825));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(64636, 13052));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$22 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(8882.0, 38690.0), new Rectangular(8857.0, 21794.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(8882, 38690));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(8857, 21794));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$23 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$23.resource;
            packet.writeId("sampled_rectangle_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_stripe')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$24 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$24.resource;
                try (Using<MaterialCesiumWriter> using$25 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$25.resource;
                    try (Using<StripeMaterialCesiumWriter> using$26 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$26.resource;
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(5, 243, 96, 246), ColorHelper.fromArgb(87, 74, 28, 207)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 96, 246, 5));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(74, 28, 207, 87));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(10, 147, 18, 134), ColorHelper.fromArgb(114, 59, 151, 72)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(147, 18, 134, 10));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(59, 151, 72, 114));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(57328.0, 2602.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(documentStartDate)).toEqual(57328.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.offset.getValue(documentStopDate)).toEqual(2602.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(29729.0, 30206.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(29729.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(30206.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("sampled_rectangle_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_checkerboard')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$32 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(24, 142, 184, 89), ColorHelper.fromArgb(224, 200, 249, 166)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(142, 184, 89, 24));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(200, 249, 166, 224));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(244, 237, 53, 233), ColorHelper.fromArgb(150, 101, 61, 234)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(237, 53, 233, 244));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(101, 61, 234, 150));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(44089.0, 8876.0), new Rectangular(60682.0, 18669.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(44089, 8876));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.rectangle.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(60682, 18669));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("sampled_rectangle_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_image_color')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$39 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(1, 141, 26, 197), ColorHelper.fromArgb(101, 4, 246, 151)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.552941176470588, 0.101960784313725, 0.772549019607843, 0.00392156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.964705882352941, 0.592156862745098, 0.396078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("sampled_rectangle_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_grid_color')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$44 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(43, 125, 98, 239), ColorHelper.fromArgb(135, 100, 193, 116)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.490196078431373, 0.384313725490196, 0.937254901960784, 0.168627450980392), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.756862745098039, 0.454901960784314, 0.529411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("sampled_rectangle_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_stripe_evenColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$49 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(21, 82, 198, 58), ColorHelper.fromArgb(93, 237, 185, 1)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.32156862745098, 0.776470588235294, 0.227450980392157, 0.0823529411764706), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.929411764705882, 0.725490196078431, 0.00392156862745098, 0.364705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("sampled_rectangle_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_stripe_oddColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$54 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(236, 251, 212, 211), ColorHelper.fromArgb(125, 37, 4, 97)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.984313725490196, 0.831372549019608, 0.827450980392157, 0.925490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.0156862745098039, 0.380392156862745, 0.490196078431373), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("sampled_rectangle_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$59 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(44, 73, 212, 47), ColorHelper.fromArgb(60, 152, 154, 177)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.286274509803922, 0.831372549019608, 0.184313725490196, 0.172549019607843), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.596078431372549, 0.603921568627451, 0.694117647058824, 0.235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("sampled_rectangle_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$64 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(17, 237, 235, 69), ColorHelper.fromArgb(130, 105, 32, 129)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.929411764705882, 0.92156862745098, 0.270588235294118, 0.0666666666666667), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.rectangle.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.411764705882353, 0.125490196078431, 0.505882352941176, 0.509803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("sampled_rectangle_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangle_outlineColor_rgbaf')).toBeDefined();");
            try (Using<RectangleCesiumWriter> using$69 = new Using<RectangleCesiumWriter>(packet.openRectangleProperty())) {
                final RectangleCesiumWriter w = using$69.resource;
                try (Using<ColorCesiumWriter> using$70 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$70.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(181, 250, 119, 192), ColorHelper.fromArgb(97, 140, 242, 139)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.980392156862745, 0.466666666666667, 0.752941176470588, 0.709803921568627), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.rectangle.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.549019607843137, 0.949019607843137, 0.545098039215686, 0.380392156862745), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualTileset() {}

    private final void writeSampledValuesIndividualWall() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_wall_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_solidColor_color')).toBeDefined();");
            try (Using<WallCesiumWriter> using$1 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(208, 98, 246, 211), ColorHelper.fromArgb(14, 2, 83, 243)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.384313725490196, 0.964705882352941, 0.827450980392157, 0.815686274509804), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00784313725490196, 0.325490196078431, 0.952941176470588, 0.0549019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_wall_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_image')).toBeDefined();");
            try (Using<WallCesiumWriter> using$6 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(13369.0, 38196.0), new Rectangular(36874.0, 55696.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(13369, 38196));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(36874, 55696));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(83, 1, 152, 139), ColorHelper.fromArgb(69, 127, 110, 56)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(1, 152, 139, 83));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(127, 110, 56, 69));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_wall_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_grid')).toBeDefined();");
            try (Using<WallCesiumWriter> using$12 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(43, 243, 153, 88), ColorHelper.fromArgb(75, 169, 159, 82)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(243, 153, 88, 43));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(169, 159, 82, 75));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(32179.0, 55901.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(documentStartDate)).toEqual(32179.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.cellAlpha.getValue(documentStopDate)).toEqual(55901.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(46941.0, 30391.0), new Rectangular(51565.0, 6089.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(46941, 30391));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(51565, 6089));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(35543.0, 16778.0), new Rectangular(32904.0, 18048.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(35543, 16778));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(32904, 18048));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(2955.0, 19723.0), new Rectangular(58723.0, 15333.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(2955, 19723));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(58723, 15333));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_wall_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_stripe')).toBeDefined();");
            try (Using<WallCesiumWriter> using$21 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(70, 204, 233, 122), ColorHelper.fromArgb(84, 215, 44, 132)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(204, 233, 122, 70));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(215, 44, 132, 84));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(253, 20, 6, 10), ColorHelper.fromArgb(117, 96, 118, 90)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(20, 6, 10, 253));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(96, 118, 90, 117));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(63629.0, 38486.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(documentStartDate)).toEqual(63629.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.offset.getValue(documentStopDate)).toEqual(38486.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(41791.0, 56258.0));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(41791.0);");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(56258.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_wall_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_checkerboard')).toBeDefined();");
            try (Using<WallCesiumWriter> using$29 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(42, 38, 200, 78), ColorHelper.fromArgb(135, 115, 149, 62)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(38, 200, 78, 42));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(115, 149, 62, 135));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(56, 79, 103, 165), ColorHelper.fromArgb(217, 201, 220, 190)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(79, 103, 165, 56));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(201, 220, 190, 217));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(30510.0, 28535.0), new Rectangular(22105.0, 29014.0)));
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(30510, 28535));");
                            TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.wall.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(22105, 29014));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_wall_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_image_color')).toBeDefined();");
            try (Using<WallCesiumWriter> using$36 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(187, 149, 192, 150), ColorHelper.fromArgb(117, 79, 252, 20)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.584313725490196, 0.752941176470588, 0.588235294117647, 0.733333333333333), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.309803921568627, 0.988235294117647, 0.0784313725490196, 0.458823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_wall_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_grid_color')).toBeDefined();");
            try (Using<WallCesiumWriter> using$41 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(245, 71, 140, 246), ColorHelper.fromArgb(104, 181, 212, 173)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.27843137254902, 0.549019607843137, 0.964705882352941, 0.96078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.709803921568627, 0.831372549019608, 0.67843137254902, 0.407843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_wall_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_stripe_evenColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$46 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(43, 23, 62, 137), ColorHelper.fromArgb(29, 99, 216, 66)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0901960784313725, 0.243137254901961, 0.537254901960784, 0.168627450980392), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.388235294117647, 0.847058823529412, 0.258823529411765, 0.113725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_wall_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_stripe_oddColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$51 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(169, 88, 5, 14), ColorHelper.fromArgb(81, 177, 227, 97)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.345098039215686, 0.0196078431372549, 0.0549019607843137, 0.662745098039216), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.694117647058824, 0.890196078431372, 0.380392156862745, 0.317647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_wall_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$56 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(61, 171, 118, 113), ColorHelper.fromArgb(238, 80, 23, 159)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.670588235294118, 0.462745098039216, 0.443137254901961, 0.23921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.313725490196078, 0.0901960784313725, 0.623529411764706, 0.933333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_wall_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<WallCesiumWriter> using$61 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(146, 47, 185, 228), ColorHelper.fromArgb(198, 190, 111, 156)));
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.184313725490196, 0.725490196078431, 0.894117647058824, 0.572549019607843), 1e-14);");
                            TextWriterHelper.writeLine(m_assertionsWriter,
                                    "    expect(e.wall.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.745098039215686, 0.435294117647059, 0.611764705882353, 0.776470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_wall_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_wall_outlineColor_rgbaf')).toBeDefined();");
            try (Using<WallCesiumWriter> using$66 = new Using<WallCesiumWriter>(packet.openWallProperty())) {
                final WallCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(101, 238, 27, 16), ColorHelper.fromArgb(182, 230, 111, 90)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.933333333333333, 0.105882352941176, 0.0627450980392157, 0.396078431372549), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.wall.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.901960784313726, 0.435294117647059, 0.352941176470588, 0.713725490196078), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualConicSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_conicSensor_intersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_intersectionColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$1 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(55, 173, 74, 170), ColorHelper.fromArgb(68, 84, 99, 60)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.67843137254902, 0.290196078431373, 0.666666666666667, 0.215686274509804), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.329411764705882, 0.388235294117647, 0.235294117647059, 0.266666666666667), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$4 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$4.resource;
                try (Using<MaterialCesiumWriter> using$5 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$5.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$6 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$6.resource;
                        try (Using<ColorCesiumWriter> using$7 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$7.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(250, 104, 200, 224), ColorHelper.fromArgb(75, 165, 234, 31)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.407843137254902, 0.784313725490196, 0.87843137254902, 0.980392156862745), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.647058823529412, 0.917647058823529, 0.12156862745098, 0.294117647058824), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$9 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<ImageMaterialCesiumWriter> using$11 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$11.resource;
                        try (Using<RepeatCesiumWriter> using$12 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$12.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(26885.0, 9577.0), new Rectangular(43369.0, 23209.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(26885, 9577));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(43369, 23209));");
                        }
                        try (Using<ColorCesiumWriter> using$13 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$13.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(221, 190, 252, 218), ColorHelper.fromArgb(68, 110, 253, 27)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(190, 252, 218, 221));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(110, 253, 27, 68));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$14 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$14.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$15 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$15.resource;
                try (Using<MaterialCesiumWriter> using$16 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$16.resource;
                    try (Using<GridMaterialCesiumWriter> using$17 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$17.resource;
                        try (Using<ColorCesiumWriter> using$18 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$18.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(149, 78, 27, 189), ColorHelper.fromArgb(252, 17, 205, 226)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(78, 27, 189, 149));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(17, 205, 226, 252));");
                        }
                        try (Using<DoubleCesiumWriter> using$19 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$19.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(3298.0, 62899.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(3298.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(62899.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$20 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(29248.0, 29298.0), new Rectangular(10801.0, 50474.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(29248, 29298));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(10801, 50474));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$21 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(29571.0, 1651.0), new Rectangular(24960.0, 22113.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(29571, 1651));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(24960, 22113));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$22 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(55103.0, 11223.0), new Rectangular(45946.0, 59571.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(55103, 11223));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(45946, 59571));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$23 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$23.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$24 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$24.resource;
                try (Using<MaterialCesiumWriter> using$25 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$25.resource;
                    try (Using<StripeMaterialCesiumWriter> using$26 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$26.resource;
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(28, 5, 144, 249), ColorHelper.fromArgb(252, 83, 107, 130)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(5, 144, 249, 28));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(83, 107, 130, 252));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(245, 228, 116, 212), ColorHelper.fromArgb(118, 59, 44, 249)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(228, 116, 212, 245));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(59, 44, 249, 118));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(51637.0, 63711.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(51637.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(63711.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(48031.0, 63777.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(48031.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(63777.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$32 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(131, 160, 182, 11), ColorHelper.fromArgb(192, 30, 29, 80)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(160, 182, 11, 131));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(30, 29, 80, 192));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(49, 7, 148, 122), ColorHelper.fromArgb(36, 136, 179, 0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(7, 148, 122, 49));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(136, 179, 0, 36));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(23744.0, 47196.0), new Rectangular(16577.0, 25920.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(23744, 47196));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(16577, 25920));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$39 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(47, 165, 76, 103), ColorHelper.fromArgb(76, 109, 122, 68)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.647058823529412, 0.298039215686275, 0.403921568627451, 0.184313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.427450980392157, 0.47843137254902, 0.266666666666667, 0.298039215686275), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$44 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(28, 244, 37, 67), ColorHelper.fromArgb(60, 66, 2, 230)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.956862745098039, 0.145098039215686, 0.262745098039216, 0.109803921568627), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.258823529411765, 0.00784313725490196, 0.901960784313726, 0.235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$49 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(52, 169, 73, 17), ColorHelper.fromArgb(168, 6, 134, 76)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.662745098039216, 0.286274509803922, 0.0666666666666667, 0.203921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.525490196078431, 0.298039215686275, 0.658823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$54 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(253, 193, 24, 221), ColorHelper.fromArgb(97, 15, 36, 165)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.756862745098039, 0.0941176470588235, 0.866666666666667, 0.992156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0588235294117647, 0.141176470588235, 0.647058823529412, 0.380392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$59 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(241, 81, 79, 161), ColorHelper.fromArgb(164, 45, 66, 77)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.317647058823529, 0.309803921568627, 0.631372549019608, 0.945098039215686), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.176470588235294, 0.258823529411765, 0.301960784313725, 0.643137254901961), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("sampled_conicSensor_lateralSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_lateralSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$64 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(85, 51, 227, 60), ColorHelper.fromArgb(207, 158, 92, 83)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.890196078431372, 0.235294117647059, 0.333333333333333), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.619607843137255, 0.36078431372549, 0.325490196078431, 0.811764705882353), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$69 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$69.resource;
                try (Using<MaterialCesiumWriter> using$70 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$70.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$71 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$71.resource;
                        try (Using<ColorCesiumWriter> using$72 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$72.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(65, 51, 21, 130), ColorHelper.fromArgb(146, 230, 151, 213)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.2, 0.0823529411764706, 0.509803921568627, 0.254901960784314), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.901960784313726, 0.592156862745098, 0.835294117647059, 0.572549019607843), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$73 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$73.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$74 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$74.resource;
                try (Using<MaterialCesiumWriter> using$75 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$75.resource;
                    try (Using<ImageMaterialCesiumWriter> using$76 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$76.resource;
                        try (Using<RepeatCesiumWriter> using$77 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$77.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(15751.0, 40509.0), new Rectangular(35728.0, 34187.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(15751, 40509));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(35728, 34187));");
                        }
                        try (Using<ColorCesiumWriter> using$78 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$78.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(4, 146, 78, 244), ColorHelper.fromArgb(242, 29, 181, 189)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(146, 78, 244, 4));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(29, 181, 189, 242));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$79 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$79.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$80 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$80.resource;
                try (Using<MaterialCesiumWriter> using$81 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$81.resource;
                    try (Using<GridMaterialCesiumWriter> using$82 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$82.resource;
                        try (Using<ColorCesiumWriter> using$83 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$83.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(240, 73, 204, 84), ColorHelper.fromArgb(80, 52, 49, 65)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(73, 204, 84, 240));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(52, 49, 65, 80));");
                        }
                        try (Using<DoubleCesiumWriter> using$84 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$84.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(24247.0, 16802.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(24247.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(16802.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$85 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$85.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(27080.0, 64105.0), new Rectangular(2556.0, 11273.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(27080, 64105));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(2556, 11273));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$86 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$86.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(56653.0, 64989.0), new Rectangular(16857.0, 36929.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(56653, 64989));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(16857, 36929));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$87 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$87.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(44206.0, 26796.0), new Rectangular(38284.0, 28309.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(44206, 26796));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(38284, 28309));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$88 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$88.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$89 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$89.resource;
                try (Using<MaterialCesiumWriter> using$90 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$90.resource;
                    try (Using<StripeMaterialCesiumWriter> using$91 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$91.resource;
                        try (Using<ColorCesiumWriter> using$92 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$92.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(119, 166, 158, 42), ColorHelper.fromArgb(181, 52, 206, 201)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(166, 158, 42, 119));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(52, 206, 201, 181));");
                        }
                        try (Using<ColorCesiumWriter> using$93 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$93.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(102, 103, 139, 237), ColorHelper.fromArgb(235, 35, 89, 140)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(103, 139, 237, 102));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(35, 89, 140, 235));");
                        }
                        try (Using<DoubleCesiumWriter> using$94 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$94.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(50863.0, 48603.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(50863.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(48603.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$95 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$95.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(52624.0, 10786.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(52624.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(10786.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$96 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$96.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$97 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$97.resource;
                try (Using<MaterialCesiumWriter> using$98 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$98.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$99 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$99.resource;
                        try (Using<ColorCesiumWriter> using$100 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$100.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(201, 60, 54, 248), ColorHelper.fromArgb(149, 127, 230, 253)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(60, 54, 248, 201));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(127, 230, 253, 149));");
                        }
                        try (Using<ColorCesiumWriter> using$101 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$101.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(51, 28, 77, 71), ColorHelper.fromArgb(32, 100, 176, 204)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(28, 77, 71, 51));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(100, 176, 204, 32));");
                        }
                        try (Using<RepeatCesiumWriter> using$102 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$102.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(43465.0, 4521.0), new Rectangular(27484.0, 58219.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(43465, 4521));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(27484, 58219));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$103 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$103.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$104 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$104.resource;
                try (Using<MaterialCesiumWriter> using$105 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$105.resource;
                    try (Using<ImageMaterialCesiumWriter> using$106 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$106.resource;
                        try (Using<ColorCesiumWriter> using$107 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$107.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(141, 223, 63, 131), ColorHelper.fromArgb(181, 0, 121, 41)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.874509803921569, 0.247058823529412, 0.513725490196078, 0.552941176470588), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0, 0.474509803921569, 0.16078431372549, 0.709803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$108 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$108.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$109 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$109.resource;
                try (Using<MaterialCesiumWriter> using$110 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$110.resource;
                    try (Using<GridMaterialCesiumWriter> using$111 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$111.resource;
                        try (Using<ColorCesiumWriter> using$112 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$112.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(143, 146, 89, 90), ColorHelper.fromArgb(117, 248, 89, 139)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.572549019607843, 0.349019607843137, 0.352941176470588, 0.56078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.972549019607843, 0.349019607843137, 0.545098039215686, 0.458823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$113 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$113.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$114 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$114.resource;
                try (Using<MaterialCesiumWriter> using$115 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$115.resource;
                    try (Using<StripeMaterialCesiumWriter> using$116 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$116.resource;
                        try (Using<ColorCesiumWriter> using$117 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$117.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(74, 210, 223, 199), ColorHelper.fromArgb(122, 76, 142, 9)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.823529411764706, 0.874509803921569, 0.780392156862745, 0.290196078431373), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.298039215686275, 0.556862745098039, 0.0352941176470588, 0.47843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$118 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$118.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$119 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$119.resource;
                try (Using<MaterialCesiumWriter> using$120 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$120.resource;
                    try (Using<StripeMaterialCesiumWriter> using$121 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$121.resource;
                        try (Using<ColorCesiumWriter> using$122 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$122.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(195, 104, 117, 144), ColorHelper.fromArgb(188, 46, 126, 122)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.407843137254902, 0.458823529411765, 0.564705882352941, 0.764705882352941), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.180392156862745, 0.494117647058824, 0.47843137254902, 0.737254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$123 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$123.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$124 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$124.resource;
                try (Using<MaterialCesiumWriter> using$125 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$125.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$126 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$126.resource;
                        try (Using<ColorCesiumWriter> using$127 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$127.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(79, 79, 114, 136), ColorHelper.fromArgb(6, 0, 98, 143)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.309803921568627, 0.447058823529412, 0.533333333333333, 0.309803921568627), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0, 0.384313725490196, 0.56078431372549, 0.0235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$128 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$128.resource;
            packet.writeId("sampled_conicSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$129 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$129.resource;
                try (Using<MaterialCesiumWriter> using$130 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$130.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$131 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$131.resource;
                        try (Using<ColorCesiumWriter> using$132 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$132.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(138, 31, 50, 200), ColorHelper.fromArgb(195, 37, 10, 227)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.12156862745098, 0.196078431372549, 0.784313725490196, 0.541176470588235), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.145098039215686, 0.0392156862745098, 0.890196078431372, 0.764705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$133 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$133.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$134 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$134.resource;
                try (Using<MaterialCesiumWriter> using$135 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$135.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$136 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$136.resource;
                        try (Using<ColorCesiumWriter> using$137 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$137.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(227, 19, 240, 142), ColorHelper.fromArgb(105, 74, 97, 194)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.941176470588235, 0.556862745098039, 0.890196078431372), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.290196078431373, 0.380392156862745, 0.76078431372549, 0.411764705882353), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$138 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$138.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$139 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$139.resource;
                try (Using<MaterialCesiumWriter> using$140 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$140.resource;
                    try (Using<ImageMaterialCesiumWriter> using$141 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$141.resource;
                        try (Using<RepeatCesiumWriter> using$142 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$142.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(60426.0, 50668.0), new Rectangular(37349.0, 39057.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(60426, 50668));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(37349, 39057));");
                        }
                        try (Using<ColorCesiumWriter> using$143 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$143.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(33, 219, 106, 121), ColorHelper.fromArgb(9, 231, 17, 163)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(219, 106, 121, 33));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(231, 17, 163, 9));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$144 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$144.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$145 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$145.resource;
                try (Using<MaterialCesiumWriter> using$146 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$146.resource;
                    try (Using<GridMaterialCesiumWriter> using$147 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$147.resource;
                        try (Using<ColorCesiumWriter> using$148 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$148.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(189, 95, 6, 140), ColorHelper.fromArgb(20, 8, 141, 87)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(95, 6, 140, 189));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(8, 141, 87, 20));");
                        }
                        try (Using<DoubleCesiumWriter> using$149 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$149.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(22274.0, 42079.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(22274.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(42079.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$150 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$150.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(1497.0, 17669.0), new Rectangular(52287.0, 29644.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(1497, 17669));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(52287, 29644));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$151 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$151.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(49813.0, 39106.0), new Rectangular(56035.0, 42714.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(49813, 39106));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(56035, 42714));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$152 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$152.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(1548.0, 39430.0), new Rectangular(20317.0, 63823.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(1548, 39430));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(20317, 63823));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$153 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$153.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$154 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$154.resource;
                try (Using<MaterialCesiumWriter> using$155 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$155.resource;
                    try (Using<StripeMaterialCesiumWriter> using$156 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$156.resource;
                        try (Using<ColorCesiumWriter> using$157 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$157.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(165, 82, 72, 9), ColorHelper.fromArgb(152, 19, 34, 239)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(82, 72, 9, 165));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(19, 34, 239, 152));");
                        }
                        try (Using<ColorCesiumWriter> using$158 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$158.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(171, 69, 252, 0), ColorHelper.fromArgb(7, 156, 96, 221)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(69, 252, 0, 171));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(156, 96, 221, 7));");
                        }
                        try (Using<DoubleCesiumWriter> using$159 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$159.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(50512.0, 37692.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(50512.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(37692.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$160 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$160.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(10637.0, 26810.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(10637.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(26810.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$161 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$161.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$162 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$162.resource;
                try (Using<MaterialCesiumWriter> using$163 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$163.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$164 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$164.resource;
                        try (Using<ColorCesiumWriter> using$165 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$165.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(37, 19, 184, 118), ColorHelper.fromArgb(36, 20, 185, 173)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(19, 184, 118, 37));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 185, 173, 36));");
                        }
                        try (Using<ColorCesiumWriter> using$166 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$166.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(53, 161, 60, 224), ColorHelper.fromArgb(143, 85, 151, 170)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(161, 60, 224, 53));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(85, 151, 170, 143));");
                        }
                        try (Using<RepeatCesiumWriter> using$167 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$167.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(59856.0, 38121.0), new Rectangular(64609.0, 1020.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(59856, 38121));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(64609, 1020));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$168 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$168.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$169 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$169.resource;
                try (Using<MaterialCesiumWriter> using$170 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$170.resource;
                    try (Using<ImageMaterialCesiumWriter> using$171 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$171.resource;
                        try (Using<ColorCesiumWriter> using$172 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$172.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(49, 198, 203, 230), ColorHelper.fromArgb(179, 68, 89, 150)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.796078431372549, 0.901960784313726, 0.192156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.266666666666667, 0.349019607843137, 0.588235294117647, 0.701960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$173 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$173.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$174 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$174.resource;
                try (Using<MaterialCesiumWriter> using$175 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$175.resource;
                    try (Using<GridMaterialCesiumWriter> using$176 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$176.resource;
                        try (Using<ColorCesiumWriter> using$177 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$177.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(91, 2, 133, 38), ColorHelper.fromArgb(48, 159, 72, 4)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00784313725490196, 0.52156862745098, 0.149019607843137, 0.356862745098039), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.623529411764706, 0.282352941176471, 0.0156862745098039, 0.188235294117647), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$178 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$178.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$179 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$179.resource;
                try (Using<MaterialCesiumWriter> using$180 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$180.resource;
                    try (Using<StripeMaterialCesiumWriter> using$181 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$181.resource;
                        try (Using<ColorCesiumWriter> using$182 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$182.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(34, 38, 152, 93), ColorHelper.fromArgb(86, 238, 225, 218)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.149019607843137, 0.596078431372549, 0.364705882352941, 0.133333333333333), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.933333333333333, 0.882352941176471, 0.854901960784314, 0.337254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$183 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$183.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$184 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$184.resource;
                try (Using<MaterialCesiumWriter> using$185 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$185.resource;
                    try (Using<StripeMaterialCesiumWriter> using$186 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$186.resource;
                        try (Using<ColorCesiumWriter> using$187 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$187.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(7, 96, 13, 184), ColorHelper.fromArgb(236, 55, 243, 44)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.376470588235294, 0.0509803921568627, 0.72156862745098, 0.0274509803921569), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.952941176470588, 0.172549019607843, 0.925490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$188 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$188.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$189 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$189.resource;
                try (Using<MaterialCesiumWriter> using$190 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$190.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$191 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$191.resource;
                        try (Using<ColorCesiumWriter> using$192 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$192.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(50, 17, 200, 31), ColorHelper.fromArgb(196, 76, 237, 74)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.784313725490196, 0.12156862745098, 0.196078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.298039215686275, 0.929411764705882, 0.290196078431373, 0.768627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$193 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$193.resource;
            packet.writeId("sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$194 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$194.resource;
                try (Using<MaterialCesiumWriter> using$195 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$195.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$196 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$196.resource;
                        try (Using<ColorCesiumWriter> using$197 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$197.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(167, 207, 144, 148), ColorHelper.fromArgb(54, 221, 129, 31)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.564705882352941, 0.580392156862745, 0.654901960784314), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.866666666666667, 0.505882352941176, 0.12156862745098, 0.211764705882353), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$198 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$198.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$199 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$199.resource;
                try (Using<MaterialCesiumWriter> using$200 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$200.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$201 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$201.resource;
                        try (Using<ColorCesiumWriter> using$202 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$202.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(216, 85, 185, 247), ColorHelper.fromArgb(188, 69, 120, 14)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.333333333333333, 0.725490196078431, 0.968627450980392, 0.847058823529412), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.270588235294118, 0.470588235294118, 0.0549019607843137, 0.737254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$203 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$203.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$204 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$204.resource;
                try (Using<MaterialCesiumWriter> using$205 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$205.resource;
                    try (Using<ImageMaterialCesiumWriter> using$206 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$206.resource;
                        try (Using<RepeatCesiumWriter> using$207 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$207.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(15155.0, 54843.0), new Rectangular(23043.0, 52314.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(15155, 54843));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(23043, 52314));");
                        }
                        try (Using<ColorCesiumWriter> using$208 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$208.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(201, 227, 216, 30), ColorHelper.fromArgb(162, 178, 83, 144)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(227, 216, 30, 201));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(178, 83, 144, 162));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$209 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$209.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$210 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$210.resource;
                try (Using<MaterialCesiumWriter> using$211 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$211.resource;
                    try (Using<GridMaterialCesiumWriter> using$212 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$212.resource;
                        try (Using<ColorCesiumWriter> using$213 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$213.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(96, 129, 93, 151), ColorHelper.fromArgb(82, 162, 106, 178)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(129, 93, 151, 96));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(162, 106, 178, 82));");
                        }
                        try (Using<DoubleCesiumWriter> using$214 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$214.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(39199.0, 13647.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(39199.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(13647.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$215 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$215.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(36585.0, 398.0), new Rectangular(55649.0, 1753.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(36585, 398));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(55649, 1753));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$216 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$216.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(46298.0, 48052.0), new Rectangular(2425.0, 23049.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(46298, 48052));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(2425, 23049));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$217 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$217.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(32050.0, 28285.0), new Rectangular(28995.0, 12145.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(32050, 28285));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(28995, 12145));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$218 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$218.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$219 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$219.resource;
                try (Using<MaterialCesiumWriter> using$220 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$220.resource;
                    try (Using<StripeMaterialCesiumWriter> using$221 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$221.resource;
                        try (Using<ColorCesiumWriter> using$222 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$222.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(248, 216, 215, 206), ColorHelper.fromArgb(48, 42, 243, 185)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(216, 215, 206, 248));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(42, 243, 185, 48));");
                        }
                        try (Using<ColorCesiumWriter> using$223 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$223.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(154, 207, 180, 175), ColorHelper.fromArgb(196, 243, 210, 191)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(207, 180, 175, 154));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(243, 210, 191, 196));");
                        }
                        try (Using<DoubleCesiumWriter> using$224 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$224.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(63301.0, 2332.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(63301.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(2332.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$225 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$225.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(5736.0, 39376.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(5736.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(39376.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$226 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$226.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$227 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$227.resource;
                try (Using<MaterialCesiumWriter> using$228 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$228.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$229 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$229.resource;
                        try (Using<ColorCesiumWriter> using$230 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$230.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(165, 245, 110, 168), ColorHelper.fromArgb(192, 123, 9, 221)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(245, 110, 168, 165));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(123, 9, 221, 192));");
                        }
                        try (Using<ColorCesiumWriter> using$231 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$231.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(179, 14, 154, 253), ColorHelper.fromArgb(123, 221, 213, 240)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(14, 154, 253, 179));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(221, 213, 240, 123));");
                        }
                        try (Using<RepeatCesiumWriter> using$232 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$232.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(36587.0, 22670.0), new Rectangular(7761.0, 46622.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(36587, 22670));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(7761, 46622));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$233 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$233.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$234 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$234.resource;
                try (Using<MaterialCesiumWriter> using$235 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$235.resource;
                    try (Using<ImageMaterialCesiumWriter> using$236 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$236.resource;
                        try (Using<ColorCesiumWriter> using$237 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$237.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(12, 190, 135, 204), ColorHelper.fromArgb(50, 54, 36, 218)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.745098039215686, 0.529411764705882, 0.8, 0.0470588235294118), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.211764705882353, 0.141176470588235, 0.854901960784314, 0.196078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$238 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$238.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$239 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$239.resource;
                try (Using<MaterialCesiumWriter> using$240 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$240.resource;
                    try (Using<GridMaterialCesiumWriter> using$241 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$241.resource;
                        try (Using<ColorCesiumWriter> using$242 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$242.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(222, 127, 59, 112), ColorHelper.fromArgb(143, 178, 57, 205)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.498039215686275, 0.231372549019608, 0.43921568627451, 0.870588235294118), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.698039215686274, 0.223529411764706, 0.803921568627451, 0.56078431372549), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$243 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$243.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$244 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$244.resource;
                try (Using<MaterialCesiumWriter> using$245 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$245.resource;
                    try (Using<StripeMaterialCesiumWriter> using$246 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$246.resource;
                        try (Using<ColorCesiumWriter> using$247 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$247.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(48, 40, 178, 81), ColorHelper.fromArgb(163, 139, 2, 161)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.156862745098039, 0.698039215686274, 0.317647058823529, 0.188235294117647), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.545098039215686, 0.00784313725490196, 0.631372549019608, 0.63921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$248 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$248.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$249 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$249.resource;
                try (Using<MaterialCesiumWriter> using$250 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$250.resource;
                    try (Using<StripeMaterialCesiumWriter> using$251 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$251.resource;
                        try (Using<ColorCesiumWriter> using$252 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$252.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(119, 194, 241, 246), ColorHelper.fromArgb(137, 127, 63, 68)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.76078431372549, 0.945098039215686, 0.964705882352941, 0.466666666666667), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.498039215686275, 0.247058823529412, 0.266666666666667, 0.537254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$253 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$253.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$254 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$254.resource;
                try (Using<MaterialCesiumWriter> using$255 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$255.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$256 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$256.resource;
                        try (Using<ColorCesiumWriter> using$257 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$257.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(213, 207, 125, 197), ColorHelper.fromArgb(134, 55, 113, 10)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.490196078431373, 0.772549019607843, 0.835294117647059), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.215686274509804, 0.443137254901961, 0.0392156862745098, 0.525490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$258 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$258.resource;
            packet.writeId("sampled_conicSensor_domeSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_domeSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$259 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$259.resource;
                try (Using<MaterialCesiumWriter> using$260 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$260.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$261 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$261.resource;
                        try (Using<ColorCesiumWriter> using$262 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$262.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(180, 36, 118, 211), ColorHelper.fromArgb(157, 221, 117, 15)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.462745098039216, 0.827450980392157, 0.705882352941177), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.866666666666667, 0.458823529411765, 0.0588235294117647, 0.615686274509804), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$263 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$263.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_solidColor_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$264 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$264.resource;
                try (Using<MaterialCesiumWriter> using$265 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$265.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$266 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$266.resource;
                        try (Using<ColorCesiumWriter> using$267 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$267.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(234, 245, 81, 252), ColorHelper.fromArgb(247, 184, 135, 204)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.96078431372549, 0.317647058823529, 0.988235294117647, 0.917647058823529), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.72156862745098, 0.529411764705882, 0.8, 0.968627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$268 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$268.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$269 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$269.resource;
                try (Using<MaterialCesiumWriter> using$270 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$270.resource;
                    try (Using<ImageMaterialCesiumWriter> using$271 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$271.resource;
                        try (Using<RepeatCesiumWriter> using$272 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$272.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(9595.0, 10789.0), new Rectangular(18969.0, 45642.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(9595, 10789));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(18969, 45642));");
                        }
                        try (Using<ColorCesiumWriter> using$273 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$273.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(110, 25, 152, 209), ColorHelper.fromArgb(21, 0, 177, 98)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(25, 152, 209, 110));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(0, 177, 98, 21));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$274 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$274.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$275 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$275.resource;
                try (Using<MaterialCesiumWriter> using$276 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$276.resource;
                    try (Using<GridMaterialCesiumWriter> using$277 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$277.resource;
                        try (Using<ColorCesiumWriter> using$278 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$278.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(183, 30, 179, 241), ColorHelper.fromArgb(76, 238, 22, 9)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(30, 179, 241, 183));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(238, 22, 9, 76));");
                        }
                        try (Using<DoubleCesiumWriter> using$279 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$279.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(60897.0, 28396.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(60897.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(28396.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$280 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$280.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(36175.0, 49549.0), new Rectangular(25282.0, 43362.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(36175, 49549));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(25282, 43362));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$281 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$281.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(3202.0, 31500.0), new Rectangular(31331.0, 9594.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3202, 31500));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(31331, 9594));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$282 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$282.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(26878.0, 19048.0), new Rectangular(14809.0, 8505.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(26878, 19048));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(14809, 8505));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$283 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$283.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$284 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$284.resource;
                try (Using<MaterialCesiumWriter> using$285 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$285.resource;
                    try (Using<StripeMaterialCesiumWriter> using$286 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$286.resource;
                        try (Using<ColorCesiumWriter> using$287 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$287.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(151, 21, 240, 212), ColorHelper.fromArgb(106, 170, 35, 91)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(21, 240, 212, 151));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(170, 35, 91, 106));");
                        }
                        try (Using<ColorCesiumWriter> using$288 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$288.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(72, 245, 81, 159), ColorHelper.fromArgb(36, 191, 198, 205)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(245, 81, 159, 72));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(191, 198, 205, 36));");
                        }
                        try (Using<DoubleCesiumWriter> using$289 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$289.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(48703.0, 42572.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(48703.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(42572.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$290 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$290.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(60568.0, 43395.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(60568.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(43395.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$291 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$291.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$292 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$292.resource;
                try (Using<MaterialCesiumWriter> using$293 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$293.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$294 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$294.resource;
                        try (Using<ColorCesiumWriter> using$295 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$295.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(69, 220, 129, 242), ColorHelper.fromArgb(243, 82, 92, 121)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(220, 129, 242, 69));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(82, 92, 121, 243));");
                        }
                        try (Using<ColorCesiumWriter> using$296 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$296.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(114, 173, 81, 120), ColorHelper.fromArgb(59, 166, 36, 208)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(173, 81, 120, 114));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(166, 36, 208, 59));");
                        }
                        try (Using<RepeatCesiumWriter> using$297 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$297.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(50981.0, 48583.0), new Rectangular(32485.0, 61310.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(50981, 48583));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(32485, 61310));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$298 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$298.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_image_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$299 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$299.resource;
                try (Using<MaterialCesiumWriter> using$300 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$300.resource;
                    try (Using<ImageMaterialCesiumWriter> using$301 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$301.resource;
                        try (Using<ColorCesiumWriter> using$302 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$302.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(36, 198, 37, 19), ColorHelper.fromArgb(192, 240, 172, 36)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.776470588235294, 0.145098039215686, 0.0745098039215686, 0.141176470588235), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.941176470588235, 0.674509803921569, 0.141176470588235, 0.752941176470588), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$303 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$303.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_grid_color')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$304 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$304.resource;
                try (Using<MaterialCesiumWriter> using$305 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$305.resource;
                    try (Using<GridMaterialCesiumWriter> using$306 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$306.resource;
                        try (Using<ColorCesiumWriter> using$307 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$307.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(162, 245, 70, 51), ColorHelper.fromArgb(96, 60, 81, 219)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.96078431372549, 0.274509803921569, 0.2, 0.635294117647059), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.235294117647059, 0.317647058823529, 0.858823529411765, 0.376470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$308 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$308.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$309 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$309.resource;
                try (Using<MaterialCesiumWriter> using$310 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$310.resource;
                    try (Using<StripeMaterialCesiumWriter> using$311 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$311.resource;
                        try (Using<ColorCesiumWriter> using$312 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$312.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(55, 213, 94, 241), ColorHelper.fromArgb(26, 85, 27, 249)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.835294117647059, 0.368627450980392, 0.945098039215686, 0.215686274509804), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.333333333333333, 0.105882352941176, 0.976470588235294, 0.101960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$313 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$313.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$314 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$314.resource;
                try (Using<MaterialCesiumWriter> using$315 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$315.resource;
                    try (Using<StripeMaterialCesiumWriter> using$316 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$316.resource;
                        try (Using<ColorCesiumWriter> using$317 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$317.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(190, 123, 54, 14), ColorHelper.fromArgb(102, 77, 150, 129)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.482352941176471, 0.211764705882353, 0.0549019607843137, 0.745098039215686), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.301960784313725, 0.588235294117647, 0.505882352941176, 0.4), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$318 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$318.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$319 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$319.resource;
                try (Using<MaterialCesiumWriter> using$320 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$320.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$321 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$321.resource;
                        try (Using<ColorCesiumWriter> using$322 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$322.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(161, 46, 147, 181), ColorHelper.fromArgb(78, 199, 145, 26)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.180392156862745, 0.576470588235294, 0.709803921568627, 0.631372549019608), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.780392156862745, 0.568627450980392, 0.101960784313725, 0.305882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$323 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$323.resource;
            packet.writeId("sampled_conicSensor_environmentOcclusionMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentOcclusionMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$324 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$324.resource;
                try (Using<MaterialCesiumWriter> using$325 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$325.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$326 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$326.resource;
                        try (Using<ColorCesiumWriter> using$327 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$327.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(218, 109, 244, 37), ColorHelper.fromArgb(4, 195, 75, 200)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.427450980392157, 0.956862745098039, 0.145098039215686, 0.854901960784314), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.conicSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.764705882352941, 0.294117647058824, 0.784313725490196, 0.0156862745098039), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$328 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$328.resource;
            packet.writeId("sampled_conicSensor_environmentIntersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_environmentIntersectionColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$329 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$329.resource;
                try (Using<ColorCesiumWriter> using$330 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$330.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(242, 61, 144, 98), ColorHelper.fromArgb(123, 171, 179, 183)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.23921568627451, 0.564705882352941, 0.384313725490196, 0.949019607843137), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.670588235294118, 0.701960784313725, 0.717647058823529, 0.482352941176471), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$331 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$331.resource;
            packet.writeId("sampled_conicSensor_viewshedVisibleColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_viewshedVisibleColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$332 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$332.resource;
                try (Using<ColorCesiumWriter> using$333 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$333.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(65, 170, 34, 71), ColorHelper.fromArgb(181, 29, 137, 119)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedVisibleColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.666666666666667, 0.133333333333333, 0.27843137254902, 0.254901960784314), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedVisibleColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.113725490196078, 0.537254901960784, 0.466666666666667, 0.709803921568627), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$334 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$334.resource;
            packet.writeId("sampled_conicSensor_viewshedOccludedColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_conicSensor_viewshedOccludedColor_rgbaf')).toBeDefined();");
            try (Using<ConicSensorCesiumWriter> using$335 = new Using<ConicSensorCesiumWriter>(packet.openConicSensorProperty())) {
                final ConicSensorCesiumWriter w = using$335.resource;
                try (Using<ColorCesiumWriter> using$336 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$336.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(2, 84, 75, 119), ColorHelper.fromArgb(150, 74, 134, 153)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedOccludedColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.329411764705882, 0.294117647058824, 0.466666666666667, 0.00784313725490196), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.conicSensor.viewshedOccludedColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.290196078431373, 0.525490196078431, 0.6, 0.588235294117647), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualCustomPatternSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_customPatternSensor_intersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_intersectionColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$1 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(174, 135, 164, 1), ColorHelper.fromArgb(64, 113, 188, 240)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.529411764705882, 0.643137254901961, 0.00392156862745098, 0.682352941176471), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.443137254901961, 0.737254901960784, 0.941176470588235, 0.250980392156863), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$4 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$4.resource;
                try (Using<MaterialCesiumWriter> using$5 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$5.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$6 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$6.resource;
                        try (Using<ColorCesiumWriter> using$7 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$7.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(233, 190, 232, 234), ColorHelper.fromArgb(54, 229, 250, 236)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.745098039215686, 0.909803921568627, 0.917647058823529, 0.913725490196078), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.898039215686275, 0.980392156862745, 0.925490196078431, 0.211764705882353), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$9 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<ImageMaterialCesiumWriter> using$11 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$11.resource;
                        try (Using<RepeatCesiumWriter> using$12 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$12.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(63029.0, 3574.0), new Rectangular(55389.0, 39128.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(63029, 3574));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(55389, 39128));");
                        }
                        try (Using<ColorCesiumWriter> using$13 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$13.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(176, 16, 191, 200), ColorHelper.fromArgb(51, 37, 9, 107)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(16, 191, 200, 176));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(37, 9, 107, 51));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$14 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$14.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$15 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$15.resource;
                try (Using<MaterialCesiumWriter> using$16 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$16.resource;
                    try (Using<GridMaterialCesiumWriter> using$17 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$17.resource;
                        try (Using<ColorCesiumWriter> using$18 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$18.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(240, 153, 234, 93), ColorHelper.fromArgb(109, 137, 26, 245)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(153, 234, 93, 240));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(137, 26, 245, 109));");
                        }
                        try (Using<DoubleCesiumWriter> using$19 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$19.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(30588.0, 50527.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(30588.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(50527.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$20 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(32706.0, 60287.0), new Rectangular(9849.0, 57894.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(32706, 60287));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(9849, 57894));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$21 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(52801.0, 55758.0), new Rectangular(21243.0, 12882.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(52801, 55758));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(21243, 12882));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$22 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(32497.0, 63102.0), new Rectangular(872.0, 8963.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(32497, 63102));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(872, 8963));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$23 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$23.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$24 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$24.resource;
                try (Using<MaterialCesiumWriter> using$25 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$25.resource;
                    try (Using<StripeMaterialCesiumWriter> using$26 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$26.resource;
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(254, 178, 77, 10), ColorHelper.fromArgb(12, 25, 134, 53)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(178, 77, 10, 254));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(25, 134, 53, 12));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(164, 106, 116, 1), ColorHelper.fromArgb(15, 84, 10, 153)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(106, 116, 1, 164));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(84, 10, 153, 15));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(21926.0, 50927.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(21926.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(50927.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(53175.0, 3927.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(53175.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(3927.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$32 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(195, 188, 142, 42), ColorHelper.fromArgb(83, 106, 168, 73)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(188, 142, 42, 195));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(106, 168, 73, 83));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(131, 131, 240, 191), ColorHelper.fromArgb(11, 220, 1, 39)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 240, 191, 131));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(220, 1, 39, 11));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(17911.0, 1349.0), new Rectangular(19690.0, 25676.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(17911, 1349));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(19690, 25676));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$39 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(104, 119, 174, 105), ColorHelper.fromArgb(204, 50, 237, 237)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.466666666666667, 0.682352941176471, 0.411764705882353, 0.407843137254902), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.196078431372549, 0.929411764705882, 0.929411764705882, 0.8), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$44 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(244, 237, 118, 148), ColorHelper.fromArgb(34, 41, 71, 125)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.929411764705882, 0.462745098039216, 0.580392156862745, 0.956862745098039), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.16078431372549, 0.27843137254902, 0.490196078431373, 0.133333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$49 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(30, 21, 218, 51), ColorHelper.fromArgb(237, 24, 6, 161)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0823529411764706, 0.854901960784314, 0.2, 0.117647058823529), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0941176470588235, 0.0235294117647059, 0.631372549019608, 0.929411764705882), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$54 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(103, 111, 159, 23), ColorHelper.fromArgb(39, 249, 127, 239)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.435294117647059, 0.623529411764706, 0.0901960784313725, 0.403921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.976470588235294, 0.498039215686275, 0.937254901960784, 0.152941176470588), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$59 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(231, 104, 222, 196), ColorHelper.fromArgb(89, 34, 229, 101)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.407843137254902, 0.870588235294118, 0.768627450980392, 0.905882352941176), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.133333333333333, 0.898039215686275, 0.396078431372549, 0.349019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("sampled_customPatternSensor_lateralSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_lateralSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$64 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(123, 205, 190, 180), ColorHelper.fromArgb(6, 83, 211, 73)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.803921568627451, 0.745098039215686, 0.705882352941177, 0.482352941176471), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.325490196078431, 0.827450980392157, 0.286274509803922, 0.0235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$69 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$69.resource;
                try (Using<MaterialCesiumWriter> using$70 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$70.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$71 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$71.resource;
                        try (Using<ColorCesiumWriter> using$72 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$72.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(35, 131, 75, 72), ColorHelper.fromArgb(55, 96, 36, 224)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.513725490196078, 0.294117647058824, 0.282352941176471, 0.137254901960784), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.376470588235294, 0.141176470588235, 0.87843137254902, 0.215686274509804), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$73 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$73.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$74 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$74.resource;
                try (Using<MaterialCesiumWriter> using$75 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$75.resource;
                    try (Using<ImageMaterialCesiumWriter> using$76 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$76.resource;
                        try (Using<RepeatCesiumWriter> using$77 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$77.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(58698.0, 40933.0), new Rectangular(41986.0, 11428.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(58698, 40933));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(41986, 11428));");
                        }
                        try (Using<ColorCesiumWriter> using$78 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$78.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(133, 215, 165, 21), ColorHelper.fromArgb(231, 242, 52, 43)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(215, 165, 21, 133));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(242, 52, 43, 231));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$79 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$79.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$80 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$80.resource;
                try (Using<MaterialCesiumWriter> using$81 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$81.resource;
                    try (Using<GridMaterialCesiumWriter> using$82 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$82.resource;
                        try (Using<ColorCesiumWriter> using$83 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$83.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(30, 145, 51, 29), ColorHelper.fromArgb(59, 232, 196, 204)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(145, 51, 29, 30));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(232, 196, 204, 59));");
                        }
                        try (Using<DoubleCesiumWriter> using$84 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$84.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(41972.0, 5785.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(41972.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(5785.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$85 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$85.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(53003.0, 15055.0), new Rectangular(54783.0, 43989.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(53003, 15055));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(54783, 43989));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$86 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$86.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(20747.0, 61009.0), new Rectangular(44483.0, 19885.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(20747, 61009));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(44483, 19885));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$87 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$87.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(4601.0, 33809.0), new Rectangular(5562.0, 9237.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(4601, 33809));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(5562, 9237));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$88 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$88.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$89 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$89.resource;
                try (Using<MaterialCesiumWriter> using$90 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$90.resource;
                    try (Using<StripeMaterialCesiumWriter> using$91 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$91.resource;
                        try (Using<ColorCesiumWriter> using$92 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$92.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(53, 22, 135, 242), ColorHelper.fromArgb(95, 125, 39, 146)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(22, 135, 242, 53));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(125, 39, 146, 95));");
                        }
                        try (Using<ColorCesiumWriter> using$93 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$93.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(107, 78, 145, 160), ColorHelper.fromArgb(55, 20, 221, 2)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(78, 145, 160, 107));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(20, 221, 2, 55));");
                        }
                        try (Using<DoubleCesiumWriter> using$94 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$94.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(56324.0, 23443.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(56324.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(23443.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$95 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$95.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(60008.0, 19240.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(60008.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(19240.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$96 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$96.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$97 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$97.resource;
                try (Using<MaterialCesiumWriter> using$98 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$98.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$99 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$99.resource;
                        try (Using<ColorCesiumWriter> using$100 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$100.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(16, 22, 212, 30), ColorHelper.fromArgb(143, 218, 60, 248)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(22, 212, 30, 16));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(218, 60, 248, 143));");
                        }
                        try (Using<ColorCesiumWriter> using$101 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$101.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(117, 146, 59, 229), ColorHelper.fromArgb(212, 150, 111, 214)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(146, 59, 229, 117));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(150, 111, 214, 212));");
                        }
                        try (Using<RepeatCesiumWriter> using$102 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$102.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(62246.0, 30451.0), new Rectangular(37575.0, 26258.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(62246, 30451));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(37575, 26258));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$103 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$103.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$104 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$104.resource;
                try (Using<MaterialCesiumWriter> using$105 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$105.resource;
                    try (Using<ImageMaterialCesiumWriter> using$106 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$106.resource;
                        try (Using<ColorCesiumWriter> using$107 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$107.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(68, 38, 19, 12), ColorHelper.fromArgb(163, 95, 219, 19)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.149019607843137, 0.0745098039215686, 0.0470588235294118, 0.266666666666667), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.372549019607843, 0.858823529411765, 0.0745098039215686, 0.63921568627451), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$108 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$108.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$109 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$109.resource;
                try (Using<MaterialCesiumWriter> using$110 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$110.resource;
                    try (Using<GridMaterialCesiumWriter> using$111 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$111.resource;
                        try (Using<ColorCesiumWriter> using$112 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$112.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(112, 57, 154, 137), ColorHelper.fromArgb(13, 74, 79, 180)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.223529411764706, 0.603921568627451, 0.537254901960784, 0.43921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.290196078431373, 0.309803921568627, 0.705882352941177, 0.0509803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$113 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$113.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$114 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$114.resource;
                try (Using<MaterialCesiumWriter> using$115 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$115.resource;
                    try (Using<StripeMaterialCesiumWriter> using$116 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$116.resource;
                        try (Using<ColorCesiumWriter> using$117 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$117.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(200, 130, 222, 21), ColorHelper.fromArgb(43, 248, 101, 182)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.509803921568627, 0.870588235294118, 0.0823529411764706, 0.784313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.972549019607843, 0.396078431372549, 0.713725490196078, 0.168627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$118 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$118.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$119 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$119.resource;
                try (Using<MaterialCesiumWriter> using$120 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$120.resource;
                    try (Using<StripeMaterialCesiumWriter> using$121 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$121.resource;
                        try (Using<ColorCesiumWriter> using$122 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$122.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(140, 189, 83, 245), ColorHelper.fromArgb(238, 126, 229, 79)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.325490196078431, 0.96078431372549, 0.549019607843137), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.494117647058824, 0.898039215686275, 0.309803921568627, 0.933333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$123 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$123.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$124 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$124.resource;
                try (Using<MaterialCesiumWriter> using$125 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$125.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$126 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$126.resource;
                        try (Using<ColorCesiumWriter> using$127 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$127.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(216, 69, 129, 212), ColorHelper.fromArgb(8, 89, 32, 89)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.270588235294118, 0.505882352941176, 0.831372549019608, 0.847058823529412), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.349019607843137, 0.125490196078431, 0.349019607843137, 0.0313725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$128 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$128.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$129 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$129.resource;
                try (Using<MaterialCesiumWriter> using$130 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$130.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$131 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$131.resource;
                        try (Using<ColorCesiumWriter> using$132 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$132.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(21, 189, 38, 95), ColorHelper.fromArgb(83, 155, 219, 115)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.149019607843137, 0.372549019607843, 0.0823529411764706), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.607843137254902, 0.858823529411765, 0.450980392156863, 0.325490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$133 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$133.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$134 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$134.resource;
                try (Using<MaterialCesiumWriter> using$135 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$135.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$136 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$136.resource;
                        try (Using<ColorCesiumWriter> using$137 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$137.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(242, 182, 121, 177), ColorHelper.fromArgb(124, 134, 100, 107)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.713725490196078, 0.474509803921569, 0.694117647058824, 0.949019607843137), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.525490196078431, 0.392156862745098, 0.419607843137255, 0.486274509803922), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$138 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$138.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$139 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$139.resource;
                try (Using<MaterialCesiumWriter> using$140 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$140.resource;
                    try (Using<ImageMaterialCesiumWriter> using$141 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$141.resource;
                        try (Using<RepeatCesiumWriter> using$142 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$142.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(21969.0, 13397.0), new Rectangular(39494.0, 53658.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(21969, 13397));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(39494, 53658));");
                        }
                        try (Using<ColorCesiumWriter> using$143 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$143.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(251, 53, 192, 208), ColorHelper.fromArgb(72, 37, 130, 111)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(53, 192, 208, 251));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(37, 130, 111, 72));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$144 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$144.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$145 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$145.resource;
                try (Using<MaterialCesiumWriter> using$146 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$146.resource;
                    try (Using<GridMaterialCesiumWriter> using$147 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$147.resource;
                        try (Using<ColorCesiumWriter> using$148 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$148.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(148, 93, 214, 17), ColorHelper.fromArgb(86, 128, 142, 221)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(93, 214, 17, 148));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(128, 142, 221, 86));");
                        }
                        try (Using<DoubleCesiumWriter> using$149 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$149.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(44108.0, 54524.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(44108.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(54524.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$150 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$150.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(50481.0, 2245.0), new Rectangular(37420.0, 18578.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(50481, 2245));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(37420, 18578));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$151 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$151.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(12996.0, 37682.0), new Rectangular(52906.0, 32974.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(12996, 37682));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(52906, 32974));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$152 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$152.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(1153.0, 65284.0), new Rectangular(20666.0, 28496.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(1153, 65284));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(20666, 28496));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$153 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$153.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$154 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$154.resource;
                try (Using<MaterialCesiumWriter> using$155 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$155.resource;
                    try (Using<StripeMaterialCesiumWriter> using$156 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$156.resource;
                        try (Using<ColorCesiumWriter> using$157 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$157.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(127, 26, 41, 223), ColorHelper.fromArgb(40, 73, 101, 144)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(26, 41, 223, 127));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(73, 101, 144, 40));");
                        }
                        try (Using<ColorCesiumWriter> using$158 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$158.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(136, 61, 131, 101), ColorHelper.fromArgb(101, 156, 76, 210)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(61, 131, 101, 136));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(156, 76, 210, 101));");
                        }
                        try (Using<DoubleCesiumWriter> using$159 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$159.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(43262.0, 4288.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(43262.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(4288.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$160 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$160.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(56775.0, 18120.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(56775.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(18120.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$161 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$161.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$162 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$162.resource;
                try (Using<MaterialCesiumWriter> using$163 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$163.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$164 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$164.resource;
                        try (Using<ColorCesiumWriter> using$165 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$165.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(135, 246, 191, 195), ColorHelper.fromArgb(116, 49, 92, 224)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(246, 191, 195, 135));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(49, 92, 224, 116));");
                        }
                        try (Using<ColorCesiumWriter> using$166 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$166.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(251, 131, 114, 134), ColorHelper.fromArgb(96, 107, 100, 206)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 114, 134, 251));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(107, 100, 206, 96));");
                        }
                        try (Using<RepeatCesiumWriter> using$167 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$167.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(52216.0, 34251.0), new Rectangular(42684.0, 49318.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(52216, 34251));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(42684, 49318));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$168 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$168.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$169 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$169.resource;
                try (Using<MaterialCesiumWriter> using$170 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$170.resource;
                    try (Using<ImageMaterialCesiumWriter> using$171 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$171.resource;
                        try (Using<ColorCesiumWriter> using$172 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$172.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(214, 251, 49, 122), ColorHelper.fromArgb(63, 153, 172, 81)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.984313725490196, 0.192156862745098, 0.47843137254902, 0.83921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.6, 0.674509803921569, 0.317647058823529, 0.247058823529412), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$173 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$173.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$174 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$174.resource;
                try (Using<MaterialCesiumWriter> using$175 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$175.resource;
                    try (Using<GridMaterialCesiumWriter> using$176 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$176.resource;
                        try (Using<ColorCesiumWriter> using$177 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$177.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(126, 78, 90, 232), ColorHelper.fromArgb(209, 36, 198, 95)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.352941176470588, 0.909803921568627, 0.494117647058824), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.141176470588235, 0.776470588235294, 0.372549019607843, 0.819607843137255), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$178 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$178.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$179 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$179.resource;
                try (Using<MaterialCesiumWriter> using$180 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$180.resource;
                    try (Using<StripeMaterialCesiumWriter> using$181 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$181.resource;
                        try (Using<ColorCesiumWriter> using$182 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$182.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(65, 56, 93, 226), ColorHelper.fromArgb(117, 54, 31, 109)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.219607843137255, 0.364705882352941, 0.886274509803922, 0.254901960784314), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.211764705882353, 0.12156862745098, 0.427450980392157, 0.458823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$183 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$183.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$184 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$184.resource;
                try (Using<MaterialCesiumWriter> using$185 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$185.resource;
                    try (Using<StripeMaterialCesiumWriter> using$186 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$186.resource;
                        try (Using<ColorCesiumWriter> using$187 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$187.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(75, 14, 103, 6), ColorHelper.fromArgb(31, 111, 105, 52)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0549019607843137, 0.403921568627451, 0.0235294117647059, 0.294117647058824), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.435294117647059, 0.411764705882353, 0.203921568627451, 0.12156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$188 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$188.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$189 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$189.resource;
                try (Using<MaterialCesiumWriter> using$190 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$190.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$191 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$191.resource;
                        try (Using<ColorCesiumWriter> using$192 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$192.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(177, 127, 54, 47), ColorHelper.fromArgb(55, 107, 100, 148)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.498039215686275, 0.211764705882353, 0.184313725490196, 0.694117647058824), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.419607843137255, 0.392156862745098, 0.580392156862745, 0.215686274509804), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$193 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$193.resource;
            packet.writeId("sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$194 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$194.resource;
                try (Using<MaterialCesiumWriter> using$195 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$195.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$196 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$196.resource;
                        try (Using<ColorCesiumWriter> using$197 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$197.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(54, 8, 15, 58), ColorHelper.fromArgb(233, 32, 113, 179)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0313725490196078, 0.0588235294117647, 0.227450980392157, 0.211764705882353), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.125490196078431, 0.443137254901961, 0.701960784313725, 0.913725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$198 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$198.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$199 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$199.resource;
                try (Using<MaterialCesiumWriter> using$200 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$200.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$201 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$201.resource;
                        try (Using<ColorCesiumWriter> using$202 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$202.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(51, 110, 176, 105), ColorHelper.fromArgb(138, 43, 19, 7)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.431372549019608, 0.690196078431373, 0.411764705882353, 0.2), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.168627450980392, 0.0745098039215686, 0.0274509803921569, 0.541176470588235), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$203 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$203.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$204 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$204.resource;
                try (Using<MaterialCesiumWriter> using$205 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$205.resource;
                    try (Using<ImageMaterialCesiumWriter> using$206 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$206.resource;
                        try (Using<RepeatCesiumWriter> using$207 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$207.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(60682.0, 27373.0), new Rectangular(52685.0, 47309.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(60682, 27373));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(52685, 47309));");
                        }
                        try (Using<ColorCesiumWriter> using$208 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$208.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(32, 22, 127, 40), ColorHelper.fromArgb(77, 189, 75, 228)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(22, 127, 40, 32));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(189, 75, 228, 77));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$209 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$209.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$210 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$210.resource;
                try (Using<MaterialCesiumWriter> using$211 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$211.resource;
                    try (Using<GridMaterialCesiumWriter> using$212 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$212.resource;
                        try (Using<ColorCesiumWriter> using$213 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$213.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(206, 162, 99, 20), ColorHelper.fromArgb(1, 195, 98, 58)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(162, 99, 20, 206));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(195, 98, 58, 1));");
                        }
                        try (Using<DoubleCesiumWriter> using$214 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$214.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(3954.0, 6671.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(3954.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(6671.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$215 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$215.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(62334.0, 24819.0), new Rectangular(21928.0, 49237.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(62334, 24819));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(21928, 49237));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$216 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$216.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(20309.0, 29263.0), new Rectangular(37015.0, 21392.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(20309, 29263));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(37015, 21392));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$217 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$217.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(25094.0, 25442.0), new Rectangular(627.0, 60674.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(25094, 25442));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(627, 60674));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$218 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$218.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$219 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$219.resource;
                try (Using<MaterialCesiumWriter> using$220 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$220.resource;
                    try (Using<StripeMaterialCesiumWriter> using$221 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$221.resource;
                        try (Using<ColorCesiumWriter> using$222 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$222.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(197, 131, 24, 117), ColorHelper.fromArgb(249, 174, 167, 243)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(131, 24, 117, 197));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(174, 167, 243, 249));");
                        }
                        try (Using<ColorCesiumWriter> using$223 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$223.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(44, 56, 97, 210), ColorHelper.fromArgb(188, 241, 167, 104)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(56, 97, 210, 44));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(241, 167, 104, 188));");
                        }
                        try (Using<DoubleCesiumWriter> using$224 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$224.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(36642.0, 59203.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(36642.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(59203.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$225 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$225.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(22486.0, 32253.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(22486.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(32253.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$226 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$226.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$227 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$227.resource;
                try (Using<MaterialCesiumWriter> using$228 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$228.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$229 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$229.resource;
                        try (Using<ColorCesiumWriter> using$230 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$230.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(240, 85, 219, 208), ColorHelper.fromArgb(109, 57, 93, 247)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(85, 219, 208, 240));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(57, 93, 247, 109));");
                        }
                        try (Using<ColorCesiumWriter> using$231 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$231.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(23, 153, 120, 96), ColorHelper.fromArgb(52, 32, 47, 36)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(153, 120, 96, 23));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(32, 47, 36, 52));");
                        }
                        try (Using<RepeatCesiumWriter> using$232 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$232.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(26766.0, 25960.0), new Rectangular(41604.0, 30626.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(26766, 25960));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(41604, 30626));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$233 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$233.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$234 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$234.resource;
                try (Using<MaterialCesiumWriter> using$235 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$235.resource;
                    try (Using<ImageMaterialCesiumWriter> using$236 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$236.resource;
                        try (Using<ColorCesiumWriter> using$237 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$237.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(145, 120, 32, 58), ColorHelper.fromArgb(174, 202, 14, 220)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.470588235294118, 0.125490196078431, 0.227450980392157, 0.568627450980392), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.792156862745098, 0.0549019607843137, 0.862745098039216, 0.682352941176471), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$238 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$238.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$239 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$239.resource;
                try (Using<MaterialCesiumWriter> using$240 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$240.resource;
                    try (Using<GridMaterialCesiumWriter> using$241 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$241.resource;
                        try (Using<ColorCesiumWriter> using$242 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$242.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(92, 207, 219, 230), ColorHelper.fromArgb(57, 12, 243, 34)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.811764705882353, 0.858823529411765, 0.901960784313726, 0.36078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0470588235294118, 0.952941176470588, 0.133333333333333, 0.223529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$243 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$243.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$244 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$244.resource;
                try (Using<MaterialCesiumWriter> using$245 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$245.resource;
                    try (Using<StripeMaterialCesiumWriter> using$246 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$246.resource;
                        try (Using<ColorCesiumWriter> using$247 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$247.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(34, 134, 212, 111), ColorHelper.fromArgb(2, 12, 232, 221)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.525490196078431, 0.831372549019608, 0.435294117647059, 0.133333333333333), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0470588235294118, 0.909803921568627, 0.866666666666667, 0.00784313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$248 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$248.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$249 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$249.resource;
                try (Using<MaterialCesiumWriter> using$250 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$250.resource;
                    try (Using<StripeMaterialCesiumWriter> using$251 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$251.resource;
                        try (Using<ColorCesiumWriter> using$252 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$252.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(151, 190, 174, 175), ColorHelper.fromArgb(4, 208, 52, 188)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.745098039215686, 0.682352941176471, 0.686274509803922, 0.592156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.815686274509804, 0.203921568627451, 0.737254901960784, 0.0156862745098039), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$253 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$253.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$254 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$254.resource;
                try (Using<MaterialCesiumWriter> using$255 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$255.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$256 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$256.resource;
                        try (Using<ColorCesiumWriter> using$257 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$257.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(14, 63, 160, 196), ColorHelper.fromArgb(27, 165, 187, 202)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.247058823529412, 0.627450980392157, 0.768627450980392, 0.0549019607843137), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.647058823529412, 0.733333333333333, 0.792156862745098, 0.105882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$258 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$258.resource;
            packet.writeId("sampled_customPatternSensor_domeSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_domeSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$259 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$259.resource;
                try (Using<MaterialCesiumWriter> using$260 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$260.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$261 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$261.resource;
                        try (Using<ColorCesiumWriter> using$262 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$262.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(51, 156, 33, 236), ColorHelper.fromArgb(78, 221, 151, 178)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.129411764705882, 0.925490196078431, 0.2), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.866666666666667, 0.592156862745098, 0.698039215686274, 0.305882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$263 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$263.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_solidColor_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$264 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$264.resource;
                try (Using<MaterialCesiumWriter> using$265 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$265.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$266 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$266.resource;
                        try (Using<ColorCesiumWriter> using$267 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$267.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(32, 48, 35, 89), ColorHelper.fromArgb(138, 137, 13, 100)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.188235294117647, 0.137254901960784, 0.349019607843137, 0.125490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.537254901960784, 0.0509803921568627, 0.392156862745098, 0.541176470588235), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$268 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$268.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$269 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$269.resource;
                try (Using<MaterialCesiumWriter> using$270 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$270.resource;
                    try (Using<ImageMaterialCesiumWriter> using$271 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$271.resource;
                        try (Using<RepeatCesiumWriter> using$272 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$272.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(62312.0, 48883.0), new Rectangular(57031.0, 8414.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(62312, 48883));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(57031, 8414));");
                        }
                        try (Using<ColorCesiumWriter> using$273 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$273.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(220, 27, 82, 30), ColorHelper.fromArgb(127, 239, 104, 2)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(27, 82, 30, 220));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(239, 104, 2, 127));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$274 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$274.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$275 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$275.resource;
                try (Using<MaterialCesiumWriter> using$276 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$276.resource;
                    try (Using<GridMaterialCesiumWriter> using$277 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$277.resource;
                        try (Using<ColorCesiumWriter> using$278 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$278.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(140, 201, 18, 142), ColorHelper.fromArgb(52, 172, 191, 241)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(201, 18, 142, 140));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(172, 191, 241, 52));");
                        }
                        try (Using<DoubleCesiumWriter> using$279 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$279.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(47281.0, 32249.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(47281.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(32249.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$280 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$280.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(39465.0, 33434.0), new Rectangular(34009.0, 23428.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(39465, 33434));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(34009, 23428));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$281 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$281.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(12138.0, 31535.0), new Rectangular(21340.0, 63571.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(12138, 31535));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(21340, 63571));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$282 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$282.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(41772.0, 53923.0), new Rectangular(38657.0, 39063.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(41772, 53923));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(38657, 39063));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$283 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$283.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$284 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$284.resource;
                try (Using<MaterialCesiumWriter> using$285 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$285.resource;
                    try (Using<StripeMaterialCesiumWriter> using$286 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$286.resource;
                        try (Using<ColorCesiumWriter> using$287 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$287.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(158, 102, 16, 35), ColorHelper.fromArgb(165, 144, 113, 131)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(102, 16, 35, 158));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(144, 113, 131, 165));");
                        }
                        try (Using<ColorCesiumWriter> using$288 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$288.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(80, 127, 174, 171), ColorHelper.fromArgb(154, 188, 244, 211)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(127, 174, 171, 80));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(188, 244, 211, 154));");
                        }
                        try (Using<DoubleCesiumWriter> using$289 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$289.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(45459.0, 39807.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(45459.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(39807.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$290 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$290.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(3015.0, 44396.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(3015.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(44396.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$291 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$291.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$292 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$292.resource;
                try (Using<MaterialCesiumWriter> using$293 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$293.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$294 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$294.resource;
                        try (Using<ColorCesiumWriter> using$295 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$295.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(63, 47, 112, 129), ColorHelper.fromArgb(130, 244, 112, 201)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 112, 129, 63));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(244, 112, 201, 130));");
                        }
                        try (Using<ColorCesiumWriter> using$296 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$296.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(110, 172, 24, 171), ColorHelper.fromArgb(212, 79, 175, 200)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(172, 24, 171, 110));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(79, 175, 200, 212));");
                        }
                        try (Using<RepeatCesiumWriter> using$297 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$297.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(47658.0, 17082.0), new Rectangular(53788.0, 22482.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(47658, 17082));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(53788, 22482));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$298 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$298.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_image_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$299 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$299.resource;
                try (Using<MaterialCesiumWriter> using$300 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$300.resource;
                    try (Using<ImageMaterialCesiumWriter> using$301 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$301.resource;
                        try (Using<ColorCesiumWriter> using$302 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$302.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(227, 178, 183, 89), ColorHelper.fromArgb(235, 68, 253, 0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.698039215686274, 0.717647058823529, 0.349019607843137, 0.890196078431372), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.266666666666667, 0.992156862745098, 0, 0.92156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$303 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$303.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_grid_color')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$304 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$304.resource;
                try (Using<MaterialCesiumWriter> using$305 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$305.resource;
                    try (Using<GridMaterialCesiumWriter> using$306 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$306.resource;
                        try (Using<ColorCesiumWriter> using$307 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$307.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(162, 115, 166, 201), ColorHelper.fromArgb(95, 224, 3, 180)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.450980392156863, 0.650980392156863, 0.788235294117647, 0.635294117647059), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.87843137254902, 0.0117647058823529, 0.705882352941177, 0.372549019607843), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$308 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$308.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$309 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$309.resource;
                try (Using<MaterialCesiumWriter> using$310 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$310.resource;
                    try (Using<StripeMaterialCesiumWriter> using$311 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$311.resource;
                        try (Using<ColorCesiumWriter> using$312 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$312.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(237, 186, 12, 254), ColorHelper.fromArgb(34, 63, 99, 86)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.729411764705882, 0.0470588235294118, 0.996078431372549, 0.929411764705882), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.247058823529412, 0.388235294117647, 0.337254901960784, 0.133333333333333), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$313 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$313.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$314 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$314.resource;
                try (Using<MaterialCesiumWriter> using$315 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$315.resource;
                    try (Using<StripeMaterialCesiumWriter> using$316 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$316.resource;
                        try (Using<ColorCesiumWriter> using$317 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$317.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(224, 125, 122, 54), ColorHelper.fromArgb(222, 66, 105, 65)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.490196078431373, 0.47843137254902, 0.211764705882353, 0.87843137254902), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.258823529411765, 0.411764705882353, 0.254901960784314, 0.870588235294118), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$318 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$318.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$319 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$319.resource;
                try (Using<MaterialCesiumWriter> using$320 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$320.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$321 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$321.resource;
                        try (Using<ColorCesiumWriter> using$322 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$322.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(100, 45, 106, 204), ColorHelper.fromArgb(119, 117, 243, 88)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.176470588235294, 0.415686274509804, 0.8, 0.392156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.458823529411765, 0.952941176470588, 0.345098039215686, 0.466666666666667), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$323 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$323.resource;
            packet.writeId("sampled_customPatternSensor_environmentOcclusionMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentOcclusionMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$324 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$324.resource;
                try (Using<MaterialCesiumWriter> using$325 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$325.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$326 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$326.resource;
                        try (Using<ColorCesiumWriter> using$327 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$327.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(247, 253, 145, 88), ColorHelper.fromArgb(234, 215, 191, 92)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.992156862745098, 0.568627450980392, 0.345098039215686, 0.968627450980392), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.customPatternSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.843137254901961, 0.749019607843137, 0.36078431372549, 0.917647058823529), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$328 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$328.resource;
            packet.writeId("sampled_customPatternSensor_environmentIntersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_environmentIntersectionColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$329 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$329.resource;
                try (Using<ColorCesiumWriter> using$330 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$330.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(154, 182, 170, 161), ColorHelper.fromArgb(33, 50, 8, 117)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.713725490196078, 0.666666666666667, 0.631372549019608, 0.603921568627451), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.196078431372549, 0.0313725490196078, 0.458823529411765, 0.129411764705882), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$331 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$331.resource;
            packet.writeId("sampled_customPatternSensor_viewshedVisibleColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_viewshedVisibleColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$332 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$332.resource;
                try (Using<ColorCesiumWriter> using$333 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$333.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(166, 26, 60, 137), ColorHelper.fromArgb(190, 241, 12, 94)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedVisibleColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.101960784313725, 0.235294117647059, 0.537254901960784, 0.650980392156863), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedVisibleColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.945098039215686, 0.0470588235294118, 0.368627450980392, 0.745098039215686), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$334 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$334.resource;
            packet.writeId("sampled_customPatternSensor_viewshedOccludedColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_customPatternSensor_viewshedOccludedColor_rgbaf')).toBeDefined();");
            try (Using<CustomPatternSensorCesiumWriter> using$335 = new Using<CustomPatternSensorCesiumWriter>(packet.openCustomPatternSensorProperty())) {
                final CustomPatternSensorCesiumWriter w = using$335.resource;
                try (Using<ColorCesiumWriter> using$336 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$336.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(155, 168, 180, 123), ColorHelper.fromArgb(188, 234, 142, 152)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedOccludedColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.658823529411765, 0.705882352941177, 0.482352941176471, 0.607843137254902), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.customPatternSensor.viewshedOccludedColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.917647058823529, 0.556862745098039, 0.596078431372549, 0.737254901960784), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualRectangularSensor() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_rectangularSensor_intersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_intersectionColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$1 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(76, 156, 159, 157), ColorHelper.fromArgb(87, 120, 202, 114)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.intersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.611764705882353, 0.623529411764706, 0.615686274509804, 0.298039215686275), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.intersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.470588235294118, 0.792156862745098, 0.447058823529412, 0.341176470588235), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$4 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$4.resource;
                try (Using<MaterialCesiumWriter> using$5 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$5.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$6 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$6.resource;
                        try (Using<ColorCesiumWriter> using$7 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$7.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(211, 29, 210, 14), ColorHelper.fromArgb(98, 66, 53, 159)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.113725490196078, 0.823529411764706, 0.0549019607843137, 0.827450980392157), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.258823529411765, 0.207843137254902, 0.623529411764706, 0.384313725490196), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$8 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$8.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$9 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$9.resource;
                try (Using<MaterialCesiumWriter> using$10 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$10.resource;
                    try (Using<ImageMaterialCesiumWriter> using$11 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$11.resource;
                        try (Using<RepeatCesiumWriter> using$12 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$12.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(52010.0, 29131.0), new Rectangular(37742.0, 39315.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(52010, 29131));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(37742, 39315));");
                        }
                        try (Using<ColorCesiumWriter> using$13 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$13.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(224, 87, 76, 78), ColorHelper.fromArgb(174, 112, 228, 110)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(87, 76, 78, 224));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(112, 228, 110, 174));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$14 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$14.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$15 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$15.resource;
                try (Using<MaterialCesiumWriter> using$16 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$16.resource;
                    try (Using<GridMaterialCesiumWriter> using$17 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$17.resource;
                        try (Using<ColorCesiumWriter> using$18 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$18.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(21, 195, 212, 244), ColorHelper.fromArgb(242, 42, 102, 1)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(195, 212, 244, 21));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(42, 102, 1, 242));");
                        }
                        try (Using<DoubleCesiumWriter> using$19 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$19.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(48728.0, 1546.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(48728.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(1546.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$20 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$20.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(50687.0, 36037.0), new Rectangular(13907.0, 20534.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(50687, 36037));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(13907, 20534));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$21 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$21.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(54144.0, 36307.0), new Rectangular(51987.0, 20683.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(54144, 36307));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(51987, 20683));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$22 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$22.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(44547.0, 50094.0), new Rectangular(41657.0, 39586.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(44547, 50094));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(41657, 39586));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$23 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$23.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$24 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$24.resource;
                try (Using<MaterialCesiumWriter> using$25 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$25.resource;
                    try (Using<StripeMaterialCesiumWriter> using$26 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$26.resource;
                        try (Using<ColorCesiumWriter> using$27 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$27.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(42, 30, 217, 21), ColorHelper.fromArgb(180, 44, 19, 54)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(30, 217, 21, 42));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(44, 19, 54, 180));");
                        }
                        try (Using<ColorCesiumWriter> using$28 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$28.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(125, 3, 65, 14), ColorHelper.fromArgb(43, 91, 20, 83)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(3, 65, 14, 125));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(91, 20, 83, 43));");
                        }
                        try (Using<DoubleCesiumWriter> using$29 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$29.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(18254.0, 54296.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(18254.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(54296.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$30 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$30.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(43781.0, 10453.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(43781.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(10453.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$31 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$31.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$32 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$32.resource;
                try (Using<MaterialCesiumWriter> using$33 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$33.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$34 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$34.resource;
                        try (Using<ColorCesiumWriter> using$35 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$35.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(169, 26, 198, 89), ColorHelper.fromArgb(179, 233, 195, 129)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(26, 198, 89, 169));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(233, 195, 129, 179));");
                        }
                        try (Using<ColorCesiumWriter> using$36 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$36.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(93, 17, 115, 191), ColorHelper.fromArgb(167, 184, 78, 48)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(17, 115, 191, 93));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(184, 78, 48, 167));");
                        }
                        try (Using<RepeatCesiumWriter> using$37 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$37.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(17119.0, 42050.0), new Rectangular(61338.0, 26607.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(17119, 42050));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(61338, 26607));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$38 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$38.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$39 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$39.resource;
                try (Using<MaterialCesiumWriter> using$40 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$40.resource;
                    try (Using<ImageMaterialCesiumWriter> using$41 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$41.resource;
                        try (Using<ColorCesiumWriter> using$42 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$42.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(83, 107, 66, 204), ColorHelper.fromArgb(44, 75, 88, 161)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.419607843137255, 0.258823529411765, 0.8, 0.325490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.294117647058824, 0.345098039215686, 0.631372549019608, 0.172549019607843), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$43 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$43.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$44 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$44.resource;
                try (Using<MaterialCesiumWriter> using$45 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$45.resource;
                    try (Using<GridMaterialCesiumWriter> using$46 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$46.resource;
                        try (Using<ColorCesiumWriter> using$47 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$47.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(45, 237, 84, 231), ColorHelper.fromArgb(174, 34, 253, 127)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.929411764705882, 0.329411764705882, 0.905882352941176, 0.176470588235294), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.133333333333333, 0.992156862745098, 0.498039215686275, 0.682352941176471), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$48 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$48.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$49 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$49.resource;
                try (Using<MaterialCesiumWriter> using$50 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$50.resource;
                    try (Using<StripeMaterialCesiumWriter> using$51 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$51.resource;
                        try (Using<ColorCesiumWriter> using$52 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$52.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(236, 125, 27, 189), ColorHelper.fromArgb(109, 100, 97, 244)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.490196078431373, 0.105882352941176, 0.741176470588235, 0.925490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.392156862745098, 0.380392156862745, 0.956862745098039, 0.427450980392157), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$53 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$53.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$54 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$54.resource;
                try (Using<MaterialCesiumWriter> using$55 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$55.resource;
                    try (Using<StripeMaterialCesiumWriter> using$56 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$56.resource;
                        try (Using<ColorCesiumWriter> using$57 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$57.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(9, 163, 165, 198), ColorHelper.fromArgb(59, 53, 200, 106)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.63921568627451, 0.647058823529412, 0.776470588235294, 0.0352941176470588), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.207843137254902, 0.784313725490196, 0.415686274509804, 0.231372549019608), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$58 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$58.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$59 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$59.resource;
                try (Using<MaterialCesiumWriter> using$60 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$60.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$61 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$61.resource;
                        try (Using<ColorCesiumWriter> using$62 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$62.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(64, 52, 144, 95), ColorHelper.fromArgb(232, 223, 223, 21)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.203921568627451, 0.564705882352941, 0.372549019607843, 0.250980392156863), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.874509803921569, 0.874509803921569, 0.0823529411764706, 0.909803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$63 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$63.resource;
            packet.writeId("sampled_rectangularSensor_lateralSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_lateralSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$64 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$64.resource;
                try (Using<MaterialCesiumWriter> using$65 = new Using<MaterialCesiumWriter>(w.openLateralSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$65.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$66 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$66.resource;
                        try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$67.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(182, 158, 11, 0), ColorHelper.fromArgb(43, 90, 105, 105)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.619607843137255, 0.0431372549019608, 0, 0.713725490196078), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.lateralSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.352941176470588, 0.411764705882353, 0.411764705882353, 0.168627450980392), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$68 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$68.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$69 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$69.resource;
                try (Using<MaterialCesiumWriter> using$70 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$70.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$71 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$71.resource;
                        try (Using<ColorCesiumWriter> using$72 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$72.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(201, 88, 159, 189), ColorHelper.fromArgb(83, 253, 225, 149)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.345098039215686, 0.623529411764706, 0.741176470588235, 0.788235294117647), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.992156862745098, 0.882352941176471, 0.584313725490196, 0.325490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$73 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$73.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$74 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$74.resource;
                try (Using<MaterialCesiumWriter> using$75 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$75.resource;
                    try (Using<ImageMaterialCesiumWriter> using$76 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$76.resource;
                        try (Using<RepeatCesiumWriter> using$77 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$77.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(19293.0, 30027.0), new Rectangular(53447.0, 40400.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(19293, 30027));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(53447, 40400));");
                        }
                        try (Using<ColorCesiumWriter> using$78 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$78.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(34, 169, 234, 204), ColorHelper.fromArgb(176, 206, 171, 37)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(169, 234, 204, 34));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(206, 171, 37, 176));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$79 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$79.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$80 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$80.resource;
                try (Using<MaterialCesiumWriter> using$81 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$81.resource;
                    try (Using<GridMaterialCesiumWriter> using$82 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$82.resource;
                        try (Using<ColorCesiumWriter> using$83 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$83.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(2, 64, 198, 223), ColorHelper.fromArgb(142, 158, 10, 217)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(64, 198, 223, 2));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(158, 10, 217, 142));");
                        }
                        try (Using<DoubleCesiumWriter> using$84 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$84.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(25939.0, 4058.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(25939.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(4058.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$85 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$85.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(3767.0, 19214.0), new Rectangular(25536.0, 29283.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(3767, 19214));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(25536, 29283));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$86 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$86.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(46435.0, 13749.0), new Rectangular(59883.0, 59113.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(46435, 13749));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(59883, 59113));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$87 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$87.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(3470.0, 23821.0), new Rectangular(21415.0, 22355.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(3470, 23821));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(21415, 22355));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$88 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$88.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$89 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$89.resource;
                try (Using<MaterialCesiumWriter> using$90 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$90.resource;
                    try (Using<StripeMaterialCesiumWriter> using$91 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$91.resource;
                        try (Using<ColorCesiumWriter> using$92 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$92.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(111, 15, 225, 249), ColorHelper.fromArgb(72, 137, 66, 192)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(15, 225, 249, 111));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(137, 66, 192, 72));");
                        }
                        try (Using<ColorCesiumWriter> using$93 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$93.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(44, 43, 126, 128), ColorHelper.fromArgb(137, 224, 158, 234)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(43, 126, 128, 44));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(224, 158, 234, 137));");
                        }
                        try (Using<DoubleCesiumWriter> using$94 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$94.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(13161.0, 16735.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(13161.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(16735.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$95 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$95.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(61379.0, 24898.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(61379.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(24898.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$96 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$96.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$97 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$97.resource;
                try (Using<MaterialCesiumWriter> using$98 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$98.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$99 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$99.resource;
                        try (Using<ColorCesiumWriter> using$100 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$100.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(128, 108, 220, 153), ColorHelper.fromArgb(190, 48, 38, 33)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(108, 220, 153, 128));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(48, 38, 33, 190));");
                        }
                        try (Using<ColorCesiumWriter> using$101 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$101.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(73, 84, 139, 229), ColorHelper.fromArgb(39, 6, 103, 50)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(84, 139, 229, 73));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(6, 103, 50, 39));");
                        }
                        try (Using<RepeatCesiumWriter> using$102 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$102.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(61213.0, 61935.0), new Rectangular(53596.0, 3025.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(61213, 61935));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(53596, 3025));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$103 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$103.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$104 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$104.resource;
                try (Using<MaterialCesiumWriter> using$105 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$105.resource;
                    try (Using<ImageMaterialCesiumWriter> using$106 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$106.resource;
                        try (Using<ColorCesiumWriter> using$107 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$107.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(125, 189, 200, 86), ColorHelper.fromArgb(242, 57, 114, 122)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.741176470588235, 0.784313725490196, 0.337254901960784, 0.490196078431373), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.223529411764706, 0.447058823529412, 0.47843137254902, 0.949019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$108 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$108.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$109 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$109.resource;
                try (Using<MaterialCesiumWriter> using$110 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$110.resource;
                    try (Using<GridMaterialCesiumWriter> using$111 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$111.resource;
                        try (Using<ColorCesiumWriter> using$112 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$112.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(158, 195, 176, 200), ColorHelper.fromArgb(179, 129, 189, 96)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.764705882352941, 0.690196078431373, 0.784313725490196, 0.619607843137255), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.505882352941176, 0.741176470588235, 0.376470588235294, 0.701960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$113 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$113.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$114 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$114.resource;
                try (Using<MaterialCesiumWriter> using$115 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$115.resource;
                    try (Using<StripeMaterialCesiumWriter> using$116 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$116.resource;
                        try (Using<ColorCesiumWriter> using$117 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$117.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(81, 223, 46, 172), ColorHelper.fromArgb(17, 76, 144, 247)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.874509803921569, 0.180392156862745, 0.674509803921569, 0.317647058823529), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.298039215686275, 0.564705882352941, 0.968627450980392, 0.0666666666666667), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$118 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$118.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$119 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$119.resource;
                try (Using<MaterialCesiumWriter> using$120 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$120.resource;
                    try (Using<StripeMaterialCesiumWriter> using$121 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$121.resource;
                        try (Using<ColorCesiumWriter> using$122 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$122.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(223, 19, 59, 199), ColorHelper.fromArgb(210, 3, 69, 229)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.231372549019608, 0.780392156862745, 0.874509803921569), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0117647058823529, 0.270588235294118, 0.898039215686275, 0.823529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$123 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$123.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$124 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$124.resource;
                try (Using<MaterialCesiumWriter> using$125 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$125.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$126 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$126.resource;
                        try (Using<ColorCesiumWriter> using$127 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$127.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(20, 188, 96, 35), ColorHelper.fromArgb(46, 72, 90, 97)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.737254901960784, 0.376470588235294, 0.137254901960784, 0.0784313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.282352941176471, 0.352941176470588, 0.380392156862745, 0.180392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$128 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$128.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$129 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$129.resource;
                try (Using<MaterialCesiumWriter> using$130 = new Using<MaterialCesiumWriter>(w.openEllipsoidSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$130.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$131 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$131.resource;
                        try (Using<ColorCesiumWriter> using$132 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$132.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(62, 191, 87, 88), ColorHelper.fromArgb(72, 219, 50, 196)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.749019607843137, 0.341176470588235, 0.345098039215686, 0.243137254901961), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.858823529411765, 0.196078431372549, 0.768627450980392, 0.282352941176471), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$133 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$133.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$134 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$134.resource;
                try (Using<MaterialCesiumWriter> using$135 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$135.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$136 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$136.resource;
                        try (Using<ColorCesiumWriter> using$137 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$137.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(26, 87, 1, 96), ColorHelper.fromArgb(250, 198, 54, 125)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.341176470588235, 0.00392156862745098, 0.376470588235294, 0.101960784313725), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.776470588235294, 0.211764705882353, 0.490196078431373, 0.980392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$138 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$138.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$139 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$139.resource;
                try (Using<MaterialCesiumWriter> using$140 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$140.resource;
                    try (Using<ImageMaterialCesiumWriter> using$141 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$141.resource;
                        try (Using<RepeatCesiumWriter> using$142 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$142.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(23214.0, 39258.0), new Rectangular(2670.0, 15370.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(23214, 39258));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(2670, 15370));");
                        }
                        try (Using<ColorCesiumWriter> using$143 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$143.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(31, 153, 182, 217), ColorHelper.fromArgb(94, 62, 102, 70)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(153, 182, 217, 31));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(62, 102, 70, 94));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$144 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$144.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$145 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$145.resource;
                try (Using<MaterialCesiumWriter> using$146 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$146.resource;
                    try (Using<GridMaterialCesiumWriter> using$147 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$147.resource;
                        try (Using<ColorCesiumWriter> using$148 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$148.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(196, 48, 105, 98), ColorHelper.fromArgb(208, 130, 147, 68)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(48, 105, 98, 196));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(130, 147, 68, 208));");
                        }
                        try (Using<DoubleCesiumWriter> using$149 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$149.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(41629.0, 11517.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(41629.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(11517.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$150 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$150.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(47204.0, 22456.0), new Rectangular(26036.0, 49253.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(47204, 22456));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(26036, 49253));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$151 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$151.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(49429.0, 31425.0), new Rectangular(12054.0, 27951.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(49429, 31425));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(12054, 27951));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$152 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$152.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(22478.0, 51031.0), new Rectangular(53335.0, 18640.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(22478, 51031));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(53335, 18640));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$153 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$153.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$154 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$154.resource;
                try (Using<MaterialCesiumWriter> using$155 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$155.resource;
                    try (Using<StripeMaterialCesiumWriter> using$156 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$156.resource;
                        try (Using<ColorCesiumWriter> using$157 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$157.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(131, 78, 72, 114), ColorHelper.fromArgb(189, 53, 121, 5)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(78, 72, 114, 131));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(53, 121, 5, 189));");
                        }
                        try (Using<ColorCesiumWriter> using$158 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$158.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(119, 171, 248, 41), ColorHelper.fromArgb(251, 246, 179, 239)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(171, 248, 41, 119));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(246, 179, 239, 251));");
                        }
                        try (Using<DoubleCesiumWriter> using$159 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$159.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(22252.0, 63736.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(22252.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(63736.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$160 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$160.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(53120.0, 53949.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(53120.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(53949.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$161 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$161.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$162 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$162.resource;
                try (Using<MaterialCesiumWriter> using$163 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$163.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$164 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$164.resource;
                        try (Using<ColorCesiumWriter> using$165 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$165.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(242, 215, 163, 115), ColorHelper.fromArgb(178, 14, 129, 184)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(215, 163, 115, 242));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(14, 129, 184, 178));");
                        }
                        try (Using<ColorCesiumWriter> using$166 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$166.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(91, 106, 179, 139), ColorHelper.fromArgb(237, 109, 40, 46)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(106, 179, 139, 91));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(109, 40, 46, 237));");
                        }
                        try (Using<RepeatCesiumWriter> using$167 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$167.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(22491.0, 23127.0), new Rectangular(34352.0, 6022.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(22491, 23127));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(34352, 6022));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$168 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$168.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$169 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$169.resource;
                try (Using<MaterialCesiumWriter> using$170 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$170.resource;
                    try (Using<ImageMaterialCesiumWriter> using$171 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$171.resource;
                        try (Using<ColorCesiumWriter> using$172 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$172.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(113, 188, 80, 136), ColorHelper.fromArgb(168, 137, 246, 55)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.737254901960784, 0.313725490196078, 0.533333333333333, 0.443137254901961), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.537254901960784, 0.964705882352941, 0.215686274509804, 0.658823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$173 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$173.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$174 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$174.resource;
                try (Using<MaterialCesiumWriter> using$175 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$175.resource;
                    try (Using<GridMaterialCesiumWriter> using$176 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$176.resource;
                        try (Using<ColorCesiumWriter> using$177 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$177.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(123, 191, 194, 187), ColorHelper.fromArgb(130, 57, 150, 100)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.749019607843137, 0.76078431372549, 0.733333333333333, 0.482352941176471), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.223529411764706, 0.588235294117647, 0.392156862745098, 0.509803921568627), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$178 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$178.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$179 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$179.resource;
                try (Using<MaterialCesiumWriter> using$180 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$180.resource;
                    try (Using<StripeMaterialCesiumWriter> using$181 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$181.resource;
                        try (Using<ColorCesiumWriter> using$182 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$182.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(113, 144, 89, 37), ColorHelper.fromArgb(12, 6, 152, 219)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.564705882352941, 0.349019607843137, 0.145098039215686, 0.443137254901961), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.0235294117647059, 0.596078431372549, 0.858823529411765, 0.0470588235294118), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$183 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$183.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$184 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$184.resource;
                try (Using<MaterialCesiumWriter> using$185 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$185.resource;
                    try (Using<StripeMaterialCesiumWriter> using$186 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$186.resource;
                        try (Using<ColorCesiumWriter> using$187 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$187.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(185, 233, 186, 182), ColorHelper.fromArgb(204, 151, 243, 121)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.913725490196078, 0.729411764705882, 0.713725490196078, 0.725490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.592156862745098, 0.952941176470588, 0.474509803921569, 0.8), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$188 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$188.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$189 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$189.resource;
                try (Using<MaterialCesiumWriter> using$190 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$190.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$191 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$191.resource;
                        try (Using<ColorCesiumWriter> using$192 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$192.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(92, 77, 75, 149), ColorHelper.fromArgb(239, 218, 36, 221)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.301960784313725, 0.294117647058824, 0.584313725490196, 0.36078431372549), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.854901960784314, 0.141176470588235, 0.866666666666667, 0.937254901960784), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$193 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$193.resource;
            packet.writeId("sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_ellipsoidHorizonSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$194 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$194.resource;
                try (Using<MaterialCesiumWriter> using$195 = new Using<MaterialCesiumWriter>(w.openEllipsoidHorizonSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$195.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$196 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$196.resource;
                        try (Using<ColorCesiumWriter> using$197 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$197.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(15, 123, 234, 39), ColorHelper.fromArgb(32, 67, 191, 120)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.482352941176471, 0.917647058823529, 0.152941176470588, 0.0588235294117647), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.ellipsoidHorizonSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.262745098039216, 0.749019607843137, 0.470588235294118, 0.125490196078431), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$198 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$198.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$199 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$199.resource;
                try (Using<MaterialCesiumWriter> using$200 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$200.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$201 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$201.resource;
                        try (Using<ColorCesiumWriter> using$202 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$202.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(187, 28, 180, 178), ColorHelper.fromArgb(16, 185, 160, 152)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.109803921568627, 0.705882352941177, 0.698039215686274, 0.733333333333333), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.725490196078431, 0.627450980392157, 0.596078431372549, 0.0627450980392157), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$203 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$203.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$204 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$204.resource;
                try (Using<MaterialCesiumWriter> using$205 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$205.resource;
                    try (Using<ImageMaterialCesiumWriter> using$206 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$206.resource;
                        try (Using<RepeatCesiumWriter> using$207 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$207.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(32842.0, 39552.0), new Rectangular(1658.0, 6662.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(32842, 39552));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(1658, 6662));");
                        }
                        try (Using<ColorCesiumWriter> using$208 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$208.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(110, 23, 109, 70), ColorHelper.fromArgb(145, 145, 162, 148)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(23, 109, 70, 110));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(145, 162, 148, 145));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$209 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$209.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$210 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$210.resource;
                try (Using<MaterialCesiumWriter> using$211 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$211.resource;
                    try (Using<GridMaterialCesiumWriter> using$212 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$212.resource;
                        try (Using<ColorCesiumWriter> using$213 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$213.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(37, 228, 38, 182), ColorHelper.fromArgb(159, 90, 71, 163)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(228, 38, 182, 37));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(90, 71, 163, 159));");
                        }
                        try (Using<DoubleCesiumWriter> using$214 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$214.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(46557.0, 63381.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStartDate)).toEqual(46557.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.cellAlpha.getValue(documentStopDate)).toEqual(63381.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$215 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$215.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(28334.0, 23918.0), new Rectangular(33281.0, 50050.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(28334, 23918));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(33281, 50050));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$216 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$216.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(63911.0, 12025.0), new Rectangular(39352.0, 60313.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(63911, 12025));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(39352, 60313));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$217 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$217.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(27723.0, 47724.0), new Rectangular(25108.0, 20066.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(27723, 47724));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(25108, 20066));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$218 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$218.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$219 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$219.resource;
                try (Using<MaterialCesiumWriter> using$220 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$220.resource;
                    try (Using<StripeMaterialCesiumWriter> using$221 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$221.resource;
                        try (Using<ColorCesiumWriter> using$222 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$222.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(19, 239, 63, 112), ColorHelper.fromArgb(39, 203, 111, 250)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(239, 63, 112, 19));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(203, 111, 250, 39));");
                        }
                        try (Using<ColorCesiumWriter> using$223 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$223.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(189, 221, 185, 121), ColorHelper.fromArgb(29, 17, 205, 57)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(221, 185, 121, 189));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(17, 205, 57, 29));");
                        }
                        try (Using<DoubleCesiumWriter> using$224 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$224.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(12138.0, 63703.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStartDate)).toEqual(12138.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.offset.getValue(documentStopDate)).toEqual(63703.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$225 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$225.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(43570.0, 2074.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(43570.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(2074.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$226 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$226.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$227 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$227.resource;
                try (Using<MaterialCesiumWriter> using$228 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$228.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$229 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$229.resource;
                        try (Using<ColorCesiumWriter> using$230 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$230.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(3, 189, 106, 55), ColorHelper.fromArgb(14, 105, 160, 100)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(189, 106, 55, 3));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(105, 160, 100, 14));");
                        }
                        try (Using<ColorCesiumWriter> using$231 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$231.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(56, 18, 68, 176), ColorHelper.fromArgb(18, 25, 79, 0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(18, 68, 176, 56));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(25, 79, 0, 18));");
                        }
                        try (Using<RepeatCesiumWriter> using$232 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$232.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(18624.0, 13896.0), new Rectangular(39440.0, 15002.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(18624, 13896));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(39440, 15002));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$233 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$233.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$234 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$234.resource;
                try (Using<MaterialCesiumWriter> using$235 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$235.resource;
                    try (Using<ImageMaterialCesiumWriter> using$236 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$236.resource;
                        try (Using<ColorCesiumWriter> using$237 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$237.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(29, 19, 142, 241), ColorHelper.fromArgb(96, 105, 129, 167)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0745098039215686, 0.556862745098039, 0.945098039215686, 0.113725490196078), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.411764705882353, 0.505882352941176, 0.654901960784314, 0.376470588235294), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$238 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$238.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$239 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$239.resource;
                try (Using<MaterialCesiumWriter> using$240 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$240.resource;
                    try (Using<GridMaterialCesiumWriter> using$241 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$241.resource;
                        try (Using<ColorCesiumWriter> using$242 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$242.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(62, 64, 5, 102), ColorHelper.fromArgb(71, 33, 153, 191)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.250980392156863, 0.0196078431372549, 0.4, 0.243137254901961), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.129411764705882, 0.6, 0.749019607843137, 0.27843137254902), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$243 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$243.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$244 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$244.resource;
                try (Using<MaterialCesiumWriter> using$245 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$245.resource;
                    try (Using<StripeMaterialCesiumWriter> using$246 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$246.resource;
                        try (Using<ColorCesiumWriter> using$247 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$247.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(13, 179, 158, 88), ColorHelper.fromArgb(66, 218, 128, 231)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.701960784313725, 0.619607843137255, 0.345098039215686, 0.0509803921568627), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.854901960784314, 0.501960784313725, 0.905882352941176, 0.258823529411765), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$248 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$248.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$249 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$249.resource;
                try (Using<MaterialCesiumWriter> using$250 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$250.resource;
                    try (Using<StripeMaterialCesiumWriter> using$251 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$251.resource;
                        try (Using<ColorCesiumWriter> using$252 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$252.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(252, 4, 151, 146), ColorHelper.fromArgb(80, 246, 70, 19)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.592156862745098, 0.572549019607843, 0.988235294117647), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.964705882352941, 0.274509803921569, 0.0745098039215686, 0.313725490196078), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$253 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$253.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$254 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$254.resource;
                try (Using<MaterialCesiumWriter> using$255 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$255.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$256 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$256.resource;
                        try (Using<ColorCesiumWriter> using$257 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$257.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(180, 4, 75, 126), ColorHelper.fromArgb(216, 32, 26, 140)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0156862745098039, 0.294117647058824, 0.494117647058824, 0.705882352941177), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.125490196078431, 0.101960784313725, 0.549019607843137, 0.847058823529412), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$258 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$258.resource;
            packet.writeId("sampled_rectangularSensor_domeSurfaceMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_domeSurfaceMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$259 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$259.resource;
                try (Using<MaterialCesiumWriter> using$260 = new Using<MaterialCesiumWriter>(w.openDomeSurfaceMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$260.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$261 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$261.resource;
                        try (Using<ColorCesiumWriter> using$262 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$262.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(112, 244, 136, 220), ColorHelper.fromArgb(202, 93, 15, 9)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.956862745098039, 0.533333333333333, 0.862745098039216, 0.43921568627451), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.domeSurfaceMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.364705882352941, 0.0588235294117647, 0.0352941176470588, 0.792156862745098), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$263 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$263.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_solidColor_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$264 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$264.resource;
                try (Using<MaterialCesiumWriter> using$265 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$265.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$266 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$266.resource;
                        try (Using<ColorCesiumWriter> using$267 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$267.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(237, 17, 68, 149), ColorHelper.fromArgb(192, 179, 46, 230)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0666666666666667, 0.266666666666667, 0.584313725490196, 0.929411764705882), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.701960784313725, 0.180392156862745, 0.901960784313726, 0.752941176470588), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$268 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$268.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_image')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$269 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$269.resource;
                try (Using<MaterialCesiumWriter> using$270 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$270.resource;
                    try (Using<ImageMaterialCesiumWriter> using$271 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$271.resource;
                        try (Using<RepeatCesiumWriter> using$272 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$272.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(19700.0, 62796.0), new Rectangular(47399.0, 44729.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(19700, 62796));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(47399, 44729));");
                        }
                        try (Using<ColorCesiumWriter> using$273 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$273.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(7, 109, 139, 89), ColorHelper.fromArgb(58, 44, 196, 205)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(109, 139, 89, 7));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(44, 196, 205, 58));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$274 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$274.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_grid')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$275 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$275.resource;
                try (Using<MaterialCesiumWriter> using$276 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$276.resource;
                    try (Using<GridMaterialCesiumWriter> using$277 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$277.resource;
                        try (Using<ColorCesiumWriter> using$278 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$278.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(40, 184, 7, 85), ColorHelper.fromArgb(94, 113, 30, 153)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqual(Color.fromBytes(184, 7, 85, 40));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqual(Color.fromBytes(113, 30, 153, 94));");
                        }
                        try (Using<DoubleCesiumWriter> using$279 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$279.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(31388.0, 50246.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStartDate)).toEqual(31388.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.cellAlpha.getValue(documentStopDate)).toEqual(50246.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$280 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$280.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(47281.0, 7864.0), new Rectangular(39095.0, 25240.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(47281, 7864));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(39095, 25240));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$281 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$281.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(3327.0, 5644.0), new Rectangular(25573.0, 63843.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(3327, 5644));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(25573, 63843));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$282 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$282.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(38263.0, 47765.0), new Rectangular(65149.0, 50686.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(38263, 47765));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(65149, 50686));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$283 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$283.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_stripe')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$284 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$284.resource;
                try (Using<MaterialCesiumWriter> using$285 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$285.resource;
                    try (Using<StripeMaterialCesiumWriter> using$286 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$286.resource;
                        try (Using<ColorCesiumWriter> using$287 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$287.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(254, 7, 198, 5), ColorHelper.fromArgb(7, 58, 1, 207)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(7, 198, 5, 254));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(58, 1, 207, 7));");
                        }
                        try (Using<ColorCesiumWriter> using$288 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$288.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(252, 132, 103, 81), ColorHelper.fromArgb(50, 132, 126, 121)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(132, 103, 81, 252));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(132, 126, 121, 50));");
                        }
                        try (Using<DoubleCesiumWriter> using$289 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$289.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(25002.0, 49962.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStartDate)).toEqual(25002.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.offset.getValue(documentStopDate)).toEqual(49962.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$290 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$290.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(42274.0, 48798.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(42274.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(48798.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$291 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$291.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_checkerboard')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$292 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$292.resource;
                try (Using<MaterialCesiumWriter> using$293 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$293.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$294 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$294.resource;
                        try (Using<ColorCesiumWriter> using$295 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$295.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(200, 200, 100, 162), ColorHelper.fromArgb(195, 119, 5, 79)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(200, 100, 162, 200));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(119, 5, 79, 195));");
                        }
                        try (Using<ColorCesiumWriter> using$296 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$296.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(38, 105, 142, 119), ColorHelper.fromArgb(143, 22, 29, 213)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(105, 142, 119, 38));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(22, 29, 213, 143));");
                        }
                        try (Using<RepeatCesiumWriter> using$297 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$297.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(30919.0, 15224.0), new Rectangular(4399.0, 15633.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(30919, 15224));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(4399, 15633));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$298 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$298.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_image_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$299 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$299.resource;
                try (Using<MaterialCesiumWriter> using$300 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$300.resource;
                    try (Using<ImageMaterialCesiumWriter> using$301 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$301.resource;
                        try (Using<ColorCesiumWriter> using$302 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$302.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(29, 58, 116, 132), ColorHelper.fromArgb(18, 75, 121, 166)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.227450980392157, 0.454901960784314, 0.517647058823529, 0.113725490196078), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.294117647058824, 0.474509803921569, 0.650980392156863, 0.0705882352941176), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$303 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$303.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_grid_color')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$304 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$304.resource;
                try (Using<MaterialCesiumWriter> using$305 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$305.resource;
                    try (Using<GridMaterialCesiumWriter> using$306 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$306.resource;
                        try (Using<ColorCesiumWriter> using$307 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$307.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(63, 217, 168, 192), ColorHelper.fromArgb(191, 28, 111, 172)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.850980392156863, 0.658823529411765, 0.752941176470588, 0.247058823529412), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.109803921568627, 0.435294117647059, 0.674509803921569, 0.749019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$308 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$308.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_stripe_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$309 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$309.resource;
                try (Using<MaterialCesiumWriter> using$310 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$310.resource;
                    try (Using<StripeMaterialCesiumWriter> using$311 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$311.resource;
                        try (Using<ColorCesiumWriter> using$312 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$312.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(164, 112, 114, 116), ColorHelper.fromArgb(190, 1, 216, 186)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.43921568627451, 0.447058823529412, 0.454901960784314, 0.643137254901961), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.847058823529412, 0.729411764705882, 0.745098039215686), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$313 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$313.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_stripe_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$314 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$314.resource;
                try (Using<MaterialCesiumWriter> using$315 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$315.resource;
                    try (Using<StripeMaterialCesiumWriter> using$316 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$316.resource;
                        try (Using<ColorCesiumWriter> using$317 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$317.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(68, 86, 117, 74), ColorHelper.fromArgb(36, 119, 151, 191)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.337254901960784, 0.458823529411765, 0.290196078431373, 0.266666666666667), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.466666666666667, 0.592156862745098, 0.749019607843137, 0.141176470588235), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$318 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$318.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_checkerboard_evenColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$319 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$319.resource;
                try (Using<MaterialCesiumWriter> using$320 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$320.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$321 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$321.resource;
                        try (Using<ColorCesiumWriter> using$322 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$322.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(88, 108, 232, 138), ColorHelper.fromArgb(250, 196, 175, 99)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.423529411764706, 0.909803921568627, 0.541176470588235, 0.345098039215686), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.768627450980392, 0.686274509803922, 0.388235294117647, 0.980392156862745), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$323 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$323.resource;
            packet.writeId("sampled_rectangularSensor_environmentOcclusionMaterial_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentOcclusionMaterial_checkerboard_oddColor')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$324 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$324.resource;
                try (Using<MaterialCesiumWriter> using$325 = new Using<MaterialCesiumWriter>(w.openEnvironmentOcclusionMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$325.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$326 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$326.resource;
                        try (Using<ColorCesiumWriter> using$327 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$327.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(24, 100, 32, 238), ColorHelper.fromArgb(246, 130, 234, 172)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.392156862745098, 0.125490196078431, 0.933333333333333, 0.0941176470588235), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.rectangularSensor.environmentOcclusionMaterial.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.917647058823529, 0.674509803921569, 0.964705882352941), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$328 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$328.resource;
            packet.writeId("sampled_rectangularSensor_environmentIntersectionColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_environmentIntersectionColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$329 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$329.resource;
                try (Using<ColorCesiumWriter> using$330 = new Using<ColorCesiumWriter>(w.openEnvironmentIntersectionColorProperty())) {
                    final ColorCesiumWriter w2 = using$330.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(21, 201, 208, 91), ColorHelper.fromArgb(140, 130, 126, 251)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.788235294117647, 0.815686274509804, 0.356862745098039, 0.0823529411764706), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.environmentIntersectionColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.509803921568627, 0.494117647058824, 0.984313725490196, 0.549019607843137), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$331 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$331.resource;
            packet.writeId("sampled_rectangularSensor_viewshedVisibleColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_viewshedVisibleColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$332 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$332.resource;
                try (Using<ColorCesiumWriter> using$333 = new Using<ColorCesiumWriter>(w.openViewshedVisibleColorProperty())) {
                    final ColorCesiumWriter w2 = using$333.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(21, 68, 39, 209), ColorHelper.fromArgb(16, 49, 16, 119)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedVisibleColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.266666666666667, 0.152941176470588, 0.819607843137255, 0.0823529411764706), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedVisibleColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.192156862745098, 0.0627450980392157, 0.466666666666667, 0.0627450980392157), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$334 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$334.resource;
            packet.writeId("sampled_rectangularSensor_viewshedOccludedColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_rectangularSensor_viewshedOccludedColor_rgbaf')).toBeDefined();");
            try (Using<RectangularSensorCesiumWriter> using$335 = new Using<RectangularSensorCesiumWriter>(packet.openRectangularSensorProperty())) {
                final RectangularSensorCesiumWriter w = using$335.resource;
                try (Using<ColorCesiumWriter> using$336 = new Using<ColorCesiumWriter>(w.openViewshedOccludedColorProperty())) {
                    final ColorCesiumWriter w2 = using$336.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(47, 90, 84, 13), ColorHelper.fromArgb(70, 185, 42, 17)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedOccludedColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.352941176470588, 0.329411764705882, 0.0509803921568627, 0.184313725490196), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.rectangularSensor.viewshedOccludedColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.725490196078431, 0.164705882352941, 0.0666666666666667, 0.274509803921569), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualFan() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_fan_material_solidColor_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_solidColor_color')).toBeDefined();");
            try (Using<FanCesiumWriter> using$1 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$1.resource;
                try (Using<MaterialCesiumWriter> using$2 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$2.resource;
                    try (Using<SolidColorMaterialCesiumWriter> using$3 = new Using<SolidColorMaterialCesiumWriter>(w2.openSolidColorProperty())) {
                        final SolidColorMaterialCesiumWriter m = using$3.resource;
                        try (Using<ColorCesiumWriter> using$4 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$4.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(171, 239, 63, 110), ColorHelper.fromArgb(77, 86, 64, 227)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.937254901960784, 0.247058823529412, 0.431372549019608, 0.670588235294118), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.337254901960784, 0.250980392156863, 0.890196078431372, 0.301960784313725), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$5 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$5.resource;
            packet.writeId("sampled_fan_material_image");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_image')).toBeDefined();");
            try (Using<FanCesiumWriter> using$6 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$6.resource;
                try (Using<MaterialCesiumWriter> using$7 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$7.resource;
                    try (Using<ImageMaterialCesiumWriter> using$8 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$8.resource;
                        try (Using<RepeatCesiumWriter> using$9 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$9.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(58726.0, 59621.0), new Rectangular(46654.0, 63670.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(58726, 59621));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(46654, 63670));");
                        }
                        try (Using<ColorCesiumWriter> using$10 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$10.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(115, 216, 94, 86), ColorHelper.fromArgb(175, 82, 234, 215)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(216, 94, 86, 115));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(82, 234, 215, 175));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$11 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$11.resource;
            packet.writeId("sampled_fan_material_grid");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_grid')).toBeDefined();");
            try (Using<FanCesiumWriter> using$12 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$12.resource;
                try (Using<MaterialCesiumWriter> using$13 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$13.resource;
                    try (Using<GridMaterialCesiumWriter> using$14 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$14.resource;
                        try (Using<ColorCesiumWriter> using$15 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$15.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(12, 200, 56, 170), ColorHelper.fromArgb(247, 168, 225, 32)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(documentStartDate)).toEqual(Color.fromBytes(200, 56, 170, 12));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.color.getValue(documentStopDate)).toEqual(Color.fromBytes(168, 225, 32, 247));");
                        }
                        try (Using<DoubleCesiumWriter> using$16 = new Using<DoubleCesiumWriter>(m.openCellAlphaProperty())) {
                            final DoubleCesiumWriter m2 = using$16.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(190.0, 41775.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(documentStartDate)).toEqual(190.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.cellAlpha.getValue(documentStopDate)).toEqual(41775.0);");
                        }
                        try (Using<LineCountCesiumWriter> using$17 = new Using<LineCountCesiumWriter>(m.openLineCountProperty())) {
                            final LineCountCesiumWriter m2 = using$17.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(10435.0, 52008.0), new Rectangular(35404.0, 57482.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineCount.getValue(documentStartDate)).toEqual(new Cartesian2(10435, 52008));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineCount.getValue(documentStopDate)).toEqual(new Cartesian2(35404, 57482));");
                        }
                        try (Using<LineThicknessCesiumWriter> using$18 = new Using<LineThicknessCesiumWriter>(m.openLineThicknessProperty())) {
                            final LineThicknessCesiumWriter m2 = using$18.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(44794.0, 63406.0), new Rectangular(17262.0, 1347.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineThickness.getValue(documentStartDate)).toEqual(new Cartesian2(44794, 63406));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineThickness.getValue(documentStopDate)).toEqual(new Cartesian2(17262, 1347));");
                        }
                        try (Using<LineOffsetCesiumWriter> using$19 = new Using<LineOffsetCesiumWriter>(m.openLineOffsetProperty())) {
                            final LineOffsetCesiumWriter m2 = using$19.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(35392.0, 13706.0), new Rectangular(21580.0, 53844.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineOffset.getValue(documentStartDate)).toEqual(new Cartesian2(35392, 13706));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.lineOffset.getValue(documentStopDate)).toEqual(new Cartesian2(21580, 53844));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$20 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$20.resource;
            packet.writeId("sampled_fan_material_stripe");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_stripe')).toBeDefined();");
            try (Using<FanCesiumWriter> using$21 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$21.resource;
                try (Using<MaterialCesiumWriter> using$22 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$22.resource;
                    try (Using<StripeMaterialCesiumWriter> using$23 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$23.resource;
                        try (Using<ColorCesiumWriter> using$24 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$24.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(112, 84, 13, 181), ColorHelper.fromArgb(191, 149, 17, 180)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(84, 13, 181, 112));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(149, 17, 180, 191));");
                        }
                        try (Using<ColorCesiumWriter> using$25 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$25.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(91, 233, 177, 162), ColorHelper.fromArgb(114, 130, 61, 125)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(233, 177, 162, 91));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(130, 61, 125, 114));");
                        }
                        try (Using<DoubleCesiumWriter> using$26 = new Using<DoubleCesiumWriter>(m.openOffsetProperty())) {
                            final DoubleCesiumWriter m2 = using$26.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(51679.0, 59208.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(documentStartDate)).toEqual(51679.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.offset.getValue(documentStopDate)).toEqual(59208.0);");
                        }
                        try (Using<DoubleCesiumWriter> using$27 = new Using<DoubleCesiumWriter>(m.openRepeatProperty())) {
                            final DoubleCesiumWriter m2 = using$27.resource;
                            m2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Double> createList(19977.0, 19954.0));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(19977.0);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(19954.0);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$28 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$28.resource;
            packet.writeId("sampled_fan_material_checkerboard");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_checkerboard')).toBeDefined();");
            try (Using<FanCesiumWriter> using$29 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$29.resource;
                try (Using<MaterialCesiumWriter> using$30 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$30.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$31 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$31.resource;
                        try (Using<ColorCesiumWriter> using$32 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$32.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(208, 47, 118, 217), ColorHelper.fromArgb(62, 217, 74, 171)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqual(Color.fromBytes(47, 118, 217, 208));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqual(Color.fromBytes(217, 74, 171, 62));");
                        }
                        try (Using<ColorCesiumWriter> using$33 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$33.resource;
                            m2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(107, 126, 245, 28), ColorHelper.fromArgb(116, 30, 145, 194)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqual(Color.fromBytes(126, 245, 28, 107));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqual(Color.fromBytes(30, 145, 194, 116));");
                        }
                        try (Using<RepeatCesiumWriter> using$34 = new Using<RepeatCesiumWriter>(m.openRepeatProperty())) {
                            final RepeatCesiumWriter m2 = using$34.resource;
                            m2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(50034.0, 2755.0), new Rectangular(23022.0, 2137.0)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStartDate)).toEqual(new Cartesian2(50034, 2755));");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.fan.material.repeat.getValue(documentStopDate)).toEqual(new Cartesian2(23022, 2137));");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$35 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$35.resource;
            packet.writeId("sampled_fan_material_image_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_image_color')).toBeDefined();");
            try (Using<FanCesiumWriter> using$36 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$36.resource;
                try (Using<MaterialCesiumWriter> using$37 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$37.resource;
                    try (Using<ImageMaterialCesiumWriter> using$38 = new Using<ImageMaterialCesiumWriter>(w2.openImageProperty())) {
                        final ImageMaterialCesiumWriter m = using$38.resource;
                        try (Using<ColorCesiumWriter> using$39 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$39.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(81, 242, 177, 232), ColorHelper.fromArgb(57, 224, 21, 192)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.949019607843137, 0.694117647058824, 0.909803921568627, 0.317647058823529), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.87843137254902, 0.0823529411764706, 0.752941176470588, 0.223529411764706), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$40 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$40.resource;
            packet.writeId("sampled_fan_material_grid_color");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_grid_color')).toBeDefined();");
            try (Using<FanCesiumWriter> using$41 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$41.resource;
                try (Using<MaterialCesiumWriter> using$42 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$42.resource;
                    try (Using<GridMaterialCesiumWriter> using$43 = new Using<GridMaterialCesiumWriter>(w2.openGridProperty())) {
                        final GridMaterialCesiumWriter m = using$43.resource;
                        try (Using<ColorCesiumWriter> using$44 = new Using<ColorCesiumWriter>(m.openColorProperty())) {
                            final ColorCesiumWriter m2 = using$44.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(128, 105, 108, 96), ColorHelper.fromArgb(242, 225, 8, 35)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.411764705882353, 0.423529411764706, 0.376470588235294, 0.501960784313725), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.882352941176471, 0.0313725490196078, 0.137254901960784, 0.949019607843137), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$45 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$45.resource;
            packet.writeId("sampled_fan_material_stripe_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_stripe_evenColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$46 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$46.resource;
                try (Using<MaterialCesiumWriter> using$47 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$47.resource;
                    try (Using<StripeMaterialCesiumWriter> using$48 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$48.resource;
                        try (Using<ColorCesiumWriter> using$49 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$49.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(235, 1, 42, 230), ColorHelper.fromArgb(177, 86, 70, 153)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.164705882352941, 0.901960784313726, 0.92156862745098), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.337254901960784, 0.274509803921569, 0.6, 0.694117647058824), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$50 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$50.resource;
            packet.writeId("sampled_fan_material_stripe_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_stripe_oddColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$51 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$51.resource;
                try (Using<MaterialCesiumWriter> using$52 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$52.resource;
                    try (Using<StripeMaterialCesiumWriter> using$53 = new Using<StripeMaterialCesiumWriter>(w2.openStripeProperty())) {
                        final StripeMaterialCesiumWriter m = using$53.resource;
                        try (Using<ColorCesiumWriter> using$54 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$54.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(83, 10, 156, 204), ColorHelper.fromArgb(6, 45, 216, 224)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.0392156862745098, 0.611764705882353, 0.8, 0.325490196078431), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.176470588235294, 0.847058823529412, 0.87843137254902, 0.0235294117647059), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$55 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$55.resource;
            packet.writeId("sampled_fan_material_checkerboard_evenColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_checkerboard_evenColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$56 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$56.resource;
                try (Using<MaterialCesiumWriter> using$57 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$57.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$58 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$58.resource;
                        try (Using<ColorCesiumWriter> using$59 = new Using<ColorCesiumWriter>(m.openEvenColorProperty())) {
                            final ColorCesiumWriter m2 = using$59.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(116, 62, 235, 239), ColorHelper.fromArgb(16, 136, 227, 39)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.243137254901961, 0.92156862745098, 0.937254901960784, 0.454901960784314), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.evenColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.533333333333333, 0.890196078431372, 0.152941176470588, 0.0627450980392157), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$60 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$60.resource;
            packet.writeId("sampled_fan_material_checkerboard_oddColor");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_material_checkerboard_oddColor')).toBeDefined();");
            try (Using<FanCesiumWriter> using$61 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$61.resource;
                try (Using<MaterialCesiumWriter> using$62 = new Using<MaterialCesiumWriter>(w.openMaterialProperty())) {
                    final MaterialCesiumWriter w2 = using$62.resource;
                    try (Using<CheckerboardMaterialCesiumWriter> using$63 = new Using<CheckerboardMaterialCesiumWriter>(w2.openCheckerboardProperty())) {
                        final CheckerboardMaterialCesiumWriter m = using$63.resource;
                        try (Using<ColorCesiumWriter> using$64 = new Using<ColorCesiumWriter>(m.openOddColorProperty())) {
                            final ColorCesiumWriter m2 = using$64.resource;
                            m2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                                    TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(251, 1, 102, 238), ColorHelper.fromArgb(167, 125, 6, 21)));
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.00392156862745098, 0.4, 0.933333333333333, 0.984313725490196), 1e-14);");
                            TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                                    "    expect(e.fan.material.oddColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.490196078431373, 0.0235294117647059, 0.0823529411764706, 0.654901960784314), 1e-14);");
                        }
                    }
                }
            }
        }
        try (Using<PacketCesiumWriter> using$65 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$65.resource;
            packet.writeId("sampled_fan_outlineColor_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_fan_outlineColor_rgbaf')).toBeDefined();");
            try (Using<FanCesiumWriter> using$66 = new Using<FanCesiumWriter>(packet.openFanProperty())) {
                final FanCesiumWriter w = using$66.resource;
                try (Using<ColorCesiumWriter> using$67 = new Using<ColorCesiumWriter>(w.openOutlineColorProperty())) {
                    final ColorCesiumWriter w2 = using$67.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(236, 36, 173, 171), ColorHelper.fromArgb(33, 138, 194, 99)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.fan.outlineColor.getValue(documentStartDate)).toEqualEpsilon(new Color(0.141176470588235, 0.67843137254902, 0.670588235294118, 0.925490196078431), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.fan.outlineColor.getValue(documentStopDate)).toEqualEpsilon(new Color(0.541176470588235, 0.76078431372549, 0.388235294117647, 0.129411764705882), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesIndividualVector() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_vector_color_rgbaf");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_vector_color_rgbaf')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$1 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$1.resource;
                try (Using<ColorCesiumWriter> using$2 = new Using<ColorCesiumWriter>(w.openColorProperty())) {
                    final ColorCesiumWriter w2 = using$2.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(62, 78, 250, 203), ColorHelper.fromArgb(5, 145, 162, 168)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.color.getValue(documentStartDate)).toEqualEpsilon(new Color(0.305882352941176, 0.980392156862745, 0.796078431372549, 0.243137254901961), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.color.getValue(documentStopDate)).toEqualEpsilon(new Color(0.568627450980392, 0.635294117647059, 0.658823529411765, 0.0196078431372549), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$3 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$3.resource;
            packet.writeId("sampled_vector_direction_unitSpherical");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_vector_direction_unitSpherical')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$4 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$4.resource;
                try (Using<DirectionCesiumWriter> using$5 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$5.resource;
                    w2.writeUnitSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(42298.0, 7077.0), new UnitSpherical(35027.0, 44936.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(documentStartDate)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(42298, 7077)), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(documentStopDate)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(35027, 44936)), 1e-14);");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$6 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$6.resource;
            packet.writeId("sampled_vector_direction_cartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_vector_direction_cartesian')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$7 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$7.resource;
                try (Using<DirectionCesiumWriter> using$8 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$8.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(23178.0, 55642.0, 4825.0), new Cartesian(11195.0, 57387.0, 64992.0)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(documentStartDate)).toEqual(new Cartesian3(23178, 55642, 4825));");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter, "    expect(e.vector.direction.getValue(documentStopDate)).toEqual(new Cartesian3(11195, 57387, 64992));");
                }
            }
        }
        try (Using<PacketCesiumWriter> using$9 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$9.resource;
            packet.writeId("sampled_vector_direction_unitCartesian");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_vector_direction_unitCartesian')).toBeDefined();");
            try (Using<VectorCesiumWriter> using$10 = new Using<VectorCesiumWriter>(packet.openVectorProperty())) {
                final VectorCesiumWriter w = using$10.resource;
                try (Using<DirectionCesiumWriter> using$11 = new Using<DirectionCesiumWriter>(w.openDirectionProperty())) {
                    final DirectionCesiumWriter w2 = using$11.resource;
                    w2.writeUnitCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<UnitCartesian> createList(
                            new UnitCartesian(0.553282791500359, 0.696109910096765, 0.457503164682654), new UnitCartesian(0.754665701430316, 0.115201313599265, 0.645916663687888)));
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.553282791500359, 0.696109910096765, 0.457503164682654), 1e-14);");
                    TextWriterHelper.writeLine(m_extensionsAssertionsWriter,
                            "    expect(e.vector.direction.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.754665701430316, 0.115201313599265, 0.645916663687888), 1e-14);");
                }
            }
        }
    }

    private final void writeSampledValuesCustomProperties() {
        try (Using<PacketCesiumWriter> using$0 = new Using<PacketCesiumWriter>(m_writer.openPacket(m_output))) {
            final PacketCesiumWriter packet = using$0.resource;
            packet.writeId("sampled_custom");
            writeAssertionBoth("    expect(e = dataSource.entities.getById('sampled_custom')).toBeDefined();");
            try (Using<CustomPropertiesCesiumWriter> using$1 = new Using<CustomPropertiesCesiumWriter>(packet.openPropertiesProperty())) {
                final CustomPropertiesCesiumWriter w = using$1.resource;
                try (Using<CustomPropertyCesiumWriter> using$2 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_boundingRectangle"))) {
                    final CustomPropertyCesiumWriter w2 = using$2.resource;
                    w2.writeBoundingRectangle(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<BoundingRectangle> createList(BoundingRectangle.fromWidthHeight(10924.0, 3626.0, 12558.0, 56113.0),
                                    BoundingRectangle.fromWidthHeight(59127.0, 45286.0, 34992.0, 17032.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_boundingRectangle.getValue(documentStartDate)).toEqual(new BoundingRectangle(10924, 3626, 12558, 56113));");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_boundingRectangle.getValue(documentStopDate)).toEqual(new BoundingRectangle(59127, 45286, 34992, 17032));");
                }
                try (Using<CustomPropertyCesiumWriter> using$3 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartesian"))) {
                    final CustomPropertyCesiumWriter w2 = using$3.resource;
                    w2.writeCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartesian> createList(new Cartesian(59456.0, 60648.0, 1004.0), new Cartesian(37915.0, 14740.0, 14905.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartesian.getValue(documentStartDate)).toEqual(new Cartesian3(59456, 60648, 1004));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartesian.getValue(documentStopDate)).toEqual(new Cartesian3(37915, 14740, 14905));");
                }
                try (Using<CustomPropertyCesiumWriter> using$4 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartographicRadians"))) {
                    final CustomPropertyCesiumWriter w2 = using$4.resource;
                    w2.writeCartographicRadians(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument
                            .<Cartographic> createList(new Cartographic(1.25380297085855, 1.03510976346284, 7102.0), new Cartographic(1.10648839763778, 0.231915563506949, 340.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_cartographicRadians.getValue(documentStartDate)).toEqual(Cartesian3.fromRadians(1.25380297085855, 1.03510976346284, 7102));");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_cartographicRadians.getValue(documentStopDate)).toEqual(Cartesian3.fromRadians(1.10648839763778, 0.231915563506949, 340));");
                }
                try (Using<CustomPropertyCesiumWriter> using$5 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartographicDegrees"))) {
                    final CustomPropertyCesiumWriter w2 = using$5.resource;
                    w2.writeCartographicDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Cartographic> createList(new Cartographic(44.0, 31.0, 55762.0), new Cartographic(10.0, 18.0, 28847.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartographicDegrees.getValue(documentStartDate)).toEqual(Cartesian3.fromDegrees(44, 31, 55762));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartographicDegrees.getValue(documentStopDate)).toEqual(Cartesian3.fromDegrees(10, 18, 28847));");
                }
                try (Using<CustomPropertyCesiumWriter> using$6 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_cartesian2"))) {
                    final CustomPropertyCesiumWriter w2 = using$6.resource;
                    w2.writeCartesian2(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Rectangular> createList(new Rectangular(9033.0, 9251.0), new Rectangular(34048.0, 58501.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartesian2.getValue(documentStartDate)).toEqual(new Cartesian2(9033, 9251));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_cartesian2.getValue(documentStopDate)).toEqual(new Cartesian2(34048, 58501));");
                }
                try (Using<CustomPropertyCesiumWriter> using$7 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_unitCartesian"))) {
                    final CustomPropertyCesiumWriter w2 = using$7.resource;
                    w2.writeUnitCartesian(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate), TestGenerateValidationDocument.<UnitCartesian> createList(
                            new UnitCartesian(0.0501133095086564, 0.917195967206924, 0.395272328843601), new UnitCartesian(0.797476048450763, 0.40584478979077, 0.446454878735849)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitCartesian.getValue(documentStartDate)).toEqualEpsilon(new Cartesian3(0.0501133095086564, 0.917195967206924, 0.395272328843601), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitCartesian.getValue(documentStopDate)).toEqualEpsilon(new Cartesian3(0.797476048450763, 0.40584478979077, 0.446454878735849), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$8 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_spherical"))) {
                    final CustomPropertyCesiumWriter w2 = using$8.resource;
                    w2.writeSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Spherical> createList(new Spherical(47098.0, 2231.0, 14088.0), new Spherical(34883.0, 48264.0, 41148.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_spherical.getValue(documentStartDate)).toEqual(Cartesian3.fromSpherical(new Spherical(47098, 2231, 14088)));");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_spherical.getValue(documentStopDate)).toEqual(Cartesian3.fromSpherical(new Spherical(34883, 48264, 41148)));");
                }
                try (Using<CustomPropertyCesiumWriter> using$9 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_unitSpherical"))) {
                    final CustomPropertyCesiumWriter w2 = using$9.resource;
                    w2.writeUnitSpherical(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<UnitSpherical> createList(new UnitSpherical(48811.0, 24254.0), new UnitSpherical(44800.0, 8111.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitSpherical.getValue(documentStartDate)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(48811, 24254)), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitSpherical.getValue(documentStopDate)).toEqualEpsilon(Cartesian3.fromSpherical(new Spherical(44800, 8111)), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$10 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_rgba"))) {
                    final CustomPropertyCesiumWriter w2 = using$10.resource;
                    w2.writeRgba(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(46, 179, 175, 115), ColorHelper.fromArgb(156, 136, 187, 237)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_rgba.getValue(documentStartDate)).toEqual(Color.fromBytes(179, 175, 115, 46));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_rgba.getValue(documentStopDate)).toEqual(Color.fromBytes(136, 187, 237, 156));");
                }
                try (Using<CustomPropertyCesiumWriter> using$11 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_rgbaf"))) {
                    final CustomPropertyCesiumWriter w2 = using$11.resource;
                    w2.writeRgbaf(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Color> createList(ColorHelper.fromArgb(184, 227, 115, 150), ColorHelper.fromArgb(108, 107, 215, 92)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_rgbaf.getValue(documentStartDate)).toEqualEpsilon(new Color(0.890196078431372, 0.450980392156863, 0.588235294117647, 0.72156862745098), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_rgbaf.getValue(documentStopDate)).toEqualEpsilon(new Color(0.419607843137255, 0.843137254901961, 0.36078431372549, 0.423529411764706), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$12 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_number"))) {
                    final CustomPropertyCesiumWriter w2 = using$12.resource;
                    w2.writeNumber(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<Double> createList(24561.0, 45446.0));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_number.getValue(documentStartDate)).toEqual(24561.0);");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_number.getValue(documentStopDate)).toEqual(45446.0);");
                }
                try (Using<CustomPropertyCesiumWriter> using$13 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_nearFarScalar"))) {
                    final CustomPropertyCesiumWriter w2 = using$13.resource;
                    w2.writeNearFarScalar(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<NearFarScalar> createList(new NearFarScalar(64112.0, 15354.0, 32827.0, 10368.0), new NearFarScalar(55643.0, 45785.0, 33458.0, 29826.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_nearFarScalar.getValue(documentStartDate)).toEqual(new NearFarScalar(64112, 15354, 32827, 10368));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_nearFarScalar.getValue(documentStopDate)).toEqual(new NearFarScalar(55643, 45785, 33458, 29826));");
                }
                try (Using<CustomPropertyCesiumWriter> using$14 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_unitQuaternion"))) {
                    final CustomPropertyCesiumWriter w2 = using$14.resource;
                    w2.writeUnitQuaternion(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<UnitQuaternion> createList(new UnitQuaternion(0.253327354041402, 0.697299305414108, 0.26496667122144, 0.615947719782462),
                                    new UnitQuaternion(0.0332513608247514, 0.134764165794432, 0.408681085292446, 0.902060273565587)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitQuaternion.getValue(documentStartDate)).toEqualEpsilon(new Quaternion(0.697299305414108, 0.26496667122144, 0.615947719782462, 0.253327354041402), 1e-14);");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_unitQuaternion.getValue(documentStopDate)).toEqualEpsilon(new Quaternion(0.134764165794432, 0.408681085292446, 0.902060273565587, 0.0332513608247514), 1e-14);");
                }
                try (Using<CustomPropertyCesiumWriter> using$15 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_wsen"))) {
                    final CustomPropertyCesiumWriter w2 = using$15.resource;
                    w2.writeWsen(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<CartographicExtent> createList(new CartographicExtent(1.4164143530628, 1.2888469381038, 0.679756561409663, 1.29649258884014),
                                    new CartographicExtent(1.19133054275098, 0.9154648059314, 0.71347968461712, 1.32750822775441)));
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_wsen.getValue(documentStartDate)).toEqual(new Rectangle(1.4164143530628, 1.2888469381038, 0.679756561409663, 1.29649258884014));");
                    TextWriterHelper.writeLine(m_assertionsWriter,
                            "    expect(e.properties.custom_wsen.getValue(documentStopDate)).toEqual(new Rectangle(1.19133054275098, 0.9154648059314, 0.71347968461712, 1.32750822775441));");
                }
                try (Using<CustomPropertyCesiumWriter> using$16 = new Using<CustomPropertyCesiumWriter>(w.openCustomPropertyProperty("custom_wsenDegrees"))) {
                    final CustomPropertyCesiumWriter w2 = using$16.resource;
                    w2.writeWsenDegrees(TestGenerateValidationDocument.<JulianDate> createList(m_documentStartDate, m_documentStopDate),
                            TestGenerateValidationDocument.<CartographicExtent> createList(new CartographicExtent(29.0, 11.0, 17.0, 36.0), new CartographicExtent(37.0, 16.0, 25.0, 23.0)));
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_wsenDegrees.getValue(documentStartDate)).toEqual(Rectangle.fromDegrees(29, 11, 17, 36));");
                    TextWriterHelper.writeLine(m_assertionsWriter, "    expect(e.properties.custom_wsenDegrees.getValue(documentStopDate)).toEqual(Rectangle.fromDegrees(37, 16, 25, 23));");
                }
            }
        }
    }

    @Nonnull
    private static final TestContextRule rule$testContext = new TestContextRule();

    @Nonnull
    @Rule
    @ClassRule
    public static TestContextRule getRule$testContext() {
        return rule$testContext;
    }
}