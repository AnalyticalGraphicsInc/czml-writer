// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Collections.Generic;
using System.Drawing;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>Ellipsoid</c> to a <see cref="CesiumOutputStream"/>. A <c>Ellipsoid</c> is a closed quadric surface that is a three-dimensional analogue of an ellipse.
    /// </summary>
    public class EllipsoidCesiumWriter : CesiumPropertyWriter<EllipsoidCesiumWriter>
    {
        /// <summary>
        /// The name of the <c>show</c> property.
        /// </summary>
        [NotNull]
        public const string ShowPropertyName = "show";

        /// <summary>
        /// The name of the <c>radii</c> property.
        /// </summary>
        [NotNull]
        public const string RadiiPropertyName = "radii";

        /// <summary>
        /// The name of the <c>innerRadii</c> property.
        /// </summary>
        [NotNull]
        public const string InnerRadiiPropertyName = "innerRadii";

        /// <summary>
        /// The name of the <c>minimumClock</c> property.
        /// </summary>
        [NotNull]
        public const string MinimumClockPropertyName = "minimumClock";

        /// <summary>
        /// The name of the <c>maximumClock</c> property.
        /// </summary>
        [NotNull]
        public const string MaximumClockPropertyName = "maximumClock";

        /// <summary>
        /// The name of the <c>minimumCone</c> property.
        /// </summary>
        [NotNull]
        public const string MinimumConePropertyName = "minimumCone";

        /// <summary>
        /// The name of the <c>maximumCone</c> property.
        /// </summary>
        [NotNull]
        public const string MaximumConePropertyName = "maximumCone";

        /// <summary>
        /// The name of the <c>heightReference</c> property.
        /// </summary>
        [NotNull]
        public const string HeightReferencePropertyName = "heightReference";

        /// <summary>
        /// The name of the <c>fill</c> property.
        /// </summary>
        [NotNull]
        public const string FillPropertyName = "fill";

        /// <summary>
        /// The name of the <c>material</c> property.
        /// </summary>
        [NotNull]
        public const string MaterialPropertyName = "material";

        /// <summary>
        /// The name of the <c>outline</c> property.
        /// </summary>
        [NotNull]
        public const string OutlinePropertyName = "outline";

        /// <summary>
        /// The name of the <c>outlineColor</c> property.
        /// </summary>
        [NotNull]
        public const string OutlineColorPropertyName = "outlineColor";

        /// <summary>
        /// The name of the <c>outlineWidth</c> property.
        /// </summary>
        [NotNull]
        public const string OutlineWidthPropertyName = "outlineWidth";

        /// <summary>
        /// The name of the <c>stackPartitions</c> property.
        /// </summary>
        [NotNull]
        public const string StackPartitionsPropertyName = "stackPartitions";

        /// <summary>
        /// The name of the <c>slicePartitions</c> property.
        /// </summary>
        [NotNull]
        public const string SlicePartitionsPropertyName = "slicePartitions";

        /// <summary>
        /// The name of the <c>subdivisions</c> property.
        /// </summary>
        [NotNull]
        public const string SubdivisionsPropertyName = "subdivisions";

        /// <summary>
        /// The name of the <c>shadows</c> property.
        /// </summary>
        [NotNull]
        public const string ShadowsPropertyName = "shadows";

        /// <summary>
        /// The name of the <c>distanceDisplayCondition</c> property.
        /// </summary>
        [NotNull]
        public const string DistanceDisplayConditionPropertyName = "distanceDisplayCondition";

        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<BooleanCesiumWriter> m_show = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(ShowPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<EllipsoidRadiiCesiumWriter> m_radii = new Lazy<EllipsoidRadiiCesiumWriter>(() => new EllipsoidRadiiCesiumWriter(RadiiPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<EllipsoidRadiiCesiumWriter> m_innerRadii = new Lazy<EllipsoidRadiiCesiumWriter>(() => new EllipsoidRadiiCesiumWriter(InnerRadiiPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DoubleCesiumWriter> m_minimumClock = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(MinimumClockPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DoubleCesiumWriter> m_maximumClock = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(MaximumClockPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DoubleCesiumWriter> m_minimumCone = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(MinimumConePropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DoubleCesiumWriter> m_maximumCone = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(MaximumConePropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<HeightReferenceCesiumWriter> m_heightReference = new Lazy<HeightReferenceCesiumWriter>(() => new HeightReferenceCesiumWriter(HeightReferencePropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<BooleanCesiumWriter> m_fill = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(FillPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<MaterialCesiumWriter> m_material = new Lazy<MaterialCesiumWriter>(() => new MaterialCesiumWriter(MaterialPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<BooleanCesiumWriter> m_outline = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(OutlinePropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<ColorCesiumWriter> m_outlineColor = new Lazy<ColorCesiumWriter>(() => new ColorCesiumWriter(OutlineColorPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DoubleCesiumWriter> m_outlineWidth = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(OutlineWidthPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<IntegerCesiumWriter> m_stackPartitions = new Lazy<IntegerCesiumWriter>(() => new IntegerCesiumWriter(StackPartitionsPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<IntegerCesiumWriter> m_slicePartitions = new Lazy<IntegerCesiumWriter>(() => new IntegerCesiumWriter(SlicePartitionsPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<IntegerCesiumWriter> m_subdivisions = new Lazy<IntegerCesiumWriter>(() => new IntegerCesiumWriter(SubdivisionsPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<ShadowModeCesiumWriter> m_shadows = new Lazy<ShadowModeCesiumWriter>(() => new ShadowModeCesiumWriter(ShadowsPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DistanceDisplayConditionCesiumWriter> m_distanceDisplayCondition = new Lazy<DistanceDisplayConditionCesiumWriter>(() => new DistanceDisplayConditionCesiumWriter(DistanceDisplayConditionPropertyName), false);

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public EllipsoidCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected EllipsoidCesiumWriter([NotNull] EllipsoidCesiumWriter existingInstance)
            : base(existingInstance)
        {
        }

        /// <inheritdoc/>
        public override EllipsoidCesiumWriter Clone()
        {
            return new EllipsoidCesiumWriter(this);
        }

        /// <summary>
        /// Gets the writer for the <c>show</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>show</c> property defines whether or not the ellipsoid is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter ShowWriter
        {
            get { return m_show.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>show</c> property. The <c>show</c> property defines whether or not the ellipsoid is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenShowProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ShowWriter);
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>boolean</c> value. The <c>show</c> property specifies whether or not the ellipsoid is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteShowProperty(bool value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the ellipsoid is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(Reference value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the ellipsoid is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(string value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the ellipsoid is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the ellipsoid is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>radii</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>radii</c> property defines the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public EllipsoidRadiiCesiumWriter RadiiWriter
        {
            get { return m_radii.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>radii</c> property. The <c>radii</c> property defines the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public EllipsoidRadiiCesiumWriter OpenRadiiProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(RadiiWriter);
        }

        /// <summary>
        /// Writes a value for the <c>radii</c> property as a <c>cartesian</c> value. The <c>radii</c> property specifies the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteRadiiProperty(Cartesian value)
        {
            using (var writer = OpenRadiiProperty())
            {
                writer.WriteCartesian(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radii</c> property as a <c>cartesian</c> value. The <c>radii</c> property specifies the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteRadiiProperty(IList<JulianDate> dates, IList<Cartesian> values)
        {
            using (var writer = OpenRadiiProperty())
            {
                writer.WriteCartesian(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radii</c> property as a <c>cartesian</c> value. The <c>radii</c> property specifies the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteRadiiProperty(IList<JulianDate> dates, IList<Cartesian> values, int startIndex, int length)
        {
            using (var writer = OpenRadiiProperty())
            {
                writer.WriteCartesian(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radii</c> property as a <c>reference</c> value. The <c>radii</c> property specifies the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteRadiiPropertyReference(Reference value)
        {
            using (var writer = OpenRadiiProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radii</c> property as a <c>reference</c> value. The <c>radii</c> property specifies the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteRadiiPropertyReference(string value)
        {
            using (var writer = OpenRadiiProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radii</c> property as a <c>reference</c> value. The <c>radii</c> property specifies the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteRadiiPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenRadiiProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radii</c> property as a <c>reference</c> value. The <c>radii</c> property specifies the radii of the ellipsoid. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteRadiiPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenRadiiProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>innerRadii</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>innerRadii</c> property defines the inner radii of the ellipsoid.
        /// </summary>
        [NotNull]
        public EllipsoidRadiiCesiumWriter InnerRadiiWriter
        {
            get { return m_innerRadii.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>innerRadii</c> property. The <c>innerRadii</c> property defines the inner radii of the ellipsoid.
        /// </summary>
        [NotNull]
        public EllipsoidRadiiCesiumWriter OpenInnerRadiiProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(InnerRadiiWriter);
        }

        /// <summary>
        /// Writes a value for the <c>innerRadii</c> property as a <c>cartesian</c> value. The <c>innerRadii</c> property specifies the inner radii of the ellipsoid.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteInnerRadiiProperty(Cartesian value)
        {
            using (var writer = OpenInnerRadiiProperty())
            {
                writer.WriteCartesian(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>innerRadii</c> property as a <c>cartesian</c> value. The <c>innerRadii</c> property specifies the inner radii of the ellipsoid.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteInnerRadiiProperty(IList<JulianDate> dates, IList<Cartesian> values)
        {
            using (var writer = OpenInnerRadiiProperty())
            {
                writer.WriteCartesian(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>innerRadii</c> property as a <c>cartesian</c> value. The <c>innerRadii</c> property specifies the inner radii of the ellipsoid.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteInnerRadiiProperty(IList<JulianDate> dates, IList<Cartesian> values, int startIndex, int length)
        {
            using (var writer = OpenInnerRadiiProperty())
            {
                writer.WriteCartesian(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>innerRadii</c> property as a <c>reference</c> value. The <c>innerRadii</c> property specifies the inner radii of the ellipsoid.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteInnerRadiiPropertyReference(Reference value)
        {
            using (var writer = OpenInnerRadiiProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>innerRadii</c> property as a <c>reference</c> value. The <c>innerRadii</c> property specifies the inner radii of the ellipsoid.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteInnerRadiiPropertyReference(string value)
        {
            using (var writer = OpenInnerRadiiProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>innerRadii</c> property as a <c>reference</c> value. The <c>innerRadii</c> property specifies the inner radii of the ellipsoid.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteInnerRadiiPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenInnerRadiiProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>innerRadii</c> property as a <c>reference</c> value. The <c>innerRadii</c> property specifies the inner radii of the ellipsoid.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteInnerRadiiPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenInnerRadiiProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>minimumClock</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>minimumClock</c> property defines the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter MinimumClockWriter
        {
            get { return m_minimumClock.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>minimumClock</c> property. The <c>minimumClock</c> property defines the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenMinimumClockProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MinimumClockWriter);
        }

        /// <summary>
        /// Writes a value for the <c>minimumClock</c> property as a <c>number</c> value. The <c>minimumClock</c> property specifies the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteMinimumClockProperty(double value)
        {
            using (var writer = OpenMinimumClockProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumClock</c> property as a <c>number</c> value. The <c>minimumClock</c> property specifies the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteMinimumClockProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenMinimumClockProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumClock</c> property as a <c>number</c> value. The <c>minimumClock</c> property specifies the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteMinimumClockProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenMinimumClockProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumClock</c> property as a <c>reference</c> value. The <c>minimumClock</c> property specifies the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMinimumClockPropertyReference(Reference value)
        {
            using (var writer = OpenMinimumClockProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumClock</c> property as a <c>reference</c> value. The <c>minimumClock</c> property specifies the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMinimumClockPropertyReference(string value)
        {
            using (var writer = OpenMinimumClockProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumClock</c> property as a <c>reference</c> value. The <c>minimumClock</c> property specifies the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteMinimumClockPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenMinimumClockProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumClock</c> property as a <c>reference</c> value. The <c>minimumClock</c> property specifies the minimum clock angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteMinimumClockPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenMinimumClockProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>maximumClock</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>maximumClock</c> property defines the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter MaximumClockWriter
        {
            get { return m_maximumClock.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>maximumClock</c> property. The <c>maximumClock</c> property defines the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenMaximumClockProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MaximumClockWriter);
        }

        /// <summary>
        /// Writes a value for the <c>maximumClock</c> property as a <c>number</c> value. The <c>maximumClock</c> property specifies the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteMaximumClockProperty(double value)
        {
            using (var writer = OpenMaximumClockProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumClock</c> property as a <c>number</c> value. The <c>maximumClock</c> property specifies the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteMaximumClockProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenMaximumClockProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumClock</c> property as a <c>number</c> value. The <c>maximumClock</c> property specifies the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteMaximumClockProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenMaximumClockProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumClock</c> property as a <c>reference</c> value. The <c>maximumClock</c> property specifies the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMaximumClockPropertyReference(Reference value)
        {
            using (var writer = OpenMaximumClockProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumClock</c> property as a <c>reference</c> value. The <c>maximumClock</c> property specifies the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMaximumClockPropertyReference(string value)
        {
            using (var writer = OpenMaximumClockProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumClock</c> property as a <c>reference</c> value. The <c>maximumClock</c> property specifies the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteMaximumClockPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenMaximumClockProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumClock</c> property as a <c>reference</c> value. The <c>maximumClock</c> property specifies the maximum clock angle of the ellipsoid. If not specified, the default value is 2π.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteMaximumClockPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenMaximumClockProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>minimumCone</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>minimumCone</c> property defines the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter MinimumConeWriter
        {
            get { return m_minimumCone.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>minimumCone</c> property. The <c>minimumCone</c> property defines the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenMinimumConeProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MinimumConeWriter);
        }

        /// <summary>
        /// Writes a value for the <c>minimumCone</c> property as a <c>number</c> value. The <c>minimumCone</c> property specifies the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteMinimumConeProperty(double value)
        {
            using (var writer = OpenMinimumConeProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumCone</c> property as a <c>number</c> value. The <c>minimumCone</c> property specifies the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteMinimumConeProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenMinimumConeProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumCone</c> property as a <c>number</c> value. The <c>minimumCone</c> property specifies the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteMinimumConeProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenMinimumConeProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumCone</c> property as a <c>reference</c> value. The <c>minimumCone</c> property specifies the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMinimumConePropertyReference(Reference value)
        {
            using (var writer = OpenMinimumConeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumCone</c> property as a <c>reference</c> value. The <c>minimumCone</c> property specifies the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMinimumConePropertyReference(string value)
        {
            using (var writer = OpenMinimumConeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumCone</c> property as a <c>reference</c> value. The <c>minimumCone</c> property specifies the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteMinimumConePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenMinimumConeProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>minimumCone</c> property as a <c>reference</c> value. The <c>minimumCone</c> property specifies the minimum cone angle of the ellipsoid. If not specified, the default value is 0.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteMinimumConePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenMinimumConeProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>maximumCone</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>maximumCone</c> property defines the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter MaximumConeWriter
        {
            get { return m_maximumCone.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>maximumCone</c> property. The <c>maximumCone</c> property defines the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenMaximumConeProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MaximumConeWriter);
        }

        /// <summary>
        /// Writes a value for the <c>maximumCone</c> property as a <c>number</c> value. The <c>maximumCone</c> property specifies the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteMaximumConeProperty(double value)
        {
            using (var writer = OpenMaximumConeProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumCone</c> property as a <c>number</c> value. The <c>maximumCone</c> property specifies the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteMaximumConeProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenMaximumConeProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumCone</c> property as a <c>number</c> value. The <c>maximumCone</c> property specifies the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteMaximumConeProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenMaximumConeProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumCone</c> property as a <c>reference</c> value. The <c>maximumCone</c> property specifies the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMaximumConePropertyReference(Reference value)
        {
            using (var writer = OpenMaximumConeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumCone</c> property as a <c>reference</c> value. The <c>maximumCone</c> property specifies the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMaximumConePropertyReference(string value)
        {
            using (var writer = OpenMaximumConeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumCone</c> property as a <c>reference</c> value. The <c>maximumCone</c> property specifies the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteMaximumConePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenMaximumConeProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumCone</c> property as a <c>reference</c> value. The <c>maximumCone</c> property specifies the maximum cone angle of the ellipsoid. If not specified, the default value is π.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteMaximumConePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenMaximumConeProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>heightReference</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>heightReference</c> property defines the height reference of the ellipsoid, which indicates if the position is relative to terrain or not. If not specified, the default value is NONE.
        /// </summary>
        [NotNull]
        public HeightReferenceCesiumWriter HeightReferenceWriter
        {
            get { return m_heightReference.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>heightReference</c> property. The <c>heightReference</c> property defines the height reference of the ellipsoid, which indicates if the position is relative to terrain or not. If not specified, the default value is NONE.
        /// </summary>
        [NotNull]
        public HeightReferenceCesiumWriter OpenHeightReferenceProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(HeightReferenceWriter);
        }

        /// <summary>
        /// Writes a value for the <c>heightReference</c> property as a <c>heightReference</c> value. The <c>heightReference</c> property specifies the height reference of the ellipsoid, which indicates if the position is relative to terrain or not. If not specified, the default value is NONE.
        /// </summary>
        /// <param name="value">The height reference.</param>
        public void WriteHeightReferenceProperty(CesiumHeightReference value)
        {
            using (var writer = OpenHeightReferenceProperty())
            {
                writer.WriteHeightReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>heightReference</c> property as a <c>reference</c> value. The <c>heightReference</c> property specifies the height reference of the ellipsoid, which indicates if the position is relative to terrain or not. If not specified, the default value is NONE.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteHeightReferencePropertyReference(Reference value)
        {
            using (var writer = OpenHeightReferenceProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>heightReference</c> property as a <c>reference</c> value. The <c>heightReference</c> property specifies the height reference of the ellipsoid, which indicates if the position is relative to terrain or not. If not specified, the default value is NONE.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteHeightReferencePropertyReference(string value)
        {
            using (var writer = OpenHeightReferenceProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>heightReference</c> property as a <c>reference</c> value. The <c>heightReference</c> property specifies the height reference of the ellipsoid, which indicates if the position is relative to terrain or not. If not specified, the default value is NONE.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteHeightReferencePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenHeightReferenceProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>heightReference</c> property as a <c>reference</c> value. The <c>heightReference</c> property specifies the height reference of the ellipsoid, which indicates if the position is relative to terrain or not. If not specified, the default value is NONE.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteHeightReferencePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenHeightReferenceProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>fill</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>fill</c> property defines whether or not the ellipsoid is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter FillWriter
        {
            get { return m_fill.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>fill</c> property. The <c>fill</c> property defines whether or not the ellipsoid is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenFillProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(FillWriter);
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>boolean</c> value. The <c>fill</c> property specifies whether or not the ellipsoid is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteFillProperty(bool value)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the ellipsoid is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteFillPropertyReference(Reference value)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the ellipsoid is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteFillPropertyReference(string value)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the ellipsoid is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteFillPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the ellipsoid is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteFillPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>material</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>material</c> property defines the material to display on the surface of the ellipsoid. If not specified, the default value is solid white.
        /// </summary>
        [NotNull]
        public MaterialCesiumWriter MaterialWriter
        {
            get { return m_material.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>material</c> property. The <c>material</c> property defines the material to display on the surface of the ellipsoid. If not specified, the default value is solid white.
        /// </summary>
        [NotNull]
        public MaterialCesiumWriter OpenMaterialProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MaterialWriter);
        }

        /// <summary>
        /// Gets the writer for the <c>outline</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>outline</c> property defines whether or not the ellipsoid is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OutlineWriter
        {
            get { return m_outline.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>outline</c> property. The <c>outline</c> property defines whether or not the ellipsoid is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenOutlineProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(OutlineWriter);
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>boolean</c> value. The <c>outline</c> property specifies whether or not the ellipsoid is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteOutlineProperty(bool value)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the ellipsoid is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlinePropertyReference(Reference value)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the ellipsoid is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlinePropertyReference(string value)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the ellipsoid is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteOutlinePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the ellipsoid is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteOutlinePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>outlineColor</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>outlineColor</c> property defines the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        [NotNull]
        public ColorCesiumWriter OutlineColorWriter
        {
            get { return m_outlineColor.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>outlineColor</c> property. The <c>outlineColor</c> property defines the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        [NotNull]
        public ColorCesiumWriter OpenOutlineColorProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(OutlineColorWriter);
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="color">The color.</param>
        public void WriteOutlineColorProperty(Color color)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(color);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="red">The red component in the range 0 to 255.</param>
        /// <param name="green">The green component in the range 0 to 255.</param>
        /// <param name="blue">The blue component in the range 0 to 255.</param>
        /// <param name="alpha">The alpha component in the range 0 to 255.</param>
        public void WriteOutlineColorProperty(int red, int green, int blue, int alpha)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(red, green, blue, alpha);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteOutlineColorProperty(IList<JulianDate> dates, IList<Color> values)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="colors">The color corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteOutlineColorProperty(IList<JulianDate> dates, IList<Color> colors, int startIndex, int length)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(dates, colors, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="color">The color.</param>
        public void WriteOutlineColorPropertyRgbaf(Color color)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(color);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="red">The red component in the range 0 to 1.0.</param>
        /// <param name="green">The green component in the range 0 to 1.0.</param>
        /// <param name="blue">The blue component in the range 0 to 1.0.</param>
        /// <param name="alpha">The alpha component in the range 0 to 1.0.</param>
        public void WriteOutlineColorPropertyRgbaf(float red, float green, float blue, float alpha)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(red, green, blue, alpha);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteOutlineColorPropertyRgbaf(IList<JulianDate> dates, IList<Color> values)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="colors">The color corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteOutlineColorPropertyRgbaf(IList<JulianDate> dates, IList<Color> colors, int startIndex, int length)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(dates, colors, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineColorPropertyReference(Reference value)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineColorPropertyReference(string value)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteOutlineColorPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the ellipsoid outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteOutlineColorPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>outlineWidth</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>outlineWidth</c> property defines the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OutlineWidthWriter
        {
            get { return m_outlineWidth.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>outlineWidth</c> property. The <c>outlineWidth</c> property defines the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenOutlineWidthProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(OutlineWidthWriter);
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>number</c> value. The <c>outlineWidth</c> property specifies the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteOutlineWidthProperty(double value)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>number</c> value. The <c>outlineWidth</c> property specifies the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteOutlineWidthProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>number</c> value. The <c>outlineWidth</c> property specifies the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteOutlineWidthProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineWidthPropertyReference(Reference value)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineWidthPropertyReference(string value)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteOutlineWidthPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the ellipsoid outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteOutlineWidthPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>stackPartitions</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>stackPartitions</c> property defines the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter StackPartitionsWriter
        {
            get { return m_stackPartitions.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>stackPartitions</c> property. The <c>stackPartitions</c> property defines the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter OpenStackPartitionsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(StackPartitionsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>stackPartitions</c> property as a <c>number</c> value. The <c>stackPartitions</c> property specifies the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteStackPartitionsProperty(int value)
        {
            using (var writer = OpenStackPartitionsProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>stackPartitions</c> property as a <c>number</c> value. The <c>stackPartitions</c> property specifies the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteStackPartitionsProperty(IList<JulianDate> dates, IList<int> values)
        {
            using (var writer = OpenStackPartitionsProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>stackPartitions</c> property as a <c>number</c> value. The <c>stackPartitions</c> property specifies the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteStackPartitionsProperty(IList<JulianDate> dates, IList<int> values, int startIndex, int length)
        {
            using (var writer = OpenStackPartitionsProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>stackPartitions</c> property as a <c>reference</c> value. The <c>stackPartitions</c> property specifies the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteStackPartitionsPropertyReference(Reference value)
        {
            using (var writer = OpenStackPartitionsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>stackPartitions</c> property as a <c>reference</c> value. The <c>stackPartitions</c> property specifies the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteStackPartitionsPropertyReference(string value)
        {
            using (var writer = OpenStackPartitionsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>stackPartitions</c> property as a <c>reference</c> value. The <c>stackPartitions</c> property specifies the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteStackPartitionsPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenStackPartitionsProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>stackPartitions</c> property as a <c>reference</c> value. The <c>stackPartitions</c> property specifies the number of times to partition the ellipsoid into stacks. If not specified, the default value is 64.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteStackPartitionsPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenStackPartitionsProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>slicePartitions</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>slicePartitions</c> property defines the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter SlicePartitionsWriter
        {
            get { return m_slicePartitions.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>slicePartitions</c> property. The <c>slicePartitions</c> property defines the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter OpenSlicePartitionsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(SlicePartitionsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>slicePartitions</c> property as a <c>number</c> value. The <c>slicePartitions</c> property specifies the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteSlicePartitionsProperty(int value)
        {
            using (var writer = OpenSlicePartitionsProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>slicePartitions</c> property as a <c>number</c> value. The <c>slicePartitions</c> property specifies the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteSlicePartitionsProperty(IList<JulianDate> dates, IList<int> values)
        {
            using (var writer = OpenSlicePartitionsProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>slicePartitions</c> property as a <c>number</c> value. The <c>slicePartitions</c> property specifies the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteSlicePartitionsProperty(IList<JulianDate> dates, IList<int> values, int startIndex, int length)
        {
            using (var writer = OpenSlicePartitionsProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>slicePartitions</c> property as a <c>reference</c> value. The <c>slicePartitions</c> property specifies the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteSlicePartitionsPropertyReference(Reference value)
        {
            using (var writer = OpenSlicePartitionsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>slicePartitions</c> property as a <c>reference</c> value. The <c>slicePartitions</c> property specifies the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteSlicePartitionsPropertyReference(string value)
        {
            using (var writer = OpenSlicePartitionsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>slicePartitions</c> property as a <c>reference</c> value. The <c>slicePartitions</c> property specifies the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteSlicePartitionsPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenSlicePartitionsProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>slicePartitions</c> property as a <c>reference</c> value. The <c>slicePartitions</c> property specifies the number of times to partition the ellipsoid into radial slices. If not specified, the default value is 64.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteSlicePartitionsPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenSlicePartitionsProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>subdivisions</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>subdivisions</c> property defines the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter SubdivisionsWriter
        {
            get { return m_subdivisions.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>subdivisions</c> property. The <c>subdivisions</c> property defines the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter OpenSubdivisionsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(SubdivisionsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>subdivisions</c> property as a <c>number</c> value. The <c>subdivisions</c> property specifies the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteSubdivisionsProperty(int value)
        {
            using (var writer = OpenSubdivisionsProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>subdivisions</c> property as a <c>number</c> value. The <c>subdivisions</c> property specifies the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteSubdivisionsProperty(IList<JulianDate> dates, IList<int> values)
        {
            using (var writer = OpenSubdivisionsProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>subdivisions</c> property as a <c>number</c> value. The <c>subdivisions</c> property specifies the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteSubdivisionsProperty(IList<JulianDate> dates, IList<int> values, int startIndex, int length)
        {
            using (var writer = OpenSubdivisionsProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>subdivisions</c> property as a <c>reference</c> value. The <c>subdivisions</c> property specifies the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteSubdivisionsPropertyReference(Reference value)
        {
            using (var writer = OpenSubdivisionsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>subdivisions</c> property as a <c>reference</c> value. The <c>subdivisions</c> property specifies the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteSubdivisionsPropertyReference(string value)
        {
            using (var writer = OpenSubdivisionsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>subdivisions</c> property as a <c>reference</c> value. The <c>subdivisions</c> property specifies the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteSubdivisionsPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenSubdivisionsProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>subdivisions</c> property as a <c>reference</c> value. The <c>subdivisions</c> property specifies the number of samples per outline ring, determining the granularity of the curvature. If not specified, the default value is 128.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteSubdivisionsPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenSubdivisionsProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>shadows</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>shadows</c> property defines whether or not the ellipsoid casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        [NotNull]
        public ShadowModeCesiumWriter ShadowsWriter
        {
            get { return m_shadows.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>shadows</c> property. The <c>shadows</c> property defines whether or not the ellipsoid casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        [NotNull]
        public ShadowModeCesiumWriter OpenShadowsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ShadowsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>shadowMode</c> value. The <c>shadows</c> property specifies whether or not the ellipsoid casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="value">The shadow mode.</param>
        public void WriteShadowsProperty(CesiumShadowMode value)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteShadowMode(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the ellipsoid casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShadowsPropertyReference(Reference value)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the ellipsoid casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShadowsPropertyReference(string value)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the ellipsoid casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteShadowsPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the ellipsoid casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteShadowsPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>distanceDisplayCondition</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>distanceDisplayCondition</c> property defines the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        [NotNull]
        public DistanceDisplayConditionCesiumWriter DistanceDisplayConditionWriter
        {
            get { return m_distanceDisplayCondition.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>distanceDisplayCondition</c> property. The <c>distanceDisplayCondition</c> property defines the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        [NotNull]
        public DistanceDisplayConditionCesiumWriter OpenDistanceDisplayConditionProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(DistanceDisplayConditionWriter);
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteDistanceDisplayConditionProperty(Bounds value)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="lowerBound">The lower bound.</param>
        /// <param name="upperBound">The upper bound.</param>
        public void WriteDistanceDisplayConditionProperty(double lowerBound, double upperBound)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(lowerBound, upperBound);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteDistanceDisplayConditionProperty(IList<JulianDate> dates, IList<Bounds> values)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteDistanceDisplayConditionProperty(IList<JulianDate> dates, IList<Bounds> values, int startIndex, int length)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteDistanceDisplayConditionPropertyReference(Reference value)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteDistanceDisplayConditionPropertyReference(string value)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteDistanceDisplayConditionPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this ellipsoid will be displayed.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteDistanceDisplayConditionPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

    }
}
