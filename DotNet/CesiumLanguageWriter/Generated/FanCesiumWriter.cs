// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Collections.Generic;
using System.Drawing;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>Fan</c> to a <see cref="CesiumOutputStream"/>. A <c>Fan</c> is a fan, which starts at a point or apex and extends in a specified list of directions from the apex. Each pair of directions forms a face of the fan extending to the specified radius.
    /// </summary>
    public class FanCesiumWriter : CesiumPropertyWriter<FanCesiumWriter>
    {
        /// <summary>
        /// The name of the <c>show</c> property.
        /// </summary>
        [NotNull]
        public const string ShowPropertyName = "show";

        /// <summary>
        /// The name of the <c>directions</c> property.
        /// </summary>
        [NotNull]
        public const string DirectionsPropertyName = "directions";

        /// <summary>
        /// The name of the <c>radius</c> property.
        /// </summary>
        [NotNull]
        public const string RadiusPropertyName = "radius";

        /// <summary>
        /// The name of the <c>perDirectionRadius</c> property.
        /// </summary>
        [NotNull]
        public const string PerDirectionRadiusPropertyName = "perDirectionRadius";

        /// <summary>
        /// The name of the <c>material</c> property.
        /// </summary>
        [NotNull]
        public const string MaterialPropertyName = "material";

        /// <summary>
        /// The name of the <c>fill</c> property.
        /// </summary>
        [NotNull]
        public const string FillPropertyName = "fill";

        /// <summary>
        /// The name of the <c>outline</c> property.
        /// </summary>
        [NotNull]
        public const string OutlinePropertyName = "outline";

        /// <summary>
        /// The name of the <c>outlineColor</c> property.
        /// </summary>
        [NotNull]
        public const string OutlineColorPropertyName = "outlineColor";

        /// <summary>
        /// The name of the <c>outlineWidth</c> property.
        /// </summary>
        [NotNull]
        public const string OutlineWidthPropertyName = "outlineWidth";

        /// <summary>
        /// The name of the <c>numberOfRings</c> property.
        /// </summary>
        [NotNull]
        public const string NumberOfRingsPropertyName = "numberOfRings";

        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<BooleanCesiumWriter> m_show = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(ShowPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DirectionListCesiumWriter> m_directions = new Lazy<DirectionListCesiumWriter>(() => new DirectionListCesiumWriter(DirectionsPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DoubleCesiumWriter> m_radius = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(RadiusPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<BooleanCesiumWriter> m_perDirectionRadius = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(PerDirectionRadiusPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<MaterialCesiumWriter> m_material = new Lazy<MaterialCesiumWriter>(() => new MaterialCesiumWriter(MaterialPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<BooleanCesiumWriter> m_fill = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(FillPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<BooleanCesiumWriter> m_outline = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(OutlinePropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<ColorCesiumWriter> m_outlineColor = new Lazy<ColorCesiumWriter>(() => new ColorCesiumWriter(OutlineColorPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<DoubleCesiumWriter> m_outlineWidth = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(OutlineWidthPropertyName), false);
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<IntegerCesiumWriter> m_numberOfRings = new Lazy<IntegerCesiumWriter>(() => new IntegerCesiumWriter(NumberOfRingsPropertyName), false);

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public FanCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected FanCesiumWriter([NotNull] FanCesiumWriter existingInstance)
            : base(existingInstance)
        {
        }

        /// <inheritdoc/>
        public override FanCesiumWriter Clone()
        {
            return new FanCesiumWriter(this);
        }

        /// <summary>
        /// Gets the writer for the <c>show</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>show</c> property defines whether or not the fan is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter ShowWriter
        {
            get { return m_show.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>show</c> property. The <c>show</c> property defines whether or not the fan is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenShowProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ShowWriter);
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>boolean</c> value. The <c>show</c> property specifies whether or not the fan is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteShowProperty(bool value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the fan is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(Reference value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the fan is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(string value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the fan is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the fan is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>directions</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>directions</c> property defines the list of directions defining the fan. This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public DirectionListCesiumWriter DirectionsWriter
        {
            get { return m_directions.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>directions</c> property. The <c>directions</c> property defines the list of directions defining the fan. This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public DirectionListCesiumWriter OpenDirectionsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(DirectionsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>directions</c> property as a <c>spherical</c> value. The <c>directions</c> property specifies the list of directions defining the fan. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteDirectionsProperty(IEnumerable<Spherical> values)
        {
            using (var writer = OpenDirectionsProperty())
            {
                writer.WriteSpherical(values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>directions</c> property as a <c>unitSpherical</c> value. The <c>directions</c> property specifies the list of directions defining the fan. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteDirectionsPropertyUnitSpherical(IEnumerable<UnitSpherical> values)
        {
            using (var writer = OpenDirectionsProperty())
            {
                writer.WriteUnitSpherical(values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>directions</c> property as a <c>cartesian</c> value. The <c>directions</c> property specifies the list of directions defining the fan. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteDirectionsPropertyCartesian(IEnumerable<Cartesian> values)
        {
            using (var writer = OpenDirectionsProperty())
            {
                writer.WriteCartesian(values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>directions</c> property as a <c>unitCartesian</c> value. The <c>directions</c> property specifies the list of directions defining the fan. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteDirectionsPropertyUnitCartesian(IEnumerable<UnitCartesian> values)
        {
            using (var writer = OpenDirectionsProperty())
            {
                writer.WriteUnitCartesian(values);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>radius</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>radius</c> property defines the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter RadiusWriter
        {
            get { return m_radius.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>radius</c> property. The <c>radius</c> property defines the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenRadiusProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(RadiusWriter);
        }

        /// <summary>
        /// Writes a value for the <c>radius</c> property as a <c>number</c> value. The <c>radius</c> property specifies the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteRadiusProperty(double value)
        {
            using (var writer = OpenRadiusProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radius</c> property as a <c>number</c> value. The <c>radius</c> property specifies the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteRadiusProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenRadiusProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radius</c> property as a <c>number</c> value. The <c>radius</c> property specifies the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteRadiusProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenRadiusProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radius</c> property as a <c>reference</c> value. The <c>radius</c> property specifies the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteRadiusPropertyReference(Reference value)
        {
            using (var writer = OpenRadiusProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radius</c> property as a <c>reference</c> value. The <c>radius</c> property specifies the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteRadiusPropertyReference(string value)
        {
            using (var writer = OpenRadiusProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radius</c> property as a <c>reference</c> value. The <c>radius</c> property specifies the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteRadiusPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenRadiusProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>radius</c> property as a <c>reference</c> value. The <c>radius</c> property specifies the radial limit of the fan. If <c>perDirectionRadius</c> is false, then this value is required.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteRadiusPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenRadiusProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>perDirectionRadius</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>perDirectionRadius</c> property defines whether the magnitude of each direction is used instead of a constant radius. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter PerDirectionRadiusWriter
        {
            get { return m_perDirectionRadius.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>perDirectionRadius</c> property. The <c>perDirectionRadius</c> property defines whether the magnitude of each direction is used instead of a constant radius. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenPerDirectionRadiusProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(PerDirectionRadiusWriter);
        }

        /// <summary>
        /// Writes a value for the <c>perDirectionRadius</c> property as a <c>boolean</c> value. The <c>perDirectionRadius</c> property specifies whether the magnitude of each direction is used instead of a constant radius. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WritePerDirectionRadiusProperty(bool value)
        {
            using (var writer = OpenPerDirectionRadiusProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>perDirectionRadius</c> property as a <c>reference</c> value. The <c>perDirectionRadius</c> property specifies whether the magnitude of each direction is used instead of a constant radius. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WritePerDirectionRadiusPropertyReference(Reference value)
        {
            using (var writer = OpenPerDirectionRadiusProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>perDirectionRadius</c> property as a <c>reference</c> value. The <c>perDirectionRadius</c> property specifies whether the magnitude of each direction is used instead of a constant radius. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WritePerDirectionRadiusPropertyReference(string value)
        {
            using (var writer = OpenPerDirectionRadiusProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>perDirectionRadius</c> property as a <c>reference</c> value. The <c>perDirectionRadius</c> property specifies whether the magnitude of each direction is used instead of a constant radius. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WritePerDirectionRadiusPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenPerDirectionRadiusProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>perDirectionRadius</c> property as a <c>reference</c> value. The <c>perDirectionRadius</c> property specifies whether the magnitude of each direction is used instead of a constant radius. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WritePerDirectionRadiusPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenPerDirectionRadiusProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>material</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>material</c> property defines the material to display on the surface of the fan. If not specified, the default value is solid white.
        /// </summary>
        [NotNull]
        public MaterialCesiumWriter MaterialWriter
        {
            get { return m_material.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>material</c> property. The <c>material</c> property defines the material to display on the surface of the fan. If not specified, the default value is solid white.
        /// </summary>
        [NotNull]
        public MaterialCesiumWriter OpenMaterialProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MaterialWriter);
        }

        /// <summary>
        /// Gets the writer for the <c>fill</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>fill</c> property defines whether or not the fan is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter FillWriter
        {
            get { return m_fill.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>fill</c> property. The <c>fill</c> property defines whether or not the fan is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenFillProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(FillWriter);
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>boolean</c> value. The <c>fill</c> property specifies whether or not the fan is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteFillProperty(bool value)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the fan is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteFillPropertyReference(Reference value)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the fan is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteFillPropertyReference(string value)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the fan is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteFillPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>fill</c> property as a <c>reference</c> value. The <c>fill</c> property specifies whether or not the fan is filled. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteFillPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenFillProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>outline</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>outline</c> property defines whether or not the fan is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OutlineWriter
        {
            get { return m_outline.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>outline</c> property. The <c>outline</c> property defines whether or not the fan is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenOutlineProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(OutlineWriter);
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>boolean</c> value. The <c>outline</c> property specifies whether or not the fan is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteOutlineProperty(bool value)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the fan is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlinePropertyReference(Reference value)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the fan is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlinePropertyReference(string value)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the fan is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteOutlinePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outline</c> property as a <c>reference</c> value. The <c>outline</c> property specifies whether or not the fan is outlined. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteOutlinePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenOutlineProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>outlineColor</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>outlineColor</c> property defines the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        [NotNull]
        public ColorCesiumWriter OutlineColorWriter
        {
            get { return m_outlineColor.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>outlineColor</c> property. The <c>outlineColor</c> property defines the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        [NotNull]
        public ColorCesiumWriter OpenOutlineColorProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(OutlineColorWriter);
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="color">The color.</param>
        public void WriteOutlineColorProperty(Color color)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(color);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="red">The red component in the range 0 to 255.</param>
        /// <param name="green">The green component in the range 0 to 255.</param>
        /// <param name="blue">The blue component in the range 0 to 255.</param>
        /// <param name="alpha">The alpha component in the range 0 to 255.</param>
        public void WriteOutlineColorProperty(int red, int green, int blue, int alpha)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(red, green, blue, alpha);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteOutlineColorProperty(IList<JulianDate> dates, IList<Color> values)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgba</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="colors">The color corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteOutlineColorProperty(IList<JulianDate> dates, IList<Color> colors, int startIndex, int length)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgba(dates, colors, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="color">The color.</param>
        public void WriteOutlineColorPropertyRgbaf(Color color)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(color);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="red">The red component in the range 0 to 1.0.</param>
        /// <param name="green">The green component in the range 0 to 1.0.</param>
        /// <param name="blue">The blue component in the range 0 to 1.0.</param>
        /// <param name="alpha">The alpha component in the range 0 to 1.0.</param>
        public void WriteOutlineColorPropertyRgbaf(float red, float green, float blue, float alpha)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(red, green, blue, alpha);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteOutlineColorPropertyRgbaf(IList<JulianDate> dates, IList<Color> values)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>rgbaf</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="colors">The color corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteOutlineColorPropertyRgbaf(IList<JulianDate> dates, IList<Color> colors, int startIndex, int length)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteRgbaf(dates, colors, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineColorPropertyReference(Reference value)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineColorPropertyReference(string value)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteOutlineColorPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineColor</c> property as a <c>reference</c> value. The <c>outlineColor</c> property specifies the color of the fan outline. If not specified, the default value is black.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteOutlineColorPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenOutlineColorProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>outlineWidth</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>outlineWidth</c> property defines the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OutlineWidthWriter
        {
            get { return m_outlineWidth.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>outlineWidth</c> property. The <c>outlineWidth</c> property defines the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenOutlineWidthProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(OutlineWidthWriter);
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>number</c> value. The <c>outlineWidth</c> property specifies the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteOutlineWidthProperty(double value)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>number</c> value. The <c>outlineWidth</c> property specifies the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteOutlineWidthProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>number</c> value. The <c>outlineWidth</c> property specifies the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteOutlineWidthProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineWidthPropertyReference(Reference value)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteOutlineWidthPropertyReference(string value)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteOutlineWidthPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>outlineWidth</c> property as a <c>reference</c> value. The <c>outlineWidth</c> property specifies the width of the fan outline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteOutlineWidthPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenOutlineWidthProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>numberOfRings</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>numberOfRings</c> property defines the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter NumberOfRingsWriter
        {
            get { return m_numberOfRings.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>numberOfRings</c> property. The <c>numberOfRings</c> property defines the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter OpenNumberOfRingsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(NumberOfRingsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>numberOfRings</c> property as a <c>number</c> value. The <c>numberOfRings</c> property specifies the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteNumberOfRingsProperty(int value)
        {
            using (var writer = OpenNumberOfRingsProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>numberOfRings</c> property as a <c>number</c> value. The <c>numberOfRings</c> property specifies the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteNumberOfRingsProperty(IList<JulianDate> dates, IList<int> values)
        {
            using (var writer = OpenNumberOfRingsProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>numberOfRings</c> property as a <c>number</c> value. The <c>numberOfRings</c> property specifies the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteNumberOfRingsProperty(IList<JulianDate> dates, IList<int> values, int startIndex, int length)
        {
            using (var writer = OpenNumberOfRingsProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>numberOfRings</c> property as a <c>reference</c> value. The <c>numberOfRings</c> property specifies the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteNumberOfRingsPropertyReference(Reference value)
        {
            using (var writer = OpenNumberOfRingsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>numberOfRings</c> property as a <c>reference</c> value. The <c>numberOfRings</c> property specifies the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteNumberOfRingsPropertyReference(string value)
        {
            using (var writer = OpenNumberOfRingsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>numberOfRings</c> property as a <c>reference</c> value. The <c>numberOfRings</c> property specifies the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteNumberOfRingsPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenNumberOfRingsProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>numberOfRings</c> property as a <c>reference</c> value. The <c>numberOfRings</c> property specifies the number of outline rings to draw, starting from the outer edge and equidistantly spaced towards the center. If not specified, the default value is 6.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteNumberOfRingsPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenNumberOfRingsProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

    }
}
