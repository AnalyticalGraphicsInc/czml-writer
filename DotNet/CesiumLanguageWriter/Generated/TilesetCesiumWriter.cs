// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Drawing;
using System.Collections.Generic;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>Tileset</c> to a <see cref="CesiumOutputStream"/>. A <c>Tileset</c> is a 3D Tiles tileset.
    /// </summary>
    public class TilesetCesiumWriter : CesiumPropertyWriter<TilesetCesiumWriter>
    {
        /// <summary>
        /// The name of the <c>show</c> property.
        /// </summary>
        [NotNull]
        public const string ShowPropertyName = "show";

        /// <summary>
        /// The name of the <c>uri</c> property.
        /// </summary>
        [NotNull]
        public const string UriPropertyName = "uri";

        /// <summary>
        /// The name of the <c>maximumScreenSpaceError</c> property.
        /// </summary>
        [NotNull]
        public const string MaximumScreenSpaceErrorPropertyName = "maximumScreenSpaceError";

        private readonly Lazy<BooleanCesiumWriter> m_show = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(ShowPropertyName), false);
        private readonly Lazy<UriCesiumWriter> m_uri = new Lazy<UriCesiumWriter>(() => new UriCesiumWriter(UriPropertyName), false);
        private readonly Lazy<DoubleCesiumWriter> m_maximumScreenSpaceError = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(MaximumScreenSpaceErrorPropertyName), false);

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public TilesetCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected TilesetCesiumWriter([NotNull] TilesetCesiumWriter existingInstance)
            : base(existingInstance)
        {
        }

        /// <inheritdoc/>
        public override TilesetCesiumWriter Clone()
        {
            return new TilesetCesiumWriter(this);
        }

        /// <summary>
        /// Gets the writer for the <c>show</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>show</c> property defines whether or not the tileset is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter ShowWriter
        {
            get { return m_show.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>show</c> property. The <c>show</c> property defines whether or not the tileset is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenShowProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ShowWriter);
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>boolean</c> value. The <c>show</c> property specifies whether or not the tileset is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteShowProperty(bool value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the tileset is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(Reference value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the tileset is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(string value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the tileset is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the tileset is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>uri</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>uri</c> property defines the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public UriCesiumWriter UriWriter
        {
            get { return m_uri.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>uri</c> property. The <c>uri</c> property defines the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public UriCesiumWriter OpenUriProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(UriWriter);
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>uri</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="resource">A resource object describing external data.</param>
        public void WriteUriProperty(CesiumResource resource)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteUri(resource);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>uri</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="uri">The URI of the data.</param>
        /// <param name="resourceBehavior">An enumeration describing how to include the URI in the document. For even more control, use the overload that takes a ICesiumUriResolver.</param>
        public void WriteUriProperty(Uri uri, CesiumResourceBehavior resourceBehavior)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteUri(uri, resourceBehavior);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>uri</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="uri">The URI of the data.</param>
        /// <param name="resourceBehavior">An enumeration describing how to include the URI in the document. For even more control, use the overload that takes a ICesiumUriResolver.</param>
        public void WriteUriProperty(string uri, CesiumResourceBehavior resourceBehavior)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteUri(uri, resourceBehavior);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>uri</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="uri">The URI of the data. The provided ICesiumUriResolver will be used to build the final URI embedded in the document.</param>
        /// <param name="resolver">An ICesiumUriResolver used to build the final URI that will be embedded in the document.</param>
        public void WriteUriProperty(Uri uri, ICesiumUriResolver resolver)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteUri(uri, resolver);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>uri</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="uri">The URI of the data. The provided ICesiumUriResolver will be used to build the final URI embedded in the document.</param>
        /// <param name="resolver">An ICesiumUriResolver used to build the final URI that will be embedded in the document.</param>
        public void WriteUriProperty(string uri, ICesiumUriResolver resolver)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteUri(uri, resolver);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>uri</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="image">The image. A data URI will be created for this image, using PNG encoding.</param>
        public void WriteUriProperty(Image image)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteUri(image);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>uri</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="image">The image. A data URI will be created for this image.</param>
        /// <param name="imageFormat">The image format to use to encode the image in the data URI.</param>
        public void WriteUriProperty(Image image, CesiumImageFormat imageFormat)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteUri(image, imageFormat);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>reference</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteUriPropertyReference(Reference value)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>reference</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteUriPropertyReference(string value)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>reference</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteUriPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>uri</c> property as a <c>reference</c> value. The <c>uri</c> property specifies the URI of a 3D tiles tileset. For broadest client compatibility, the URI should be accessible via Cross-Origin Resource Sharing (CORS). This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteUriPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenUriProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>maximumScreenSpaceError</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>maximumScreenSpaceError</c> property defines the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter MaximumScreenSpaceErrorWriter
        {
            get { return m_maximumScreenSpaceError.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>maximumScreenSpaceError</c> property. The <c>maximumScreenSpaceError</c> property defines the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenMaximumScreenSpaceErrorProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MaximumScreenSpaceErrorWriter);
        }

        /// <summary>
        /// Writes a value for the <c>maximumScreenSpaceError</c> property as a <c>number</c> value. The <c>maximumScreenSpaceError</c> property specifies the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteMaximumScreenSpaceErrorProperty(double value)
        {
            using (var writer = OpenMaximumScreenSpaceErrorProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumScreenSpaceError</c> property as a <c>number</c> value. The <c>maximumScreenSpaceError</c> property specifies the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteMaximumScreenSpaceErrorProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenMaximumScreenSpaceErrorProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumScreenSpaceError</c> property as a <c>number</c> value. The <c>maximumScreenSpaceError</c> property specifies the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteMaximumScreenSpaceErrorProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenMaximumScreenSpaceErrorProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumScreenSpaceError</c> property as a <c>reference</c> value. The <c>maximumScreenSpaceError</c> property specifies the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMaximumScreenSpaceErrorPropertyReference(Reference value)
        {
            using (var writer = OpenMaximumScreenSpaceErrorProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumScreenSpaceError</c> property as a <c>reference</c> value. The <c>maximumScreenSpaceError</c> property specifies the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteMaximumScreenSpaceErrorPropertyReference(string value)
        {
            using (var writer = OpenMaximumScreenSpaceErrorProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumScreenSpaceError</c> property as a <c>reference</c> value. The <c>maximumScreenSpaceError</c> property specifies the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteMaximumScreenSpaceErrorPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenMaximumScreenSpaceErrorProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>maximumScreenSpaceError</c> property as a <c>reference</c> value. The <c>maximumScreenSpaceError</c> property specifies the maximum screen space error used to drive level of detail refinement.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteMaximumScreenSpaceErrorPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenMaximumScreenSpaceErrorProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

    }
}
