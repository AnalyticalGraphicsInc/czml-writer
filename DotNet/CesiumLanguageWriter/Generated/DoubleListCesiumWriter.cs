// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Collections.Generic;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>DoubleList</c> to a <see cref="CesiumOutputStream"/>. A <c>DoubleList</c> is a list of floating-point numbers.
    /// </summary>
    public class DoubleListCesiumWriter : CesiumPropertyWriter<DoubleListCesiumWriter>, ICesiumDeletablePropertyWriter, ICesiumDoubleListValuePropertyWriter, ICesiumReferenceListValuePropertyWriter
    {
        /// <summary>
        /// The name of the <c>array</c> property.
        /// </summary>
        [NotNull]
        public const string ArrayPropertyName = "array";

        /// <summary>
        /// The name of the <c>references</c> property.
        /// </summary>
        [NotNull]
        public const string ReferencesPropertyName = "references";

        /// <summary>
        /// The name of the <c>delete</c> property.
        /// </summary>
        [NotNull]
        public const string DeletePropertyName = "delete";

        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumDoubleListValuePropertyAdaptor<DoubleListCesiumWriter>> m_asArray;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumReferenceListValuePropertyAdaptor<DoubleListCesiumWriter>> m_asReferences;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public DoubleListCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
            m_asArray = CreateAsArray();
            m_asReferences = CreateAsReferences();
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected DoubleListCesiumWriter([NotNull] DoubleListCesiumWriter existingInstance)
            : base(existingInstance)
        {
            m_asArray = CreateAsArray();
            m_asReferences = CreateAsReferences();
        }

        /// <inheritdoc/>
        public override DoubleListCesiumWriter Clone()
        {
            return new DoubleListCesiumWriter(this);
        }

        /// <summary>
        /// Writes the value expressed as a <c>array</c>, which is the list of values specified as an array of numbers.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteArray(IEnumerable<double> values)
        {
            const string PropertyName = ArrayPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteDoubleList(Output, values);
        }

        /// <summary>
        /// Writes the value expressed as a <c>references</c>, which is the list of values specified as references. Each reference is to a property that defines a single value, which may change with time.
        /// </summary>
        /// <param name="references">The list of references.</param>
        public void WriteReferences(IEnumerable<Reference> references)
        {
            const string PropertyName = ReferencesPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReferences(Output, references);
        }

        /// <summary>
        /// Writes the value expressed as a <c>delete</c>, which is whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteDelete(bool value)
        {
            const string PropertyName = DeletePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(value);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumDoubleListValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumDoubleListValuePropertyAdaptor<DoubleListCesiumWriter> AsArray()
        {
            return m_asArray.Value;
        }

        [NotNull]
        private Lazy<CesiumDoubleListValuePropertyAdaptor<DoubleListCesiumWriter>> CreateAsArray()
        {
            return new Lazy<CesiumDoubleListValuePropertyAdaptor<DoubleListCesiumWriter>>(CreateDoubleList, false);
        }

        [NotNull]
        private CesiumDoubleListValuePropertyAdaptor<DoubleListCesiumWriter> CreateDoubleList()
        {
            return CesiumValuePropertyAdaptors.CreateDoubleList(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumReferenceListValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumReferenceListValuePropertyAdaptor<DoubleListCesiumWriter> AsReferences()
        {
            return m_asReferences.Value;
        }

        [NotNull]
        private Lazy<CesiumReferenceListValuePropertyAdaptor<DoubleListCesiumWriter>> CreateAsReferences()
        {
            return new Lazy<CesiumReferenceListValuePropertyAdaptor<DoubleListCesiumWriter>>(CreateReferenceList, false);
        }

        [NotNull]
        private CesiumReferenceListValuePropertyAdaptor<DoubleListCesiumWriter> CreateReferenceList()
        {
            return CesiumValuePropertyAdaptors.CreateReferenceList(this);
        }

    }
}
