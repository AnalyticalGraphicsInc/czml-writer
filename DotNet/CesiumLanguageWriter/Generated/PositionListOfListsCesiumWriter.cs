// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Collections.Generic;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>PositionListOfLists</c> to a <see cref="CesiumOutputStream"/>. A <c>PositionListOfLists</c> is a list of lists of positions.
    /// </summary>
    public class PositionListOfListsCesiumWriter : CesiumPropertyWriter<PositionListOfListsCesiumWriter>, ICesiumDeletablePropertyWriter, ICesiumCartesian3ListOfListsValuePropertyWriter, ICesiumCartographicRadiansListOfListsValuePropertyWriter, ICesiumCartographicDegreesListOfListsValuePropertyWriter, ICesiumReferenceListOfListsValuePropertyWriter
    {
        /// <summary>
        /// The name of the <c>cartesian</c> property.
        /// </summary>
        [NotNull]
        public const string CartesianPropertyName = "cartesian";

        /// <summary>
        /// The name of the <c>cartographicRadians</c> property.
        /// </summary>
        [NotNull]
        public const string CartographicRadiansPropertyName = "cartographicRadians";

        /// <summary>
        /// The name of the <c>cartographicDegrees</c> property.
        /// </summary>
        [NotNull]
        public const string CartographicDegreesPropertyName = "cartographicDegrees";

        /// <summary>
        /// The name of the <c>references</c> property.
        /// </summary>
        [NotNull]
        public const string ReferencesPropertyName = "references";

        /// <summary>
        /// The name of the <c>delete</c> property.
        /// </summary>
        [NotNull]
        public const string DeletePropertyName = "delete";

        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartesian3ListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> m_asCartesian;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartographicRadiansListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> m_asCartographicRadians;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartographicDegreesListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> m_asCartographicDegrees;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumReferenceListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> m_asReferences;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public PositionListOfListsCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
            m_asCartesian = CreateAsCartesian();
            m_asCartographicRadians = CreateAsCartographicRadians();
            m_asCartographicDegrees = CreateAsCartographicDegrees();
            m_asReferences = CreateAsReferences();
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected PositionListOfListsCesiumWriter([NotNull] PositionListOfListsCesiumWriter existingInstance)
            : base(existingInstance)
        {
            m_asCartesian = CreateAsCartesian();
            m_asCartographicRadians = CreateAsCartographicRadians();
            m_asCartographicDegrees = CreateAsCartographicDegrees();
            m_asReferences = CreateAsReferences();
        }

        /// <inheritdoc/>
        public override PositionListOfListsCesiumWriter Clone()
        {
            return new PositionListOfListsCesiumWriter(this);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian</c>, which is the list of lists of positions specified as three-dimensional Cartesian values, <c>[X, Y, Z, X, Y, Z, ...]</c>, in meters relative to the <c>referenceFrame</c>.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteCartesian([CSToJavaUseWildcardGenerics] IEnumerable<IEnumerable<Cartesian>> values)
        {
            const string PropertyName = CartesianPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartesian3ListOfLists(Output, values);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicRadians</c>, which is the list of lists of positions specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]</c>, where Longitude and Latitude are in radians and Height is in meters.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteCartographicRadians([CSToJavaUseWildcardGenerics] IEnumerable<IEnumerable<Cartographic>> values)
        {
            const string PropertyName = CartographicRadiansPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartographicListOfLists(Output, values);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicDegrees</c>, which is the list of lists of positions specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height, Longitude, Latitude, Height, ...]</c>, where Longitude and Latitude are in degrees and Height is in meters.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WriteCartographicDegrees([CSToJavaUseWildcardGenerics] IEnumerable<IEnumerable<Cartographic>> values)
        {
            const string PropertyName = CartographicDegreesPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartographicListOfLists(Output, values);
        }

        /// <summary>
        /// Writes the value expressed as a <c>references</c>, which is the list of lists of positions specified as references. Each reference is to a property that defines a single position, which may change with time.
        /// </summary>
        /// <param name="references">The list of lists of references.</param>
        public void WriteReferences([CSToJavaUseWildcardGenerics] IEnumerable<IEnumerable<Reference>> references)
        {
            const string PropertyName = ReferencesPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReferenceListOfLists(Output, references);
        }

        /// <summary>
        /// Writes the value expressed as a <c>delete</c>, which is whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteDelete(bool value)
        {
            const string PropertyName = DeletePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(value);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartesian3ListOfListsValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartesian3ListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> AsCartesian()
        {
            return m_asCartesian.Value;
        }

        [NotNull]
        private Lazy<CesiumCartesian3ListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> CreateAsCartesian()
        {
            return new Lazy<CesiumCartesian3ListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>>(CreateCartesian3ListOfLists, false);
        }

        [NotNull]
        private CesiumCartesian3ListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> CreateCartesian3ListOfLists()
        {
            return CesiumValuePropertyAdaptors.CreateCartesian3ListOfLists(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartographicRadiansListOfListsValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartographicRadiansListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> AsCartographicRadians()
        {
            return m_asCartographicRadians.Value;
        }

        [NotNull]
        private Lazy<CesiumCartographicRadiansListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> CreateAsCartographicRadians()
        {
            return new Lazy<CesiumCartographicRadiansListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>>(CreateCartographicRadiansListOfLists, false);
        }

        [NotNull]
        private CesiumCartographicRadiansListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> CreateCartographicRadiansListOfLists()
        {
            return CesiumValuePropertyAdaptors.CreateCartographicRadiansListOfLists(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartographicDegreesListOfListsValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartographicDegreesListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> AsCartographicDegrees()
        {
            return m_asCartographicDegrees.Value;
        }

        [NotNull]
        private Lazy<CesiumCartographicDegreesListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> CreateAsCartographicDegrees()
        {
            return new Lazy<CesiumCartographicDegreesListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>>(CreateCartographicDegreesListOfLists, false);
        }

        [NotNull]
        private CesiumCartographicDegreesListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> CreateCartographicDegreesListOfLists()
        {
            return CesiumValuePropertyAdaptors.CreateCartographicDegreesListOfLists(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumReferenceListOfListsValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumReferenceListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> AsReferences()
        {
            return m_asReferences.Value;
        }

        [NotNull]
        private Lazy<CesiumReferenceListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>> CreateAsReferences()
        {
            return new Lazy<CesiumReferenceListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter>>(CreateReferenceListOfLists, false);
        }

        [NotNull]
        private CesiumReferenceListOfListsValuePropertyAdaptor<PositionListOfListsCesiumWriter> CreateReferenceListOfLists()
        {
            return CesiumValuePropertyAdaptors.CreateReferenceListOfLists(this);
        }

    }
}
