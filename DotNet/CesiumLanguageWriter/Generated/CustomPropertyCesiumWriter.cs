// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Collections.Generic;
using System.Drawing;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>CustomProperty</c> to a <see cref="CesiumOutputStream"/>. A <c>CustomProperty</c> is a custom property.
    /// </summary>
    public class CustomPropertyCesiumWriter : CesiumInterpolatablePropertyWriter<CustomPropertyCesiumWriter>, ICesiumDeletablePropertyWriter, ICesiumBooleanValuePropertyWriter, ICesiumBoundingRectangleValuePropertyWriter, ICesiumCartesian3ValuePropertyWriter, ICesiumCartographicDegreesValuePropertyWriter, ICesiumCartographicRadiansValuePropertyWriter, ICesiumCartesian2ValuePropertyWriter, ICesiumUnitCartesian3ValuePropertyWriter, ICesiumSphericalValuePropertyWriter, ICesiumUnitSphericalValuePropertyWriter, ICesiumRgbaValuePropertyWriter, ICesiumRgbafValuePropertyWriter, ICesiumColorBlendModeValuePropertyWriter, ICesiumCornerTypeValuePropertyWriter, ICesiumHeightReferenceValuePropertyWriter, ICesiumHorizontalOriginValuePropertyWriter, ICesiumLabelStyleValuePropertyWriter, ICesiumDoubleValuePropertyWriter, ICesiumNearFarScalarValuePropertyWriter, ICesiumUnitQuaternionValuePropertyWriter, ICesiumShadowModeValuePropertyWriter, ICesiumStringValuePropertyWriter, ICesiumStripeOrientationValuePropertyWriter, ICesiumCartographicRectangleRadiansValuePropertyWriter, ICesiumCartographicRectangleDegreesValuePropertyWriter, ICesiumUriValuePropertyWriter, ICesiumVerticalOriginValuePropertyWriter
    {
        /// <summary>
        /// The name of the <c>boolean</c> property.
        /// </summary>
        [NotNull]
        public const string BooleanPropertyName = "boolean";

        /// <summary>
        /// The name of the <c>boundingRectangle</c> property.
        /// </summary>
        [NotNull]
        public const string BoundingRectanglePropertyName = "boundingRectangle";

        /// <summary>
        /// The name of the <c>cartesian</c> property.
        /// </summary>
        [NotNull]
        public const string CartesianPropertyName = "cartesian";

        /// <summary>
        /// The name of the <c>cartographicRadians</c> property.
        /// </summary>
        [NotNull]
        public const string CartographicRadiansPropertyName = "cartographicRadians";

        /// <summary>
        /// The name of the <c>cartographicDegrees</c> property.
        /// </summary>
        [NotNull]
        public const string CartographicDegreesPropertyName = "cartographicDegrees";

        /// <summary>
        /// The name of the <c>cartesian2</c> property.
        /// </summary>
        [NotNull]
        public const string Cartesian2PropertyName = "cartesian2";

        /// <summary>
        /// The name of the <c>unitCartesian</c> property.
        /// </summary>
        [NotNull]
        public const string UnitCartesianPropertyName = "unitCartesian";

        /// <summary>
        /// The name of the <c>spherical</c> property.
        /// </summary>
        [NotNull]
        public const string SphericalPropertyName = "spherical";

        /// <summary>
        /// The name of the <c>unitSpherical</c> property.
        /// </summary>
        [NotNull]
        public const string UnitSphericalPropertyName = "unitSpherical";

        /// <summary>
        /// The name of the <c>rgba</c> property.
        /// </summary>
        [NotNull]
        public const string RgbaPropertyName = "rgba";

        /// <summary>
        /// The name of the <c>rgbaf</c> property.
        /// </summary>
        [NotNull]
        public const string RgbafPropertyName = "rgbaf";

        /// <summary>
        /// The name of the <c>colorBlendMode</c> property.
        /// </summary>
        [NotNull]
        public const string ColorBlendModePropertyName = "colorBlendMode";

        /// <summary>
        /// The name of the <c>cornerType</c> property.
        /// </summary>
        [NotNull]
        public const string CornerTypePropertyName = "cornerType";

        /// <summary>
        /// The name of the <c>heightReference</c> property.
        /// </summary>
        [NotNull]
        public const string HeightReferencePropertyName = "heightReference";

        /// <summary>
        /// The name of the <c>horizontalOrigin</c> property.
        /// </summary>
        [NotNull]
        public const string HorizontalOriginPropertyName = "horizontalOrigin";

        /// <summary>
        /// The name of the <c>labelStyle</c> property.
        /// </summary>
        [NotNull]
        public const string LabelStylePropertyName = "labelStyle";

        /// <summary>
        /// The name of the <c>number</c> property.
        /// </summary>
        [NotNull]
        public const string NumberPropertyName = "number";

        /// <summary>
        /// The name of the <c>nearFarScalar</c> property.
        /// </summary>
        [NotNull]
        public const string NearFarScalarPropertyName = "nearFarScalar";

        /// <summary>
        /// The name of the <c>unitQuaternion</c> property.
        /// </summary>
        [NotNull]
        public const string UnitQuaternionPropertyName = "unitQuaternion";

        /// <summary>
        /// The name of the <c>shadowMode</c> property.
        /// </summary>
        [NotNull]
        public const string ShadowModePropertyName = "shadowMode";

        /// <summary>
        /// The name of the <c>string</c> property.
        /// </summary>
        [NotNull]
        public const string StringPropertyName = "string";

        /// <summary>
        /// The name of the <c>stripeOrientation</c> property.
        /// </summary>
        [NotNull]
        public const string StripeOrientationPropertyName = "stripeOrientation";

        /// <summary>
        /// The name of the <c>wsen</c> property.
        /// </summary>
        [NotNull]
        public const string WsenPropertyName = "wsen";

        /// <summary>
        /// The name of the <c>wsenDegrees</c> property.
        /// </summary>
        [NotNull]
        public const string WsenDegreesPropertyName = "wsenDegrees";

        /// <summary>
        /// The name of the <c>uri</c> property.
        /// </summary>
        [NotNull]
        public const string UriPropertyName = "uri";

        /// <summary>
        /// The name of the <c>verticalOrigin</c> property.
        /// </summary>
        [NotNull]
        public const string VerticalOriginPropertyName = "verticalOrigin";

        /// <summary>
        /// The name of the <c>delete</c> property.
        /// </summary>
        [NotNull]
        public const string DeletePropertyName = "delete";

        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumBooleanValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asBoolean;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumBoundingRectangleValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asBoundingRectangle;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asCartesian;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartographicRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asCartographicRadians;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartographicDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asCartographicDegrees;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartesian2ValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asCartesian2;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumUnitCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asUnitCartesian;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asSpherical;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumUnitSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asUnitSpherical;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumRgbaValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asRgba;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumRgbafValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asRgbaf;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumColorBlendModeValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asColorBlendMode;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCornerTypeValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asCornerType;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumHeightReferenceValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asHeightReference;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumHorizontalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asHorizontalOrigin;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumLabelStyleValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asLabelStyle;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumDoubleValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asNumber;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumNearFarScalarValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asNearFarScalar;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumUnitQuaternionValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asUnitQuaternion;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumShadowModeValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asShadowMode;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumStringValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asString;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumStripeOrientationValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asStripeOrientation;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartographicRectangleRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asWsen;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumCartographicRectangleDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asWsenDegrees;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumUriValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asUri;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumVerticalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter>> m_asVerticalOrigin;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public CustomPropertyCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
            m_asBoolean = CreateAsBoolean();
            m_asBoundingRectangle = CreateAsBoundingRectangle();
            m_asCartesian = CreateAsCartesian();
            m_asCartographicRadians = CreateAsCartographicRadians();
            m_asCartographicDegrees = CreateAsCartographicDegrees();
            m_asCartesian2 = CreateAsCartesian2();
            m_asUnitCartesian = CreateAsUnitCartesian();
            m_asSpherical = CreateAsSpherical();
            m_asUnitSpherical = CreateAsUnitSpherical();
            m_asRgba = CreateAsRgba();
            m_asRgbaf = CreateAsRgbaf();
            m_asColorBlendMode = CreateAsColorBlendMode();
            m_asCornerType = CreateAsCornerType();
            m_asHeightReference = CreateAsHeightReference();
            m_asHorizontalOrigin = CreateAsHorizontalOrigin();
            m_asLabelStyle = CreateAsLabelStyle();
            m_asNumber = CreateAsNumber();
            m_asNearFarScalar = CreateAsNearFarScalar();
            m_asUnitQuaternion = CreateAsUnitQuaternion();
            m_asShadowMode = CreateAsShadowMode();
            m_asString = CreateAsString();
            m_asStripeOrientation = CreateAsStripeOrientation();
            m_asWsen = CreateAsWsen();
            m_asWsenDegrees = CreateAsWsenDegrees();
            m_asUri = CreateAsUri();
            m_asVerticalOrigin = CreateAsVerticalOrigin();
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected CustomPropertyCesiumWriter([NotNull] CustomPropertyCesiumWriter existingInstance)
            : base(existingInstance)
        {
            m_asBoolean = CreateAsBoolean();
            m_asBoundingRectangle = CreateAsBoundingRectangle();
            m_asCartesian = CreateAsCartesian();
            m_asCartographicRadians = CreateAsCartographicRadians();
            m_asCartographicDegrees = CreateAsCartographicDegrees();
            m_asCartesian2 = CreateAsCartesian2();
            m_asUnitCartesian = CreateAsUnitCartesian();
            m_asSpherical = CreateAsSpherical();
            m_asUnitSpherical = CreateAsUnitSpherical();
            m_asRgba = CreateAsRgba();
            m_asRgbaf = CreateAsRgbaf();
            m_asColorBlendMode = CreateAsColorBlendMode();
            m_asCornerType = CreateAsCornerType();
            m_asHeightReference = CreateAsHeightReference();
            m_asHorizontalOrigin = CreateAsHorizontalOrigin();
            m_asLabelStyle = CreateAsLabelStyle();
            m_asNumber = CreateAsNumber();
            m_asNearFarScalar = CreateAsNearFarScalar();
            m_asUnitQuaternion = CreateAsUnitQuaternion();
            m_asShadowMode = CreateAsShadowMode();
            m_asString = CreateAsString();
            m_asStripeOrientation = CreateAsStripeOrientation();
            m_asWsen = CreateAsWsen();
            m_asWsenDegrees = CreateAsWsenDegrees();
            m_asUri = CreateAsUri();
            m_asVerticalOrigin = CreateAsVerticalOrigin();
        }

        /// <inheritdoc/>
        public override CustomPropertyCesiumWriter Clone()
        {
            return new CustomPropertyCesiumWriter(this);
        }

        /// <summary>
        /// Writes the value expressed as a <c>boolean</c>, which is the property specified as a boolean value.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteBoolean(bool value)
        {
            const string PropertyName = BooleanPropertyName;
            if (ForceInterval)
            {
                OpenIntervalIfNecessary();
            }
            if (IsInterval)
            {
                Output.WritePropertyName(PropertyName);
            }
            Output.WriteValue(value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>boundingRectangle</c>, which is the property specified as <c>[X, Y, Width, Height]</c>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteBoundingRectangle(BoundingRectangle value)
        {
            const string PropertyName = BoundingRectanglePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteBoundingRectangle(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>boundingRectangle</c>, which is the property specified as <c>[X, Y, Width, Height]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteBoundingRectangle(IList<JulianDate> dates, IList<BoundingRectangle> values)
        {
            WriteBoundingRectangle(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>boundingRectangle</c>, which is the property specified as <c>[X, Y, Width, Height]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteBoundingRectangle(IList<JulianDate> dates, IList<BoundingRectangle> values, int startIndex, int length)
        {
            const string PropertyName = BoundingRectanglePropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteBoundingRectangle(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian</c>, which is the property specified as a three-dimensional Cartesian value <c>[X, Y, Z]</c>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteCartesian(Cartesian value)
        {
            const string PropertyName = CartesianPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartesian3(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian</c>, which is the property specified as a three-dimensional Cartesian value <c>[X, Y, Z]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteCartesian(IList<JulianDate> dates, IList<Cartesian> values)
        {
            WriteCartesian(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian</c>, which is the property specified as a three-dimensional Cartesian value <c>[X, Y, Z]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteCartesian(IList<JulianDate> dates, IList<Cartesian> values, int startIndex, int length)
        {
            const string PropertyName = CartesianPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteCartesian3(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicRadians</c>, which is the property specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height]</c>, where Longitude and Latitude are in radians and Height is in meters.
        /// </summary>
        /// <param name="value">The interval.</param>
        public void WriteCartographicRadians(Cartographic value)
        {
            const string PropertyName = CartographicRadiansPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartographic(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicRadians</c>, which is the property specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height]</c>, where Longitude and Latitude are in radians and Height is in meters.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteCartographicRadians(IList<JulianDate> dates, IList<Cartographic> values)
        {
            WriteCartographicRadians(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicRadians</c>, which is the property specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height]</c>, where Longitude and Latitude are in radians and Height is in meters.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The position corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteCartographicRadians(IList<JulianDate> dates, IList<Cartographic> values, int startIndex, int length)
        {
            const string PropertyName = CartographicRadiansPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteCartographic(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicDegrees</c>, which is the property specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height]</c>, where Longitude and Latitude are in degrees and Height is in meters.
        /// </summary>
        /// <param name="value">The interval.</param>
        public void WriteCartographicDegrees(Cartographic value)
        {
            const string PropertyName = CartographicDegreesPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartographic(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicDegrees</c>, which is the property specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height]</c>, where Longitude and Latitude are in degrees and Height is in meters.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteCartographicDegrees(IList<JulianDate> dates, IList<Cartographic> values)
        {
            WriteCartographicDegrees(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartographicDegrees</c>, which is the property specified in Cartographic WGS84 coordinates, <c>[Longitude, Latitude, Height]</c>, where Longitude and Latitude are in degrees and Height is in meters.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The position corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteCartographicDegrees(IList<JulianDate> dates, IList<Cartographic> values, int startIndex, int length)
        {
            const string PropertyName = CartographicDegreesPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteCartographic(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian2</c>, which is the property specified as a two-dimensional Cartesian value <c>[X, Y]</c>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteCartesian2(Rectangular value)
        {
            const string PropertyName = Cartesian2PropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartesian2(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian2</c>, which is the property specified as a two-dimensional Cartesian value <c>[X, Y]</c>.
        /// </summary>
        /// <param name="x">The X component.</param>
        /// <param name="y">The Y component.</param>
        public void WriteCartesian2(double x, double y)
        {
            WriteCartesian2(new Rectangular(x, y));
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian2</c>, which is the property specified as a two-dimensional Cartesian value <c>[X, Y]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteCartesian2(IList<JulianDate> dates, IList<Rectangular> values)
        {
            WriteCartesian2(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>cartesian2</c>, which is the property specified as a two-dimensional Cartesian value <c>[X, Y]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteCartesian2(IList<JulianDate> dates, IList<Rectangular> values, int startIndex, int length)
        {
            const string PropertyName = Cartesian2PropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteCartesian2(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitCartesian</c>, which is the property specified as a three-dimensional unit magnitude Cartesian value <c>[X, Y, Z]</c>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteUnitCartesian(UnitCartesian value)
        {
            const string PropertyName = UnitCartesianPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteUnitCartesian3(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitCartesian</c>, which is the property specified as a three-dimensional unit magnitude Cartesian value <c>[X, Y, Z]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteUnitCartesian(IList<JulianDate> dates, IList<UnitCartesian> values)
        {
            WriteUnitCartesian(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitCartesian</c>, which is the property specified as a three-dimensional unit magnitude Cartesian value <c>[X, Y, Z]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteUnitCartesian(IList<JulianDate> dates, IList<UnitCartesian> values, int startIndex, int length)
        {
            const string PropertyName = UnitCartesianPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteUnitCartesian3(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>spherical</c>, which is the property specified as a spherical value <c>[Clock, Cone, Magnitude]</c>. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteSpherical(Spherical value)
        {
            const string PropertyName = SphericalPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteSpherical(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>spherical</c>, which is the property specified as a spherical value <c>[Clock, Cone, Magnitude]</c>. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteSpherical(IList<JulianDate> dates, IList<Spherical> values)
        {
            WriteSpherical(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>spherical</c>, which is the property specified as a spherical value <c>[Clock, Cone, Magnitude]</c>. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteSpherical(IList<JulianDate> dates, IList<Spherical> values, int startIndex, int length)
        {
            const string PropertyName = SphericalPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteSpherical(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitSpherical</c>, which is the property specified as a unit spherical value <c>[Clock, Cone]</c>. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteUnitSpherical(UnitSpherical value)
        {
            const string PropertyName = UnitSphericalPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteUnitSpherical(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitSpherical</c>, which is the property specified as a unit spherical value <c>[Clock, Cone]</c>. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteUnitSpherical(IList<JulianDate> dates, IList<UnitSpherical> values)
        {
            WriteUnitSpherical(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitSpherical</c>, which is the property specified as a unit spherical value <c>[Clock, Cone]</c>. The clock angle is measured in the XY plane from the positive X axis toward the positive Y axis. The cone angle is the angle from the positive Z axis toward the negative Z axis.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteUnitSpherical(IList<JulianDate> dates, IList<UnitSpherical> values, int startIndex, int length)
        {
            const string PropertyName = UnitSphericalPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteUnitSpherical(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgba</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is an integer in the range 0-255.
        /// </summary>
        /// <param name="color">The color.</param>
        public void WriteRgba(Color color)
        {
            const string PropertyName = RgbaPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteRgba(Output, color);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgba</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is an integer in the range 0-255.
        /// </summary>
        /// <param name="red">The red component in the range 0 to 255.</param>
        /// <param name="green">The green component in the range 0 to 255.</param>
        /// <param name="blue">The blue component in the range 0 to 255.</param>
        /// <param name="alpha">The alpha component in the range 0 to 255.</param>
        public void WriteRgba(int red, int green, int blue, int alpha)
        {
            const string PropertyName = RgbaPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteRgba(Output, red, green, blue, alpha);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgba</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is an integer in the range 0-255.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteRgba(IList<JulianDate> dates, IList<Color> values)
        {
            WriteRgba(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgba</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is an integer in the range 0-255.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="colors">The color corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteRgba(IList<JulianDate> dates, IList<Color> colors, int startIndex, int length)
        {
            const string PropertyName = RgbaPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteRgba(Output, PropertyName, dates, colors, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgbaf</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is a double in the range 0.0-1.0.
        /// </summary>
        /// <param name="color">The color.</param>
        public void WriteRgbaf(Color color)
        {
            const string PropertyName = RgbafPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteRgbaf(Output, color);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgbaf</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is a double in the range 0.0-1.0.
        /// </summary>
        /// <param name="red">The red component in the range 0 to 1.0.</param>
        /// <param name="green">The green component in the range 0 to 1.0.</param>
        /// <param name="blue">The blue component in the range 0 to 1.0.</param>
        /// <param name="alpha">The alpha component in the range 0 to 1.0.</param>
        public void WriteRgbaf(float red, float green, float blue, float alpha)
        {
            const string PropertyName = RgbafPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteRgbaf(Output, red, green, blue, alpha);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgbaf</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is a double in the range 0.0-1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteRgbaf(IList<JulianDate> dates, IList<Color> values)
        {
            WriteRgbaf(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>rgbaf</c>, which is the property specified as an array of color components <c>[Red, Green, Blue, Alpha]</c> where each component is a double in the range 0.0-1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="colors">The color corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteRgbaf(IList<JulianDate> dates, IList<Color> colors, int startIndex, int length)
        {
            const string PropertyName = RgbafPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteRgbaf(Output, PropertyName, dates, colors, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>colorBlendMode</c>, which is the property specified as a color blend mode.
        /// </summary>
        /// <param name="value">The blend mode.</param>
        public void WriteColorBlendMode(CesiumColorBlendMode value)
        {
            const string PropertyName = ColorBlendModePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.ColorBlendModeToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>cornerType</c>, which is the property specified as a corner style.
        /// </summary>
        /// <param name="value">The style of a corner.</param>
        public void WriteCornerType(CesiumCornerType value)
        {
            const string PropertyName = CornerTypePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.CornerTypeToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>heightReference</c>, which is the property specified as a height reference.
        /// </summary>
        /// <param name="value">The height reference.</param>
        public void WriteHeightReference(CesiumHeightReference value)
        {
            const string PropertyName = HeightReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.HeightReferenceToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>horizontalOrigin</c>, which is the property specified as a horizontal origin.
        /// </summary>
        /// <param name="value">The horizontal origin.</param>
        public void WriteHorizontalOrigin(CesiumHorizontalOrigin value)
        {
            const string PropertyName = HorizontalOriginPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.HorizontalOriginToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>labelStyle</c>, which is the property specified as a label style.
        /// </summary>
        /// <param name="value">The label style.</param>
        public void WriteLabelStyle(CesiumLabelStyle value)
        {
            const string PropertyName = LabelStylePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.LabelStyleToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>number</c>, which is the property specified as a number.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteNumber(double value)
        {
            const string PropertyName = NumberPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>number</c>, which is the property specified as a number.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteNumber(IList<JulianDate> dates, IList<double> values)
        {
            WriteNumber(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>number</c>, which is the property specified as a number.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteNumber(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            const string PropertyName = NumberPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteDouble(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the property specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteNearFarScalar(NearFarScalar value)
        {
            const string PropertyName = NearFarScalarPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteNearFarScalar(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the property specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>.
        /// </summary>
        /// <param name="nearDistance">The lower bound of the camera distance range.</param>
        /// <param name="nearValue">The value to use at the lower bound of the camera distance range.</param>
        /// <param name="farDistance">The upper bound of the camera distance range.</param>
        /// <param name="farValue">The value to use at the upper bound of the camera distance range.</param>
        public void WriteNearFarScalar(double nearDistance, double nearValue, double farDistance, double farValue)
        {
            WriteNearFarScalar(new NearFarScalar(nearDistance, nearValue, farDistance, farValue));
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the property specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteNearFarScalar(IList<JulianDate> dates, IList<NearFarScalar> values)
        {
            WriteNearFarScalar(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the property specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteNearFarScalar(IList<JulianDate> dates, IList<NearFarScalar> values, int startIndex, int length)
        {
            const string PropertyName = NearFarScalarPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteNearFarScalar(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitQuaternion</c>, which is the property specified as a 4-dimensional unit magnitude quaternion, specified as <c>[X, Y, Z, W]</c>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteUnitQuaternion(UnitQuaternion value)
        {
            const string PropertyName = UnitQuaternionPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteUnitQuaternion(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitQuaternion</c>, which is the property specified as a 4-dimensional unit magnitude quaternion, specified as <c>[X, Y, Z, W]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteUnitQuaternion(IList<JulianDate> dates, IList<UnitQuaternion> values)
        {
            WriteUnitQuaternion(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>unitQuaternion</c>, which is the property specified as a 4-dimensional unit magnitude quaternion, specified as <c>[X, Y, Z, W]</c>.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteUnitQuaternion(IList<JulianDate> dates, IList<UnitQuaternion> values, int startIndex, int length)
        {
            const string PropertyName = UnitQuaternionPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteUnitQuaternion(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>shadowMode</c>, which is the property specified as a shadow mode.
        /// </summary>
        /// <param name="value">The shadow mode.</param>
        public void WriteShadowMode(CesiumShadowMode value)
        {
            const string PropertyName = ShadowModePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.ShadowModeToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>string</c>, which is the property specified as a string.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteString(string value)
        {
            const string PropertyName = StringPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>stripeOrientation</c>, which is the property specified as an orientation of stripes in the stripe material.
        /// </summary>
        /// <param name="value">The orientation.</param>
        public void WriteStripeOrientation(CesiumStripeOrientation value)
        {
            const string PropertyName = StripeOrientationPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.StripeOrientationToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsen</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in radians.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteWsen(CartographicExtent value)
        {
            const string PropertyName = WsenPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartographicExtent(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsen</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in radians.
        /// </summary>
        /// <param name="west">The westernmost longitude.</param>
        /// <param name="south">The southernmost latitude.</param>
        /// <param name="east">The easternmost longitude.</param>
        /// <param name="north">The northernmost latitude.</param>
        public void WriteWsen(double west, double south, double east, double north)
        {
            WriteWsen(new CartographicExtent(west, south, east, north));
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsen</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in radians.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteWsen(IList<JulianDate> dates, IList<CartographicExtent> values)
        {
            WriteWsen(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsen</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in radians.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteWsen(IList<JulianDate> dates, IList<CartographicExtent> values, int startIndex, int length)
        {
            const string PropertyName = WsenPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteCartographicExtent(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsenDegrees</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in degrees.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteWsenDegrees(CartographicExtent value)
        {
            const string PropertyName = WsenDegreesPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteCartographicExtent(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsenDegrees</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in degrees.
        /// </summary>
        /// <param name="west">The westernmost longitude.</param>
        /// <param name="south">The southernmost latitude.</param>
        /// <param name="east">The easternmost longitude.</param>
        /// <param name="north">The northernmost latitude.</param>
        public void WriteWsenDegrees(double west, double south, double east, double north)
        {
            WriteWsenDegrees(new CartographicExtent(west, south, east, north));
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsenDegrees</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in degrees.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteWsenDegrees(IList<JulianDate> dates, IList<CartographicExtent> values)
        {
            WriteWsenDegrees(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>wsenDegrees</c>, which is the property specified as a Cartographic rectangle <c>[WestLongitude, SouthLatitude, EastLongitude, NorthLatitude]</c>, with values in degrees.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteWsenDegrees(IList<JulianDate> dates, IList<CartographicExtent> values, int startIndex, int length)
        {
            const string PropertyName = WsenDegreesPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteCartographicExtent(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>uri</c>, which is the property specified as a URI.
        /// </summary>
        /// <param name="resource">A resource object describing external data.</param>
        public void WriteUri(CesiumResource resource)
        {
            WriteUri(resource.Uri, resource.Behavior);
        }

        /// <summary>
        /// Writes the value expressed as a <c>uri</c>, which is the property specified as a URI.
        /// </summary>
        /// <param name="uri">The URI of the data.</param>
        /// <param name="resourceBehavior">An enumeration describing how to include the URI in the document. For even more control, use the overload that takes a ICesiumUriResolver.</param>
        public void WriteUri(Uri uri, CesiumResourceBehavior resourceBehavior)
        {
            WriteUri(uri.ToString(), resourceBehavior);
        }

        /// <summary>
        /// Writes the value expressed as a <c>uri</c>, which is the property specified as a URI.
        /// </summary>
        /// <param name="uri">The URI of the data.</param>
        /// <param name="resourceBehavior">An enumeration describing how to include the URI in the document. For even more control, use the overload that takes a ICesiumUriResolver.</param>
        public void WriteUri(string uri, CesiumResourceBehavior resourceBehavior)
        {
            const string PropertyName = UriPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.GetResourceUri(uri, resourceBehavior));
        }

        /// <summary>
        /// Writes the value expressed as a <c>uri</c>, which is the property specified as a URI.
        /// </summary>
        /// <param name="uri">The URI of the data. The provided ICesiumUriResolver will be used to build the final URI embedded in the document.</param>
        /// <param name="resolver">An ICesiumUriResolver used to build the final URI that will be embedded in the document.</param>
        public void WriteUri(Uri uri, ICesiumUriResolver resolver)
        {
            WriteUri(uri.ToString(), resolver);
        }

        /// <summary>
        /// Writes the value expressed as a <c>uri</c>, which is the property specified as a URI.
        /// </summary>
        /// <param name="uri">The URI of the data. The provided ICesiumUriResolver will be used to build the final URI embedded in the document.</param>
        /// <param name="resolver">An ICesiumUriResolver used to build the final URI that will be embedded in the document.</param>
        public void WriteUri(string uri, ICesiumUriResolver resolver)
        {
            const string PropertyName = UriPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(resolver.ResolveUri(uri));
        }

        /// <summary>
        /// Writes the value expressed as a <c>uri</c>, which is the property specified as a URI.
        /// </summary>
        /// <param name="image">The image. A data URI will be created for this image, using PNG encoding.</param>
        public void WriteUri(Image image)
        {
            WriteUri(image, CesiumImageFormat.Png);
        }

        /// <summary>
        /// Writes the value expressed as a <c>uri</c>, which is the property specified as a URI.
        /// </summary>
        /// <param name="image">The image. A data URI will be created for this image.</param>
        /// <param name="imageFormat">The image format to use to encode the image in the data URI.</param>
        public void WriteUri(Image image, CesiumImageFormat imageFormat)
        {
            const string PropertyName = UriPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.ImageToDataUri(image, imageFormat));
        }

        /// <summary>
        /// Writes the value expressed as a <c>verticalOrigin</c>, which is the property specified as a vertical origin.
        /// </summary>
        /// <param name="value">The vertical origin.</param>
        public void WriteVerticalOrigin(CesiumVerticalOrigin value)
        {
            const string PropertyName = VerticalOriginPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(CesiumFormattingHelper.VerticalOriginToString(value));
        }

        /// <summary>
        /// Writes the value expressed as a <c>delete</c>, which is whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteDelete(bool value)
        {
            const string PropertyName = DeletePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(value);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumBooleanValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumBooleanValuePropertyAdaptor<CustomPropertyCesiumWriter> AsBoolean()
        {
            return m_asBoolean.Value;
        }

        [NotNull]
        private Lazy<CesiumBooleanValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsBoolean()
        {
            return new Lazy<CesiumBooleanValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateBoolean, false);
        }

        [NotNull]
        private CesiumBooleanValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateBoolean()
        {
            return CesiumValuePropertyAdaptors.CreateBoolean(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumBoundingRectangleValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumBoundingRectangleValuePropertyAdaptor<CustomPropertyCesiumWriter> AsBoundingRectangle()
        {
            return m_asBoundingRectangle.Value;
        }

        [NotNull]
        private Lazy<CesiumBoundingRectangleValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsBoundingRectangle()
        {
            return new Lazy<CesiumBoundingRectangleValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateBoundingRectangle, false);
        }

        [NotNull]
        private CesiumBoundingRectangleValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateBoundingRectangle()
        {
            return CesiumValuePropertyAdaptors.CreateBoundingRectangle(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartesian3ValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter> AsCartesian()
        {
            return m_asCartesian.Value;
        }

        [NotNull]
        private Lazy<CesiumCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsCartesian()
        {
            return new Lazy<CesiumCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateCartesian3, false);
        }

        [NotNull]
        private CesiumCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateCartesian3()
        {
            return CesiumValuePropertyAdaptors.CreateCartesian3(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartographicRadiansValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartographicRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter> AsCartographicRadians()
        {
            return m_asCartographicRadians.Value;
        }

        [NotNull]
        private Lazy<CesiumCartographicRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsCartographicRadians()
        {
            return new Lazy<CesiumCartographicRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateCartographicRadians, false);
        }

        [NotNull]
        private CesiumCartographicRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateCartographicRadians()
        {
            return CesiumValuePropertyAdaptors.CreateCartographicRadians(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartographicDegreesValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartographicDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter> AsCartographicDegrees()
        {
            return m_asCartographicDegrees.Value;
        }

        [NotNull]
        private Lazy<CesiumCartographicDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsCartographicDegrees()
        {
            return new Lazy<CesiumCartographicDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateCartographicDegrees, false);
        }

        [NotNull]
        private CesiumCartographicDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateCartographicDegrees()
        {
            return CesiumValuePropertyAdaptors.CreateCartographicDegrees(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartesian2ValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartesian2ValuePropertyAdaptor<CustomPropertyCesiumWriter> AsCartesian2()
        {
            return m_asCartesian2.Value;
        }

        [NotNull]
        private Lazy<CesiumCartesian2ValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsCartesian2()
        {
            return new Lazy<CesiumCartesian2ValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateCartesian2, false);
        }

        [NotNull]
        private CesiumCartesian2ValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateCartesian2()
        {
            return CesiumValuePropertyAdaptors.CreateCartesian2(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumUnitCartesian3ValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumUnitCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter> AsUnitCartesian()
        {
            return m_asUnitCartesian.Value;
        }

        [NotNull]
        private Lazy<CesiumUnitCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsUnitCartesian()
        {
            return new Lazy<CesiumUnitCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateUnitCartesian3, false);
        }

        [NotNull]
        private CesiumUnitCartesian3ValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateUnitCartesian3()
        {
            return CesiumValuePropertyAdaptors.CreateUnitCartesian3(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumSphericalValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter> AsSpherical()
        {
            return m_asSpherical.Value;
        }

        [NotNull]
        private Lazy<CesiumSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsSpherical()
        {
            return new Lazy<CesiumSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateSpherical, false);
        }

        [NotNull]
        private CesiumSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateSpherical()
        {
            return CesiumValuePropertyAdaptors.CreateSpherical(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumUnitSphericalValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumUnitSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter> AsUnitSpherical()
        {
            return m_asUnitSpherical.Value;
        }

        [NotNull]
        private Lazy<CesiumUnitSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsUnitSpherical()
        {
            return new Lazy<CesiumUnitSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateUnitSpherical, false);
        }

        [NotNull]
        private CesiumUnitSphericalValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateUnitSpherical()
        {
            return CesiumValuePropertyAdaptors.CreateUnitSpherical(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumRgbaValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumRgbaValuePropertyAdaptor<CustomPropertyCesiumWriter> AsRgba()
        {
            return m_asRgba.Value;
        }

        [NotNull]
        private Lazy<CesiumRgbaValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsRgba()
        {
            return new Lazy<CesiumRgbaValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateRgba, false);
        }

        [NotNull]
        private CesiumRgbaValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateRgba()
        {
            return CesiumValuePropertyAdaptors.CreateRgba(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumRgbafValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumRgbafValuePropertyAdaptor<CustomPropertyCesiumWriter> AsRgbaf()
        {
            return m_asRgbaf.Value;
        }

        [NotNull]
        private Lazy<CesiumRgbafValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsRgbaf()
        {
            return new Lazy<CesiumRgbafValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateRgbaf, false);
        }

        [NotNull]
        private CesiumRgbafValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateRgbaf()
        {
            return CesiumValuePropertyAdaptors.CreateRgbaf(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumColorBlendModeValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumColorBlendModeValuePropertyAdaptor<CustomPropertyCesiumWriter> AsColorBlendMode()
        {
            return m_asColorBlendMode.Value;
        }

        [NotNull]
        private Lazy<CesiumColorBlendModeValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsColorBlendMode()
        {
            return new Lazy<CesiumColorBlendModeValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateColorBlendMode, false);
        }

        [NotNull]
        private CesiumColorBlendModeValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateColorBlendMode()
        {
            return CesiumValuePropertyAdaptors.CreateColorBlendMode(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCornerTypeValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCornerTypeValuePropertyAdaptor<CustomPropertyCesiumWriter> AsCornerType()
        {
            return m_asCornerType.Value;
        }

        [NotNull]
        private Lazy<CesiumCornerTypeValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsCornerType()
        {
            return new Lazy<CesiumCornerTypeValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateCornerType, false);
        }

        [NotNull]
        private CesiumCornerTypeValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateCornerType()
        {
            return CesiumValuePropertyAdaptors.CreateCornerType(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumHeightReferenceValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumHeightReferenceValuePropertyAdaptor<CustomPropertyCesiumWriter> AsHeightReference()
        {
            return m_asHeightReference.Value;
        }

        [NotNull]
        private Lazy<CesiumHeightReferenceValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsHeightReference()
        {
            return new Lazy<CesiumHeightReferenceValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateHeightReference, false);
        }

        [NotNull]
        private CesiumHeightReferenceValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateHeightReference()
        {
            return CesiumValuePropertyAdaptors.CreateHeightReference(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumHorizontalOriginValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumHorizontalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter> AsHorizontalOrigin()
        {
            return m_asHorizontalOrigin.Value;
        }

        [NotNull]
        private Lazy<CesiumHorizontalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsHorizontalOrigin()
        {
            return new Lazy<CesiumHorizontalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateHorizontalOrigin, false);
        }

        [NotNull]
        private CesiumHorizontalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateHorizontalOrigin()
        {
            return CesiumValuePropertyAdaptors.CreateHorizontalOrigin(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumLabelStyleValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumLabelStyleValuePropertyAdaptor<CustomPropertyCesiumWriter> AsLabelStyle()
        {
            return m_asLabelStyle.Value;
        }

        [NotNull]
        private Lazy<CesiumLabelStyleValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsLabelStyle()
        {
            return new Lazy<CesiumLabelStyleValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateLabelStyle, false);
        }

        [NotNull]
        private CesiumLabelStyleValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateLabelStyle()
        {
            return CesiumValuePropertyAdaptors.CreateLabelStyle(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumDoubleValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumDoubleValuePropertyAdaptor<CustomPropertyCesiumWriter> AsNumber()
        {
            return m_asNumber.Value;
        }

        [NotNull]
        private Lazy<CesiumDoubleValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsNumber()
        {
            return new Lazy<CesiumDoubleValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateDouble, false);
        }

        [NotNull]
        private CesiumDoubleValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateDouble()
        {
            return CesiumValuePropertyAdaptors.CreateDouble(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumNearFarScalarValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumNearFarScalarValuePropertyAdaptor<CustomPropertyCesiumWriter> AsNearFarScalar()
        {
            return m_asNearFarScalar.Value;
        }

        [NotNull]
        private Lazy<CesiumNearFarScalarValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsNearFarScalar()
        {
            return new Lazy<CesiumNearFarScalarValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateNearFarScalar, false);
        }

        [NotNull]
        private CesiumNearFarScalarValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateNearFarScalar()
        {
            return CesiumValuePropertyAdaptors.CreateNearFarScalar(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumUnitQuaternionValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumUnitQuaternionValuePropertyAdaptor<CustomPropertyCesiumWriter> AsUnitQuaternion()
        {
            return m_asUnitQuaternion.Value;
        }

        [NotNull]
        private Lazy<CesiumUnitQuaternionValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsUnitQuaternion()
        {
            return new Lazy<CesiumUnitQuaternionValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateUnitQuaternion, false);
        }

        [NotNull]
        private CesiumUnitQuaternionValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateUnitQuaternion()
        {
            return CesiumValuePropertyAdaptors.CreateUnitQuaternion(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumShadowModeValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumShadowModeValuePropertyAdaptor<CustomPropertyCesiumWriter> AsShadowMode()
        {
            return m_asShadowMode.Value;
        }

        [NotNull]
        private Lazy<CesiumShadowModeValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsShadowMode()
        {
            return new Lazy<CesiumShadowModeValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateShadowMode, false);
        }

        [NotNull]
        private CesiumShadowModeValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateShadowMode()
        {
            return CesiumValuePropertyAdaptors.CreateShadowMode(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumStringValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumStringValuePropertyAdaptor<CustomPropertyCesiumWriter> AsString()
        {
            return m_asString.Value;
        }

        [NotNull]
        private Lazy<CesiumStringValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsString()
        {
            return new Lazy<CesiumStringValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateString, false);
        }

        [NotNull]
        private CesiumStringValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateString()
        {
            return CesiumValuePropertyAdaptors.CreateString(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumStripeOrientationValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumStripeOrientationValuePropertyAdaptor<CustomPropertyCesiumWriter> AsStripeOrientation()
        {
            return m_asStripeOrientation.Value;
        }

        [NotNull]
        private Lazy<CesiumStripeOrientationValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsStripeOrientation()
        {
            return new Lazy<CesiumStripeOrientationValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateStripeOrientation, false);
        }

        [NotNull]
        private CesiumStripeOrientationValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateStripeOrientation()
        {
            return CesiumValuePropertyAdaptors.CreateStripeOrientation(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartographicRectangleRadiansValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartographicRectangleRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter> AsWsen()
        {
            return m_asWsen.Value;
        }

        [NotNull]
        private Lazy<CesiumCartographicRectangleRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsWsen()
        {
            return new Lazy<CesiumCartographicRectangleRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateCartographicRectangleRadians, false);
        }

        [NotNull]
        private CesiumCartographicRectangleRadiansValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateCartographicRectangleRadians()
        {
            return CesiumValuePropertyAdaptors.CreateCartographicRectangleRadians(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumCartographicRectangleDegreesValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumCartographicRectangleDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter> AsWsenDegrees()
        {
            return m_asWsenDegrees.Value;
        }

        [NotNull]
        private Lazy<CesiumCartographicRectangleDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsWsenDegrees()
        {
            return new Lazy<CesiumCartographicRectangleDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateCartographicRectangleDegrees, false);
        }

        [NotNull]
        private CesiumCartographicRectangleDegreesValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateCartographicRectangleDegrees()
        {
            return CesiumValuePropertyAdaptors.CreateCartographicRectangleDegrees(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumUriValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumUriValuePropertyAdaptor<CustomPropertyCesiumWriter> AsUri()
        {
            return m_asUri.Value;
        }

        [NotNull]
        private Lazy<CesiumUriValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsUri()
        {
            return new Lazy<CesiumUriValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateUri, false);
        }

        [NotNull]
        private CesiumUriValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateUri()
        {
            return CesiumValuePropertyAdaptors.CreateUri(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumVerticalOriginValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumVerticalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter> AsVerticalOrigin()
        {
            return m_asVerticalOrigin.Value;
        }

        [NotNull]
        private Lazy<CesiumVerticalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter>> CreateAsVerticalOrigin()
        {
            return new Lazy<CesiumVerticalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter>>(CreateVerticalOrigin, false);
        }

        [NotNull]
        private CesiumVerticalOriginValuePropertyAdaptor<CustomPropertyCesiumWriter> CreateVerticalOrigin()
        {
            return CesiumValuePropertyAdaptors.CreateVerticalOrigin(this);
        }

    }
}
