// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Collections.Generic;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>Polyline</c> to a <see cref="CesiumOutputStream"/>. A <c>Polyline</c> is a polyline, which is a line in the scene composed of multiple segments.
    /// </summary>
    public class PolylineCesiumWriter : CesiumPropertyWriter<PolylineCesiumWriter>
    {
        /// <summary>
        /// The name of the <c>show</c> property.
        /// </summary>
        [NotNull]
        public const string ShowPropertyName = "show";

        /// <summary>
        /// The name of the <c>positions</c> property.
        /// </summary>
        [NotNull]
        public const string PositionsPropertyName = "positions";

        /// <summary>
        /// The name of the <c>arcType</c> property.
        /// </summary>
        [NotNull]
        public const string ArcTypePropertyName = "arcType";

        /// <summary>
        /// The name of the <c>width</c> property.
        /// </summary>
        [NotNull]
        public const string WidthPropertyName = "width";

        /// <summary>
        /// The name of the <c>granularity</c> property.
        /// </summary>
        [NotNull]
        public const string GranularityPropertyName = "granularity";

        /// <summary>
        /// The name of the <c>material</c> property.
        /// </summary>
        [NotNull]
        public const string MaterialPropertyName = "material";

        /// <summary>
        /// The name of the <c>followSurface</c> property.
        /// </summary>
        [NotNull]
        public const string FollowSurfacePropertyName = "followSurface";

        /// <summary>
        /// The name of the <c>shadows</c> property.
        /// </summary>
        [NotNull]
        public const string ShadowsPropertyName = "shadows";

        /// <summary>
        /// The name of the <c>depthFailMaterial</c> property.
        /// </summary>
        [NotNull]
        public const string DepthFailMaterialPropertyName = "depthFailMaterial";

        /// <summary>
        /// The name of the <c>distanceDisplayCondition</c> property.
        /// </summary>
        [NotNull]
        public const string DistanceDisplayConditionPropertyName = "distanceDisplayCondition";

        /// <summary>
        /// The name of the <c>clampToGround</c> property.
        /// </summary>
        [NotNull]
        public const string ClampToGroundPropertyName = "clampToGround";

        /// <summary>
        /// The name of the <c>classificationType</c> property.
        /// </summary>
        [NotNull]
        public const string ClassificationTypePropertyName = "classificationType";

        /// <summary>
        /// The name of the <c>zIndex</c> property.
        /// </summary>
        [NotNull]
        public const string ZIndexPropertyName = "zIndex";

        private readonly Lazy<BooleanCesiumWriter> m_show = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(ShowPropertyName), false);
        private readonly Lazy<PositionListCesiumWriter> m_positions = new Lazy<PositionListCesiumWriter>(() => new PositionListCesiumWriter(PositionsPropertyName), false);
        private readonly Lazy<ArcTypeCesiumWriter> m_arcType = new Lazy<ArcTypeCesiumWriter>(() => new ArcTypeCesiumWriter(ArcTypePropertyName), false);
        private readonly Lazy<DoubleCesiumWriter> m_width = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(WidthPropertyName), false);
        private readonly Lazy<DoubleCesiumWriter> m_granularity = new Lazy<DoubleCesiumWriter>(() => new DoubleCesiumWriter(GranularityPropertyName), false);
        private readonly Lazy<PolylineMaterialCesiumWriter> m_material = new Lazy<PolylineMaterialCesiumWriter>(() => new PolylineMaterialCesiumWriter(MaterialPropertyName), false);
        private readonly Lazy<BooleanCesiumWriter> m_followSurface = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(FollowSurfacePropertyName), false);
        private readonly Lazy<ShadowModeCesiumWriter> m_shadows = new Lazy<ShadowModeCesiumWriter>(() => new ShadowModeCesiumWriter(ShadowsPropertyName), false);
        private readonly Lazy<PolylineMaterialCesiumWriter> m_depthFailMaterial = new Lazy<PolylineMaterialCesiumWriter>(() => new PolylineMaterialCesiumWriter(DepthFailMaterialPropertyName), false);
        private readonly Lazy<DistanceDisplayConditionCesiumWriter> m_distanceDisplayCondition = new Lazy<DistanceDisplayConditionCesiumWriter>(() => new DistanceDisplayConditionCesiumWriter(DistanceDisplayConditionPropertyName), false);
        private readonly Lazy<BooleanCesiumWriter> m_clampToGround = new Lazy<BooleanCesiumWriter>(() => new BooleanCesiumWriter(ClampToGroundPropertyName), false);
        private readonly Lazy<ClassificationTypeCesiumWriter> m_classificationType = new Lazy<ClassificationTypeCesiumWriter>(() => new ClassificationTypeCesiumWriter(ClassificationTypePropertyName), false);
        private readonly Lazy<IntegerCesiumWriter> m_zIndex = new Lazy<IntegerCesiumWriter>(() => new IntegerCesiumWriter(ZIndexPropertyName), false);

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public PolylineCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected PolylineCesiumWriter([NotNull] PolylineCesiumWriter existingInstance)
            : base(existingInstance)
        {
        }

        /// <inheritdoc/>
        public override PolylineCesiumWriter Clone()
        {
            return new PolylineCesiumWriter(this);
        }

        /// <summary>
        /// Gets the writer for the <c>show</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>show</c> property defines whether or not the polyline is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter ShowWriter
        {
            get { return m_show.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>show</c> property. The <c>show</c> property defines whether or not the polyline is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenShowProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ShowWriter);
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>boolean</c> value. The <c>show</c> property specifies whether or not the polyline is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteShowProperty(bool value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the polyline is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(Reference value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the polyline is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShowPropertyReference(string value)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the polyline is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>show</c> property as a <c>reference</c> value. The <c>show</c> property specifies whether or not the polyline is shown. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteShowPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenShowProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>positions</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>positions</c> property defines the array of positions defining the polyline as a line strip. This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public PositionListCesiumWriter PositionsWriter
        {
            get { return m_positions.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>positions</c> property. The <c>positions</c> property defines the array of positions defining the polyline as a line strip. This value must be specified in order for the client to display graphics.
        /// </summary>
        [NotNull]
        public PositionListCesiumWriter OpenPositionsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(PositionsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>positions</c> property as a <c>cartesian</c> value. The <c>positions</c> property specifies the array of positions defining the polyline as a line strip. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WritePositionsProperty(IEnumerable<Cartesian> values)
        {
            using (var writer = OpenPositionsProperty())
            {
                writer.WriteCartesian(values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>positions</c> property as a <c>cartographicRadians</c> value. The <c>positions</c> property specifies the array of positions defining the polyline as a line strip. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WritePositionsPropertyCartographicRadians(IEnumerable<Cartographic> values)
        {
            using (var writer = OpenPositionsProperty())
            {
                writer.WriteCartographicRadians(values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>positions</c> property as a <c>cartographicDegrees</c> value. The <c>positions</c> property specifies the array of positions defining the polyline as a line strip. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="values">The values.</param>
        public void WritePositionsPropertyCartographicDegrees(IEnumerable<Cartographic> values)
        {
            using (var writer = OpenPositionsProperty())
            {
                writer.WriteCartographicDegrees(values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>positions</c> property as a <c>references</c> value. The <c>positions</c> property specifies the array of positions defining the polyline as a line strip. This value must be specified in order for the client to display graphics.
        /// </summary>
        /// <param name="references">The list of references.</param>
        public void WritePositionsPropertyReferences(IEnumerable<Reference> references)
        {
            using (var writer = OpenPositionsProperty())
            {
                writer.WriteReferences(references);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>arcType</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>arcType</c> property defines the type of arc that should connect the positions of the polyline. If not specified, the default value is GEODESIC.
        /// </summary>
        [NotNull]
        public ArcTypeCesiumWriter ArcTypeWriter
        {
            get { return m_arcType.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>arcType</c> property. The <c>arcType</c> property defines the type of arc that should connect the positions of the polyline. If not specified, the default value is GEODESIC.
        /// </summary>
        [NotNull]
        public ArcTypeCesiumWriter OpenArcTypeProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ArcTypeWriter);
        }

        /// <summary>
        /// Writes a value for the <c>arcType</c> property as a <c>arcType</c> value. The <c>arcType</c> property specifies the type of arc that should connect the positions of the polyline. If not specified, the default value is GEODESIC.
        /// </summary>
        /// <param name="value">The type of an arc.</param>
        public void WriteArcTypeProperty(CesiumArcType value)
        {
            using (var writer = OpenArcTypeProperty())
            {
                writer.WriteArcType(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>arcType</c> property as a <c>reference</c> value. The <c>arcType</c> property specifies the type of arc that should connect the positions of the polyline. If not specified, the default value is GEODESIC.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteArcTypePropertyReference(Reference value)
        {
            using (var writer = OpenArcTypeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>arcType</c> property as a <c>reference</c> value. The <c>arcType</c> property specifies the type of arc that should connect the positions of the polyline. If not specified, the default value is GEODESIC.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteArcTypePropertyReference(string value)
        {
            using (var writer = OpenArcTypeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>arcType</c> property as a <c>reference</c> value. The <c>arcType</c> property specifies the type of arc that should connect the positions of the polyline. If not specified, the default value is GEODESIC.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteArcTypePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenArcTypeProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>arcType</c> property as a <c>reference</c> value. The <c>arcType</c> property specifies the type of arc that should connect the positions of the polyline. If not specified, the default value is GEODESIC.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteArcTypePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenArcTypeProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>width</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>width</c> property defines the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter WidthWriter
        {
            get { return m_width.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>width</c> property. The <c>width</c> property defines the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenWidthProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(WidthWriter);
        }

        /// <summary>
        /// Writes a value for the <c>width</c> property as a <c>number</c> value. The <c>width</c> property specifies the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteWidthProperty(double value)
        {
            using (var writer = OpenWidthProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>width</c> property as a <c>number</c> value. The <c>width</c> property specifies the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteWidthProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenWidthProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>width</c> property as a <c>number</c> value. The <c>width</c> property specifies the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteWidthProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenWidthProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>width</c> property as a <c>reference</c> value. The <c>width</c> property specifies the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteWidthPropertyReference(Reference value)
        {
            using (var writer = OpenWidthProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>width</c> property as a <c>reference</c> value. The <c>width</c> property specifies the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteWidthPropertyReference(string value)
        {
            using (var writer = OpenWidthProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>width</c> property as a <c>reference</c> value. The <c>width</c> property specifies the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteWidthPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenWidthProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>width</c> property as a <c>reference</c> value. The <c>width</c> property specifies the width of the polyline. If not specified, the default value is 1.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteWidthPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenWidthProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>granularity</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>granularity</c> property defines the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter GranularityWriter
        {
            get { return m_granularity.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>granularity</c> property. The <c>granularity</c> property defines the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        [NotNull]
        public DoubleCesiumWriter OpenGranularityProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(GranularityWriter);
        }

        /// <summary>
        /// Writes a value for the <c>granularity</c> property as a <c>number</c> value. The <c>granularity</c> property specifies the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteGranularityProperty(double value)
        {
            using (var writer = OpenGranularityProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>granularity</c> property as a <c>number</c> value. The <c>granularity</c> property specifies the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteGranularityProperty(IList<JulianDate> dates, IList<double> values)
        {
            using (var writer = OpenGranularityProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>granularity</c> property as a <c>number</c> value. The <c>granularity</c> property specifies the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteGranularityProperty(IList<JulianDate> dates, IList<double> values, int startIndex, int length)
        {
            using (var writer = OpenGranularityProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>granularity</c> property as a <c>reference</c> value. The <c>granularity</c> property specifies the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteGranularityPropertyReference(Reference value)
        {
            using (var writer = OpenGranularityProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>granularity</c> property as a <c>reference</c> value. The <c>granularity</c> property specifies the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteGranularityPropertyReference(string value)
        {
            using (var writer = OpenGranularityProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>granularity</c> property as a <c>reference</c> value. The <c>granularity</c> property specifies the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteGranularityPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenGranularityProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>granularity</c> property as a <c>reference</c> value. The <c>granularity</c> property specifies the sampling distance, in radians. If not specified, the default value is π / 180.0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteGranularityPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenGranularityProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>material</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>material</c> property defines the material to use to draw the polyline. If not specified, the default value is solid white.
        /// </summary>
        [NotNull]
        public PolylineMaterialCesiumWriter MaterialWriter
        {
            get { return m_material.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>material</c> property. The <c>material</c> property defines the material to use to draw the polyline. If not specified, the default value is solid white.
        /// </summary>
        [NotNull]
        public PolylineMaterialCesiumWriter OpenMaterialProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(MaterialWriter);
        }

        /// <summary>
        /// Gets the writer for the <c>followSurface</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>followSurface</c> property defines whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by <c>arcType</c>, which should be used instead. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter FollowSurfaceWriter
        {
            get { return m_followSurface.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>followSurface</c> property. The <c>followSurface</c> property defines whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by <c>arcType</c>, which should be used instead. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenFollowSurfaceProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(FollowSurfaceWriter);
        }

        /// <summary>
        /// Writes a value for the <c>followSurface</c> property as a <c>boolean</c> value. The <c>followSurface</c> property specifies whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by <c>arcType</c>, which should be used instead. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteFollowSurfaceProperty(bool value)
        {
            using (var writer = OpenFollowSurfaceProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>followSurface</c> property as a <c>reference</c> value. The <c>followSurface</c> property specifies whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by <c>arcType</c>, which should be used instead. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteFollowSurfacePropertyReference(Reference value)
        {
            using (var writer = OpenFollowSurfaceProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>followSurface</c> property as a <c>reference</c> value. The <c>followSurface</c> property specifies whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by <c>arcType</c>, which should be used instead. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteFollowSurfacePropertyReference(string value)
        {
            using (var writer = OpenFollowSurfaceProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>followSurface</c> property as a <c>reference</c> value. The <c>followSurface</c> property specifies whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by <c>arcType</c>, which should be used instead. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteFollowSurfacePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenFollowSurfaceProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>followSurface</c> property as a <c>reference</c> value. The <c>followSurface</c> property specifies whether or not the positions are connected as great arcs (the default) or as straight lines. This property has been superseded by <c>arcType</c>, which should be used instead. If not specified, the default value is <see langword="true"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteFollowSurfacePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenFollowSurfaceProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>shadows</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>shadows</c> property defines whether or not the polyline casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        [NotNull]
        public ShadowModeCesiumWriter ShadowsWriter
        {
            get { return m_shadows.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>shadows</c> property. The <c>shadows</c> property defines whether or not the polyline casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        [NotNull]
        public ShadowModeCesiumWriter OpenShadowsProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ShadowsWriter);
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>shadowMode</c> value. The <c>shadows</c> property specifies whether or not the polyline casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="value">The shadow mode.</param>
        public void WriteShadowsProperty(CesiumShadowMode value)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteShadowMode(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the polyline casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShadowsPropertyReference(Reference value)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the polyline casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteShadowsPropertyReference(string value)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the polyline casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteShadowsPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>shadows</c> property as a <c>reference</c> value. The <c>shadows</c> property specifies whether or not the polyline casts or receives shadows. If not specified, the default value is DISABLED.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteShadowsPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenShadowsProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>depthFailMaterial</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>depthFailMaterial</c> property defines the material to use to draw the polyline when it is below the terrain.
        /// </summary>
        [NotNull]
        public PolylineMaterialCesiumWriter DepthFailMaterialWriter
        {
            get { return m_depthFailMaterial.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>depthFailMaterial</c> property. The <c>depthFailMaterial</c> property defines the material to use to draw the polyline when it is below the terrain.
        /// </summary>
        [NotNull]
        public PolylineMaterialCesiumWriter OpenDepthFailMaterialProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(DepthFailMaterialWriter);
        }

        /// <summary>
        /// Gets the writer for the <c>distanceDisplayCondition</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>distanceDisplayCondition</c> property defines the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        [NotNull]
        public DistanceDisplayConditionCesiumWriter DistanceDisplayConditionWriter
        {
            get { return m_distanceDisplayCondition.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>distanceDisplayCondition</c> property. The <c>distanceDisplayCondition</c> property defines the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        [NotNull]
        public DistanceDisplayConditionCesiumWriter OpenDistanceDisplayConditionProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(DistanceDisplayConditionWriter);
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteDistanceDisplayConditionProperty(Bounds value)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="lowerBound">The lower bound.</param>
        /// <param name="upperBound">The upper bound.</param>
        public void WriteDistanceDisplayConditionProperty(double lowerBound, double upperBound)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(lowerBound, upperBound);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteDistanceDisplayConditionProperty(IList<JulianDate> dates, IList<Bounds> values)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>distanceDisplayCondition</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteDistanceDisplayConditionProperty(IList<JulianDate> dates, IList<Bounds> values, int startIndex, int length)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteDistanceDisplayCondition(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteDistanceDisplayConditionPropertyReference(Reference value)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteDistanceDisplayConditionPropertyReference(string value)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteDistanceDisplayConditionPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>distanceDisplayCondition</c> property as a <c>reference</c> value. The <c>distanceDisplayCondition</c> property specifies the display condition specifying at what distance from the camera this polyline will be displayed.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteDistanceDisplayConditionPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenDistanceDisplayConditionProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>clampToGround</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>clampToGround</c> property defines whether or not the polyline should be clamped to the ground. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter ClampToGroundWriter
        {
            get { return m_clampToGround.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>clampToGround</c> property. The <c>clampToGround</c> property defines whether or not the polyline should be clamped to the ground. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        [NotNull]
        public BooleanCesiumWriter OpenClampToGroundProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ClampToGroundWriter);
        }

        /// <summary>
        /// Writes a value for the <c>clampToGround</c> property as a <c>boolean</c> value. The <c>clampToGround</c> property specifies whether or not the polyline should be clamped to the ground. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteClampToGroundProperty(bool value)
        {
            using (var writer = OpenClampToGroundProperty())
            {
                writer.WriteBoolean(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>clampToGround</c> property as a <c>reference</c> value. The <c>clampToGround</c> property specifies whether or not the polyline should be clamped to the ground. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteClampToGroundPropertyReference(Reference value)
        {
            using (var writer = OpenClampToGroundProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>clampToGround</c> property as a <c>reference</c> value. The <c>clampToGround</c> property specifies whether or not the polyline should be clamped to the ground. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteClampToGroundPropertyReference(string value)
        {
            using (var writer = OpenClampToGroundProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>clampToGround</c> property as a <c>reference</c> value. The <c>clampToGround</c> property specifies whether or not the polyline should be clamped to the ground. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteClampToGroundPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenClampToGroundProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>clampToGround</c> property as a <c>reference</c> value. The <c>clampToGround</c> property specifies whether or not the polyline should be clamped to the ground. If not specified, the default value is <see langword="false"/>.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteClampToGroundPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenClampToGroundProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>classificationType</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>classificationType</c> property defines whether a classification affects terrain, 3D Tiles, or both. If not specified, the default value is BOTH.
        /// </summary>
        [NotNull]
        public ClassificationTypeCesiumWriter ClassificationTypeWriter
        {
            get { return m_classificationType.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>classificationType</c> property. The <c>classificationType</c> property defines whether a classification affects terrain, 3D Tiles, or both. If not specified, the default value is BOTH.
        /// </summary>
        [NotNull]
        public ClassificationTypeCesiumWriter OpenClassificationTypeProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ClassificationTypeWriter);
        }

        /// <summary>
        /// Writes a value for the <c>classificationType</c> property as a <c>classificationType</c> value. The <c>classificationType</c> property specifies whether a classification affects terrain, 3D Tiles, or both. If not specified, the default value is BOTH.
        /// </summary>
        /// <param name="value">The classification type.</param>
        public void WriteClassificationTypeProperty(CesiumClassificationType value)
        {
            using (var writer = OpenClassificationTypeProperty())
            {
                writer.WriteClassificationType(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>classificationType</c> property as a <c>reference</c> value. The <c>classificationType</c> property specifies whether a classification affects terrain, 3D Tiles, or both. If not specified, the default value is BOTH.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteClassificationTypePropertyReference(Reference value)
        {
            using (var writer = OpenClassificationTypeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>classificationType</c> property as a <c>reference</c> value. The <c>classificationType</c> property specifies whether a classification affects terrain, 3D Tiles, or both. If not specified, the default value is BOTH.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteClassificationTypePropertyReference(string value)
        {
            using (var writer = OpenClassificationTypeProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>classificationType</c> property as a <c>reference</c> value. The <c>classificationType</c> property specifies whether a classification affects terrain, 3D Tiles, or both. If not specified, the default value is BOTH.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteClassificationTypePropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenClassificationTypeProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>classificationType</c> property as a <c>reference</c> value. The <c>classificationType</c> property specifies whether a classification affects terrain, 3D Tiles, or both. If not specified, the default value is BOTH.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteClassificationTypePropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenClassificationTypeProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

        /// <summary>
        /// Gets the writer for the <c>zIndex</c> property. The returned instance must be opened by calling the <see cref="CesiumElementWriter.Open"/> method before it can be used for writing. The <c>zIndex</c> property defines the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter ZIndexWriter
        {
            get { return m_zIndex.Value; }
        }

        /// <summary>
        /// Opens and returns the writer for the <c>zIndex</c> property. The <c>zIndex</c> property defines the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        [NotNull]
        public IntegerCesiumWriter OpenZIndexProperty()
        {
            OpenIntervalIfNecessary();
            return OpenAndReturn(ZIndexWriter);
        }

        /// <summary>
        /// Writes a value for the <c>zIndex</c> property as a <c>number</c> value. The <c>zIndex</c> property specifies the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteZIndexProperty(int value)
        {
            using (var writer = OpenZIndexProperty())
            {
                writer.WriteNumber(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>zIndex</c> property as a <c>number</c> value. The <c>zIndex</c> property specifies the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteZIndexProperty(IList<JulianDate> dates, IList<int> values)
        {
            using (var writer = OpenZIndexProperty())
            {
                writer.WriteNumber(dates, values);
            }
        }

        /// <summary>
        /// Writes a value for the <c>zIndex</c> property as a <c>number</c> value. The <c>zIndex</c> property specifies the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The value corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteZIndexProperty(IList<JulianDate> dates, IList<int> values, int startIndex, int length)
        {
            using (var writer = OpenZIndexProperty())
            {
                writer.WriteNumber(dates, values, startIndex, length);
            }
        }

        /// <summary>
        /// Writes a value for the <c>zIndex</c> property as a <c>reference</c> value. The <c>zIndex</c> property specifies the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteZIndexPropertyReference(Reference value)
        {
            using (var writer = OpenZIndexProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>zIndex</c> property as a <c>reference</c> value. The <c>zIndex</c> property specifies the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteZIndexPropertyReference(string value)
        {
            using (var writer = OpenZIndexProperty())
            {
                writer.WriteReference(value);
            }
        }

        /// <summary>
        /// Writes a value for the <c>zIndex</c> property as a <c>reference</c> value. The <c>zIndex</c> property specifies the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteZIndexPropertyReference(string identifier, string propertyName)
        {
            using (var writer = OpenZIndexProperty())
            {
                writer.WriteReference(identifier, propertyName);
            }
        }

        /// <summary>
        /// Writes a value for the <c>zIndex</c> property as a <c>reference</c> value. The <c>zIndex</c> property specifies the z-index of the polyline, used for ordering ground geometry. Only has an effect if the polyline is constant, and <c>clampToGround</c> is true. If not specified, the default value is 0.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteZIndexPropertyReference(string identifier, string[] propertyNames)
        {
            using (var writer = OpenZIndexProperty())
            {
                writer.WriteReference(identifier, propertyNames);
            }
        }

    }
}
