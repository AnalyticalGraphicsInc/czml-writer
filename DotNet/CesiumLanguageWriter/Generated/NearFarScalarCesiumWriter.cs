// <auto-generated>
// This file was generated automatically by GenerateFromSchema. Do NOT edit it.
// https://github.com/AnalyticalGraphicsInc/czml-writer
// </auto-generated>

using CesiumLanguageWriter.Advanced;
using System;
using JetBrains.Annotations;
using System.Collections.Generic;

namespace CesiumLanguageWriter
{
    /// <summary>
    /// Writes a <c>NearFarScalar</c> to a <see cref="CesiumOutputStream"/>. A <c>NearFarScalar</c> is a numeric value which will be linearly interpolated between two values based on an object's distance from the camera, in eye coordinates. The computed value will interpolate between the near value and the far value while the camera distance falls between the near distance and the far distance, and will be clamped to the near or far value while the distance is less than the near distance or greater than the far distance, respectively.
    /// </summary>
    public class NearFarScalarCesiumWriter : CesiumInterpolatablePropertyWriter<NearFarScalarCesiumWriter>, ICesiumDeletablePropertyWriter, ICesiumNearFarScalarValuePropertyWriter, ICesiumReferenceValuePropertyWriter
    {
        /// <summary>
        /// The name of the <c>nearFarScalar</c> property.
        /// </summary>
        [NotNull]
        public const string NearFarScalarPropertyName = "nearFarScalar";

        /// <summary>
        /// The name of the <c>reference</c> property.
        /// </summary>
        [NotNull]
        public const string ReferencePropertyName = "reference";

        /// <summary>
        /// The name of the <c>delete</c> property.
        /// </summary>
        [NotNull]
        public const string DeletePropertyName = "delete";

        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumNearFarScalarValuePropertyAdaptor<NearFarScalarCesiumWriter>> m_asNearFarScalar;
        [NotNull]
        [CSToJavaFinalField]
        private readonly Lazy<CesiumReferenceValuePropertyAdaptor<NearFarScalarCesiumWriter>> m_asReference;

        /// <summary>
        /// Initializes a new instance.
        /// </summary>
        /// <param name="propertyName">The name of the property.</param>
        public NearFarScalarCesiumWriter([NotNull] string propertyName)
            : base(propertyName)
        {
            m_asNearFarScalar = CreateAsNearFarScalar();
            m_asReference = CreateAsReference();
        }

        /// <summary>
        /// Initializes a new instance as a copy of an existing instance.
        /// </summary>
        /// <param name="existingInstance">The existing instance to copy.</param>
        protected NearFarScalarCesiumWriter([NotNull] NearFarScalarCesiumWriter existingInstance)
            : base(existingInstance)
        {
            m_asNearFarScalar = CreateAsNearFarScalar();
            m_asReference = CreateAsReference();
        }

        /// <inheritdoc/>
        public override NearFarScalarCesiumWriter Clone()
        {
            return new NearFarScalarCesiumWriter(this);
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the value specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>, with distances in eye coordinates in meters.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteNearFarScalar(NearFarScalar value)
        {
            const string PropertyName = NearFarScalarPropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteNearFarScalar(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the value specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>, with distances in eye coordinates in meters.
        /// </summary>
        /// <param name="nearDistance">The lower bound of the camera distance range.</param>
        /// <param name="nearValue">The value to use at the lower bound of the camera distance range.</param>
        /// <param name="farDistance">The upper bound of the camera distance range.</param>
        /// <param name="farValue">The value to use at the upper bound of the camera distance range.</param>
        public void WriteNearFarScalar(double nearDistance, double nearValue, double farDistance, double farValue)
        {
            WriteNearFarScalar(new NearFarScalar(nearDistance, nearValue, farDistance, farValue));
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the value specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>, with distances in eye coordinates in meters.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        public void WriteNearFarScalar(IList<JulianDate> dates, IList<NearFarScalar> values)
        {
            WriteNearFarScalar(dates, values, 0, dates.Count);
        }

        /// <summary>
        /// Writes the value expressed as a <c>nearFarScalar</c>, which is the value specified as four values <c>[NearDistance, NearValue, FarDistance, FarValue]</c>, with distances in eye coordinates in meters.
        /// </summary>
        /// <param name="dates">The dates at which the value is specified.</param>
        /// <param name="values">The values corresponding to each date.</param>
        /// <param name="startIndex">The index of the first element to write.</param>
        /// <param name="length">The number of elements to write.</param>
        public void WriteNearFarScalar(IList<JulianDate> dates, IList<NearFarScalar> values, int startIndex, int length)
        {
            const string PropertyName = NearFarScalarPropertyName;
            OpenIntervalIfNecessary();
            CesiumWritingHelper.WriteNearFarScalar(Output, PropertyName, dates, values, startIndex, length);
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the value specified as a reference to another property.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteReference(Reference value)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the value specified as a reference to another property.
        /// </summary>
        /// <param name="value">The reference.</param>
        public void WriteReference(string value)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, value);
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the value specified as a reference to another property.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyName">The property on the referenced object.</param>
        public void WriteReference(string identifier, string propertyName)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, identifier, propertyName);
        }

        /// <summary>
        /// Writes the value expressed as a <c>reference</c>, which is the value specified as a reference to another property.
        /// </summary>
        /// <param name="identifier">The identifier of the object which contains the referenced property.</param>
        /// <param name="propertyNames">The hierarchy of properties to be indexed on the referenced object.</param>
        public void WriteReference(string identifier, string[] propertyNames)
        {
            const string PropertyName = ReferencePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            CesiumWritingHelper.WriteReference(Output, identifier, propertyNames);
        }

        /// <summary>
        /// Writes the value expressed as a <c>delete</c>, which is whether the client should delete existing samples or interval data for this property. Data will be deleted for the containing interval, or if there is no containing interval, then all data. If true, all other properties in this property will be ignored.
        /// </summary>
        /// <param name="value">The value.</param>
        public void WriteDelete(bool value)
        {
            const string PropertyName = DeletePropertyName;
            OpenIntervalIfNecessary();
            Output.WritePropertyName(PropertyName);
            Output.WriteValue(value);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumNearFarScalarValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumNearFarScalarValuePropertyAdaptor<NearFarScalarCesiumWriter> AsNearFarScalar()
        {
            return m_asNearFarScalar.Value;
        }

        [NotNull]
        private Lazy<CesiumNearFarScalarValuePropertyAdaptor<NearFarScalarCesiumWriter>> CreateAsNearFarScalar()
        {
            return new Lazy<CesiumNearFarScalarValuePropertyAdaptor<NearFarScalarCesiumWriter>>(CreateNearFarScalar, false);
        }

        [NotNull]
        private CesiumNearFarScalarValuePropertyAdaptor<NearFarScalarCesiumWriter> CreateNearFarScalar()
        {
            return CesiumValuePropertyAdaptors.CreateNearFarScalar(this);
        }

        /// <summary>
        /// Returns a wrapper for this instance that implements <see cref="ICesiumReferenceValuePropertyWriter"/>. Because the returned instance is a wrapper for this instance, you may call <see cref="ICesiumElementWriter.Close"/> on either this instance or the wrapper, but you must not call it on both.
        /// </summary>
        /// <returns>The wrapper.</returns>
        [NotNull]
        public CesiumReferenceValuePropertyAdaptor<NearFarScalarCesiumWriter> AsReference()
        {
            return m_asReference.Value;
        }

        [NotNull]
        private Lazy<CesiumReferenceValuePropertyAdaptor<NearFarScalarCesiumWriter>> CreateAsReference()
        {
            return new Lazy<CesiumReferenceValuePropertyAdaptor<NearFarScalarCesiumWriter>>(CreateReference, false);
        }

        [NotNull]
        private CesiumReferenceValuePropertyAdaptor<NearFarScalarCesiumWriter> CreateReference()
        {
            return CesiumValuePropertyAdaptors.CreateReference(this);
        }

    }
}
