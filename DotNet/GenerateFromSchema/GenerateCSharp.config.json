{
    "namespace": "CesiumLanguageWriter",
    "lazyNamespace": "System",
    "types": {
        "TimeIntervalCollection": [
            {
                "parameters": [
                    {
                        "type": "TimeInterval",
                        "name": "value",
                        "description": "The interval."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteTimeInterval(Output, value);"
            },
            {
                "parameters": [
                    {
                        "type": "JulianDate",
                        "name": "start",
                        "description": "The earliest date of the interval."
                    },
                    {
                        "type": "JulianDate",
                        "name": "stop",
                        "description": "The latest date of the interval."
                    }
                ],
                "callOverload": "new TimeInterval(start, stop)"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<TimeInterval>",
                        "name": "value",
                        "description": "The intervals."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteTimeIntervalCollection(Output, value);"
            }
        ],
        "TimeInterval": [
            {
                "parameters": [
                    {
                        "type": "TimeInterval",
                        "name": "value",
                        "description": "The interval."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteTimeInterval(Output, value);"
            },
            {
                "parameters": [
                    {
                        "type": "JulianDate",
                        "name": "start",
                        "description": "The earliest date of the interval."
                    },
                    {
                        "type": "JulianDate",
                        "name": "stop",
                        "description": "The latest date of the interval."
                    }
                ],
                "callOverload": "new TimeInterval(start, stop)"
            }
        ],
        "Cartesian2": [
            {
                "parameters": [
                    {
                        "type": "Rectangular",
                        "name": "value",
                        "description": "The value."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteCartesian2(Output, value);"
            },
            {
                "parameters": [
                    {
                        "type": "double",
                        "name": "x",
                        "description": "The X component."
                    },
                    {
                        "type": "double",
                        "name": "y",
                        "description": "The Y component."
                    }
                ],
                "callOverload": "new Rectangular(x, y)"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the vector is specified."
                    },
                    {
                        "type": "IList<Rectangular>",
                        "name": "values",
                        "description": "The values corresponding to each date."
                    }
                ],
                "callOverload": "dates, values, 0, dates.Count"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the vector is specified."
                    },
                    {
                        "type": "IList<Rectangular>",
                        "name": "values",
                        "description": "The values corresponding to each date."
                    },
                    {
                        "type": "int",
                        "name": "startIndex",
                        "description": "The index of the first element to use in the `values` collection."
                    },
                    {
                        "type": "int",
                        "name": "length",
                        "description": "The number of elements to use from the `values` collection."
                    }
                ],
                "writePropertyName": false,
                "writeValue": "CesiumWritingHelper.WriteCartesian2(Output, PropertyName, dates, values, startIndex, length);"
            }
        ],
        "Cartesian3": [
            {
                "parameters": [
                    {
                        "type": "Cartesian",
                        "name": "value",
                        "description": "The value."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteCartesian3(Output, value);"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the vector is specified."
                    },
                    {
                        "type": "IList<Cartesian>",
                        "name": "values",
                        "description": "The values corresponding to each date."
                    }
                ],
                "callOverload": "dates, values, 0, dates.Count"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the vector is specified."
                    },
                    {
                        "type": "IList<Cartesian>",
                        "name": "values",
                        "description": "The values corresponding to each date."
                    },
                    {
                        "type": "int",
                        "name": "startIndex",
                        "description": "The index of the first element to use in the `values` collection."
                    },
                    {
                        "type": "int",
                        "name": "length",
                        "description": "The number of elements to use from the `values` collection."
                    }
                ],
                "writePropertyName": false,
                "writeValue": "CesiumWritingHelper.WriteCartesian3(Output, PropertyName, dates, values, startIndex, length);"
            }
        ],
        "Cartesian3List": [
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IEnumerable<Cartesian>",
                        "name": "values",
                        "description": "The values."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteCartesian3List(Output, values);"
            }
        ],
        "UnitCartesian3List": [
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IEnumerable<UnitCartesian>",
                        "name": "values",
                        "description": "The values."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteUnitCartesian3List(Output, values);"
            }
        ],
        "UnitSphericalList": [
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IEnumerable<UnitSpherical>",
                        "name": "values",
                        "description": "The values."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteUnitSphericalList(Output, values);"
            }
        ],
        "Cartographic": [
            {
                "parameters": [
                    {
                        "type": "Cartographic",
                        "name": "value",
                        "description": "The interval."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteCartographic(Output, value);"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the position is specified."
                    },
                    {
                        "type": "IList<Cartographic>",
                        "name": "values",
                        "description": "The values corresponding to each date."
                    }
                ],
                "callOverload": "dates, values, 0, dates.Count"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the vector is specified."
                    },
                    {
                        "type": "IList<Cartographic>",
                        "name": "values",
                        "description": "The position corresponding to each date."
                    },
                    {
                        "type": "int",
                        "name": "startIndex",
                        "description": "The index of the first element to use in the `values` collection."
                    },
                    {
                        "type": "int",
                        "name": "length",
                        "description": "The number of elements to use from the `values` collection."
                    }
                ],
                "writePropertyName": false,
                "writeValue": "CesiumWritingHelper.WriteCartographic(Output, PropertyName, dates, values, startIndex, length);"
            }
        ],
        "CartographicList": [
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IEnumerable<Cartographic>",
                        "name": "values",
                        "description": "The values."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteCartographicList(Output, values);"
            }
        ],
        "Image": [
            {
                "parameters": [
                    {
                        "type": "CesiumResource",
                        "name": "resource",
                        "description": "A resource object describing the image."
                    }
                ],
				"callOverload": "resource.Url, resource.Behavior"
            },
			{
                "parameters": [
                    {
                        "type": "string",
                        "name": "url",
                        "description": "The URL of the image."
                    },
                    {
                        "type": "CesiumResourceBehavior",
                        "name": "resourceBehavior",
                        "description": "An enumeration describing how to include the image in the document. For even more control, use the overload that takes a ICesiumUrlResolver."
                    }
                ],
                "writeValue": "Output.WriteValue(CesiumFormattingHelper.GetResourceUrl(url, resourceBehavior));",
				"needsInterval": false
            },
            {
                "parameters": [
                    {
                        "type": "string",
                        "name": "url",
                        "description": "The URL of the image.  The provided ICesiumUrlResolver will be used to build the final URL embedded in the document."
                    },
                    {
                        "type": "ICesiumUrlResolver",
                        "name": "resolver",
                        "description": "An ICesiumUrlResolver used to build the final URL that will be embedded in the document."
                    }
                ],
                "writeValue": "Output.WriteValue(resolver.ResolveUrl(url));",
				"needsInterval": false
            },
            {
                "namespaces": ["System.Drawing"],
                "parameters": [
                    {
                        
                        "type": "Image",
                        "name": "image",
                        "description": "The image.  A data URI will be created for this image, using PNG encoding."
                    }
                ],
                "callOverload": "image, CesiumImageFormat.Png"
            },
            {
                "namespaces": ["System.Drawing"],
                "parameters": [
                    {
                        
                        "type": "Image",
                        "name": "image",
                        "description": "The image.  A data URI will be created for this image."
                    },
					{
                        
                        "type": "CesiumImageFormat",
                        "name": "imageFormat",
                        "description": "The image format to use to encode the image in the data URI."
                    }
                ],
				"writeValue": "Output.WriteValue(CesiumFormattingHelper.ImageToDataUri(image, imageFormat));",
				"needsInterval": false
            },
        ],
        "HorizontalOrigin": [
            {
                "parameters": [
                    {
                        "type": "CesiumHorizontalOrigin",
                        "name": "value",
                        "description": "The horizontal origin."
                    }
                ],
                "writeValue": "Output.WriteValue(CesiumFormattingHelper.HorizontalOriginToString(value));",
				"needsInterval": false
            }
        ],
        "VerticalOrigin": [
            {
                "parameters": [
                    {
                        "type": "CesiumVerticalOrigin",
                        "name": "value",
                        "description": "The vertical origin."
                    }
                ],
                "writeValue": "Output.WriteValue(CesiumFormattingHelper.VerticalOriginToString(value));",
				"needsInterval": false
            }
        ],
        "LabelStyle": [
            {
                "parameters": [
                    {
                        "type": "CesiumLabelStyle",
                        "name": "value",
                        "description": "The label style."
                    }
                ],
                "writeValue": "Output.WriteValue(CesiumFormattingHelper.LabelStyleToString(value));",
				"needsInterval": false
            }
        ],
        "Double": [
            {
                "parameters": [
                    {
                        "type": "double",
                        "name": "value",
                        "description": "The value."
                    }
                ],
                "writeValue": "Output.WriteValue(value);",
				"needsInterval": false
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the value is specified."
                    },
                    {
                        "type": "IList<double>",
                        "name": "values",
                        "description": "The value corresponding to each date."
                    },
                    {
                        "type": "int",
                        "name": "startIndex",
                        "description": "The index of the first element to use in the `values` collection."
                    },
                    {
                        "type": "int",
                        "name": "length",
                        "description": "The number of elements to use from the `values` collection."
                    }
                ],
                "writePropertyName": false,
                "writeValue": "CesiumWritingHelper.WriteDouble(Output, PropertyName, dates, values, startIndex, length);"
            }
        ],
        "Boolean": [
            {
                "parameters": [
                    {
                        "type": "bool",
                        "name": "value",
                        "description": "The value."
                    }
                ],
                "writeValue": "Output.WriteValue(value);",
				"needsInterval": false
            }
        ],
        "Rgba": [
            {
                "namespaces": ["System.Drawing"],
                "parameters": [
                    {
                        "type": "Color",
                        "name": "color",
                        "description": "The color."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteRgba(Output, color);"
            },
            {
                "parameters": [
                    {
                        "type": "int",
                        "name": "red",
                        "description": "The red component in the range 0 to 255."
                    },
                    {
                        "type": "int",
                        "name": "green",
                        "description": "The green component in the range 0 to 255."
                    },
                    {
                        "type": "int",
                        "name": "blue",
                        "description": "The blue component in the range 0 to 255."
                    },
                    {
                        "type": "int",
                        "name": "alpha",
                        "description": "The alpha component in the range 0 to 255."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteRgba(Output, red, green, blue, alpha);"
            },
            {
                "namespaces": ["System.Collections.Generic", "System.Drawing"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the value is specified."
                    },
                    {
                        "type": "IList<Color>",
                        "name": "colors",
                        "description": "The color corresponding to each date."
                    },
                    {
                        "type": "int",
                        "name": "startIndex",
                        "description": "The index of the first element to use in the `colors` collection."
                    },
                    {
                        "type": "int",
                        "name": "length",
                        "description": "The number of elements to use from the `colors` collection."
                    }
                ],
                "writePropertyName": false,
                "writeValue": "CesiumWritingHelper.WriteRgba(Output, PropertyName, dates, colors, startIndex, length);"
            }
        ],
        "Rgbaf": [
            {
                "parameters": [
                    {
                        "type": "float",
                        "name": "red",
                        "description": "The red component in the range 0 to 1.0."
                    },
                    {
                        "type": "float",
                        "name": "green",
                        "description": "The green component in the range 0 to 1.0."
                    },
                    {
                        "type": "float",
                        "name": "blue",
                        "description": "The blue component in the range 0 to 1.0."
                    },
                    {
                        "type": "float",
                        "name": "alpha",
                        "description": "The alpha component in the range 0 to 1.0."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteRgbaf(Output, red, green, blue, alpha);"
            }
        ],
        "UnitQuaternion": [
            {
                "parameters": [
                    {
                        "type": "UnitQuaternion",
                        "name": "value",
                        "description": "The value."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteUnitQuaternion(Output, value);"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the rotation is specified."
                    },
                    {
                        "type": "IList<UnitQuaternion>",
                        "name": "values",
                        "description": "The values corresponding to each date."
                    }
                ],
                "callOverload": "dates, values, 0, dates.Count"
            },
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IList<JulianDate>",
                        "name": "dates",
                        "description": "The dates at which the rotation is specified."
                    },
                    {
                        "type": "IList<UnitQuaternion>",
                        "name": "values",
                        "description": "The values corresponding to each date."
                    },
                    {
                        "type": "int",
                        "name": "startIndex",
                        "description": "The index of the first element to use in the `values` collection."
                    },
                    {
                        "type": "int",
                        "name": "length",
                        "description": "The number of elements to use from the `values` collection."
                    }
                ],
                "writePropertyName": false,
                "writeValue": "CesiumWritingHelper.WriteUnitQuaternion(Output, PropertyName, dates, values, startIndex, length);"
            }
        ],
        "References": [
            {
                "namespaces": ["System.Collections.Generic"],
                "parameters": [
                    {
                        "type": "IEnumerable<string>",
                        "name": "references",
                        "description": "The list of references."
                    }
                ],
                "writeValue": "CesiumWritingHelper.WriteReferences(Output, references);"
            }
        ],
        "String": [
            {
                "parameters": [
                    {
                        "type": "string",
                        "name": "value",
                        "description": "The value."
                    }
                ],
                "writeValue": "Output.WriteValue(value);",
				"needsInterval": false
            }
        ],
        "Font": [
            {
                "parameters": [
                    {
                        "type": "string",
                        "name": "font",
                        "description": "The font."
                    }
                ],
                "writeValue": "Output.WriteValue(font);",
				"needsInterval": false
            }
        ]
    }
}
